"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/firebase";
exports.ids = ["vendor-chunks/firebase"];
exports.modules = {

/***/ "(ssr)/./node_modules/firebase/node_modules/@firebase/auth/dist/node-esm/index.js":
/*!**********************************************************************************!*\
  !*** ./node_modules/firebase/node_modules/@firebase/auth/dist/node-esm/index.js ***!
  \**********************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

__webpack_require__.r(__webpack_exports__);
/* harmony export */ __webpack_require__.d(__webpack_exports__, {
/* harmony export */   ActionCodeOperation: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.A),
/* harmony export */   ActionCodeURL: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ai),
/* harmony export */   AuthCredential: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.L),
/* harmony export */   AuthErrorCodes: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.I),
/* harmony export */   EmailAuthCredential: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.M),
/* harmony export */   EmailAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.V),
/* harmony export */   FacebookAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.W),
/* harmony export */   FactorId: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.F),
/* harmony export */   GithubAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.Y),
/* harmony export */   GoogleAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.X),
/* harmony export */   OAuthCredential: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.N),
/* harmony export */   OAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.Z),
/* harmony export */   OperationType: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.O),
/* harmony export */   PhoneAuthCredential: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.Q),
/* harmony export */   PhoneAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.P),
/* harmony export */   PhoneMultiFactorGenerator: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.m),
/* harmony export */   ProviderId: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.p),
/* harmony export */   RecaptchaVerifier: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.R),
/* harmony export */   SAMLAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__._),
/* harmony export */   SignInMethod: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.S),
/* harmony export */   TotpMultiFactorGenerator: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.T),
/* harmony export */   TotpSecret: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.n),
/* harmony export */   TwitterAuthProvider: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.$),
/* harmony export */   applyActionCode: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a7),
/* harmony export */   beforeAuthStateChanged: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.x),
/* harmony export */   browserLocalPersistence: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.b),
/* harmony export */   browserPopupRedirectResolver: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.k),
/* harmony export */   browserSessionPersistence: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a),
/* harmony export */   checkActionCode: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a8),
/* harmony export */   confirmPasswordReset: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a6),
/* harmony export */   connectAuthEmulator: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.K),
/* harmony export */   createUserWithEmailAndPassword: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.aa),
/* harmony export */   debugErrorMap: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.G),
/* harmony export */   deleteUser: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.E),
/* harmony export */   fetchSignInMethodsForEmail: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.af),
/* harmony export */   getAdditionalUserInfo: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.aq),
/* harmony export */   getAuth: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.o),
/* harmony export */   getIdToken: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.an),
/* harmony export */   getIdTokenResult: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ao),
/* harmony export */   getMultiFactorResolver: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.as),
/* harmony export */   getRedirectResult: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.j),
/* harmony export */   inMemoryPersistence: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.U),
/* harmony export */   indexedDBLocalPersistence: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.i),
/* harmony export */   initializeAuth: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.J),
/* harmony export */   initializeRecaptchaConfig: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.t),
/* harmony export */   isSignInWithEmailLink: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ad),
/* harmony export */   linkWithCredential: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a2),
/* harmony export */   linkWithPhoneNumber: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.l),
/* harmony export */   linkWithPopup: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.d),
/* harmony export */   linkWithRedirect: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.g),
/* harmony export */   multiFactor: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.at),
/* harmony export */   onAuthStateChanged: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.y),
/* harmony export */   onIdTokenChanged: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.w),
/* harmony export */   parseActionCodeURL: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.aj),
/* harmony export */   prodErrorMap: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.H),
/* harmony export */   reauthenticateWithCredential: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a3),
/* harmony export */   reauthenticateWithPhoneNumber: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.r),
/* harmony export */   reauthenticateWithPopup: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.e),
/* harmony export */   reauthenticateWithRedirect: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.h),
/* harmony export */   reload: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ar),
/* harmony export */   revokeAccessToken: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.D),
/* harmony export */   sendEmailVerification: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ag),
/* harmony export */   sendPasswordResetEmail: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a5),
/* harmony export */   sendSignInLinkToEmail: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ac),
/* harmony export */   setPersistence: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.q),
/* harmony export */   signInAnonymously: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a0),
/* harmony export */   signInWithCredential: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a1),
/* harmony export */   signInWithCustomToken: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a4),
/* harmony export */   signInWithEmailAndPassword: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ab),
/* harmony export */   signInWithEmailLink: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ae),
/* harmony export */   signInWithPhoneNumber: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.s),
/* harmony export */   signInWithPopup: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.c),
/* harmony export */   signInWithRedirect: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.f),
/* harmony export */   signOut: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.C),
/* harmony export */   unlink: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ap),
/* harmony export */   updateCurrentUser: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.B),
/* harmony export */   updateEmail: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.al),
/* harmony export */   updatePassword: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.am),
/* harmony export */   updatePhoneNumber: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.u),
/* harmony export */   updateProfile: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ak),
/* harmony export */   useDeviceLanguage: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.z),
/* harmony export */   validatePassword: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.v),
/* harmony export */   verifyBeforeUpdateEmail: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.ah),
/* harmony export */   verifyPasswordResetCode: () => (/* reexport safe */ _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__.a9)
/* harmony export */ });
/* harmony import */ var _totp_219bb96f_js__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./totp-219bb96f.js */ "(ssr)/./node_modules/firebase/node_modules/@firebase/auth/dist/node-esm/totp-219bb96f.js");
/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/app */ "(ssr)/./node_modules/@firebase/app/dist/esm/index.esm2017.js");
/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/util */ "(ssr)/./node_modules/@firebase/util/dist/node-esm/index.node.esm.js");
/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! @firebase/component */ "(ssr)/./node_modules/@firebase/component/dist/esm/index.esm2017.js");
/* harmony import */ var undici__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! undici */ "(ssr)/./node_modules/undici/index.js");
/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! @firebase/logger */ "(ssr)/./node_modules/@firebase/logger/dist/esm/index.esm2017.js");








/***/ }),

/***/ "(ssr)/./node_modules/firebase/node_modules/@firebase/auth/dist/node-esm/totp-219bb96f.js":
/*!******************************************************************************************!*\
  !*** ./node_modules/firebase/node_modules/@firebase/auth/dist/node-esm/totp-219bb96f.js ***!
  \******************************************************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   $: () => (/* binding */ TwitterAuthProvider),\n/* harmony export */   A: () => (/* binding */ ActionCodeOperation),\n/* harmony export */   B: () => (/* binding */ updateCurrentUser),\n/* harmony export */   C: () => (/* binding */ signOut),\n/* harmony export */   D: () => (/* binding */ revokeAccessToken),\n/* harmony export */   E: () => (/* binding */ deleteUser),\n/* harmony export */   F: () => (/* binding */ FactorId),\n/* harmony export */   G: () => (/* binding */ debugErrorMap),\n/* harmony export */   H: () => (/* binding */ prodErrorMap),\n/* harmony export */   I: () => (/* binding */ AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY),\n/* harmony export */   J: () => (/* binding */ initializeAuth),\n/* harmony export */   K: () => (/* binding */ connectAuthEmulator),\n/* harmony export */   L: () => (/* binding */ AuthCredential),\n/* harmony export */   M: () => (/* binding */ EmailAuthCredential),\n/* harmony export */   N: () => (/* binding */ OAuthCredential),\n/* harmony export */   O: () => (/* binding */ OperationType),\n/* harmony export */   P: () => (/* binding */ PhoneAuthProvider),\n/* harmony export */   Q: () => (/* binding */ PhoneAuthCredential),\n/* harmony export */   R: () => (/* binding */ RecaptchaVerifier),\n/* harmony export */   S: () => (/* binding */ SignInMethod),\n/* harmony export */   T: () => (/* binding */ TotpMultiFactorGenerator),\n/* harmony export */   U: () => (/* binding */ inMemoryPersistence),\n/* harmony export */   V: () => (/* binding */ EmailAuthProvider),\n/* harmony export */   W: () => (/* binding */ FacebookAuthProvider),\n/* harmony export */   X: () => (/* binding */ GoogleAuthProvider),\n/* harmony export */   Y: () => (/* binding */ GithubAuthProvider),\n/* harmony export */   Z: () => (/* binding */ OAuthProvider),\n/* harmony export */   _: () => (/* binding */ SAMLAuthProvider),\n/* harmony export */   a: () => (/* binding */ browserSessionPersistence),\n/* harmony export */   a0: () => (/* binding */ signInAnonymously),\n/* harmony export */   a1: () => (/* binding */ signInWithCredential),\n/* harmony export */   a2: () => (/* binding */ linkWithCredential),\n/* harmony export */   a3: () => (/* binding */ reauthenticateWithCredential),\n/* harmony export */   a4: () => (/* binding */ signInWithCustomToken),\n/* harmony export */   a5: () => (/* binding */ sendPasswordResetEmail),\n/* harmony export */   a6: () => (/* binding */ confirmPasswordReset),\n/* harmony export */   a7: () => (/* binding */ applyActionCode),\n/* harmony export */   a8: () => (/* binding */ checkActionCode),\n/* harmony export */   a9: () => (/* binding */ verifyPasswordResetCode),\n/* harmony export */   aA: () => (/* binding */ _fail),\n/* harmony export */   aB: () => (/* binding */ debugAssert),\n/* harmony export */   aC: () => (/* binding */ _persistenceKeyName),\n/* harmony export */   aD: () => (/* binding */ _serverAppCurrentUserOperationNotSupportedError),\n/* harmony export */   aE: () => (/* binding */ _castAuth),\n/* harmony export */   aF: () => (/* binding */ FederatedAuthProvider),\n/* harmony export */   aG: () => (/* binding */ BaseOAuthProvider),\n/* harmony export */   aH: () => (/* binding */ _emulatorUrl),\n/* harmony export */   aI: () => (/* binding */ _performApiRequest),\n/* harmony export */   aJ: () => (/* binding */ _isIOS),\n/* harmony export */   aK: () => (/* binding */ _isAndroid),\n/* harmony export */   aL: () => (/* binding */ _isIOS7Or8),\n/* harmony export */   aM: () => (/* binding */ _createError),\n/* harmony export */   aN: () => (/* binding */ _isMobileBrowser),\n/* harmony export */   aO: () => (/* binding */ _isIE10),\n/* harmony export */   aP: () => (/* binding */ UserImpl),\n/* harmony export */   aQ: () => (/* binding */ AuthImpl),\n/* harmony export */   aR: () => (/* binding */ _getClientVersion),\n/* harmony export */   aS: () => (/* binding */ FetchProvider),\n/* harmony export */   aT: () => (/* binding */ SAMLAuthCredential),\n/* harmony export */   aa: () => (/* binding */ createUserWithEmailAndPassword),\n/* harmony export */   ab: () => (/* binding */ signInWithEmailAndPassword),\n/* harmony export */   ac: () => (/* binding */ sendSignInLinkToEmail),\n/* harmony export */   ad: () => (/* binding */ isSignInWithEmailLink),\n/* harmony export */   ae: () => (/* binding */ signInWithEmailLink),\n/* harmony export */   af: () => (/* binding */ fetchSignInMethodsForEmail),\n/* harmony export */   ag: () => (/* binding */ sendEmailVerification),\n/* harmony export */   ah: () => (/* binding */ verifyBeforeUpdateEmail),\n/* harmony export */   ai: () => (/* binding */ ActionCodeURL),\n/* harmony export */   aj: () => (/* binding */ parseActionCodeURL),\n/* harmony export */   ak: () => (/* binding */ updateProfile),\n/* harmony export */   al: () => (/* binding */ updateEmail),\n/* harmony export */   am: () => (/* binding */ updatePassword),\n/* harmony export */   an: () => (/* binding */ getIdToken),\n/* harmony export */   ao: () => (/* binding */ _getIdTokenResult2),\n/* harmony export */   ap: () => (/* binding */ unlink),\n/* harmony export */   aq: () => (/* binding */ getAdditionalUserInfo),\n/* harmony export */   ar: () => (/* binding */ _reload2),\n/* harmony export */   as: () => (/* binding */ getMultiFactorResolver),\n/* harmony export */   at: () => (/* binding */ multiFactor),\n/* harmony export */   au: () => (/* binding */ _getInstance),\n/* harmony export */   av: () => (/* binding */ _assert),\n/* harmony export */   aw: () => (/* binding */ _signInWithCredential),\n/* harmony export */   ax: () => (/* binding */ _reauthenticate),\n/* harmony export */   ay: () => (/* binding */ _link),\n/* harmony export */   az: () => (/* binding */ signInWithIdp),\n/* harmony export */   b: () => (/* binding */ browserLocalPersistence),\n/* harmony export */   c: () => (/* binding */ signInWithPopup),\n/* harmony export */   d: () => (/* binding */ linkWithPopup),\n/* harmony export */   e: () => (/* binding */ reauthenticateWithPopup),\n/* harmony export */   f: () => (/* binding */ signInWithRedirect),\n/* harmony export */   g: () => (/* binding */ linkWithRedirect),\n/* harmony export */   h: () => (/* binding */ reauthenticateWithRedirect),\n/* harmony export */   i: () => (/* binding */ indexedDBLocalPersistence),\n/* harmony export */   j: () => (/* binding */ getRedirectResult),\n/* harmony export */   k: () => (/* binding */ browserPopupRedirectResolver),\n/* harmony export */   l: () => (/* binding */ linkWithPhoneNumber),\n/* harmony export */   m: () => (/* binding */ PhoneMultiFactorGenerator),\n/* harmony export */   n: () => (/* binding */ TotpSecret),\n/* harmony export */   o: () => (/* binding */ getAuth),\n/* harmony export */   p: () => (/* binding */ ProviderId),\n/* harmony export */   q: () => (/* binding */ setPersistence),\n/* harmony export */   r: () => (/* binding */ reauthenticateWithPhoneNumber),\n/* harmony export */   s: () => (/* binding */ signInWithPhoneNumber),\n/* harmony export */   t: () => (/* binding */ initializeRecaptchaConfig),\n/* harmony export */   u: () => (/* binding */ updatePhoneNumber),\n/* harmony export */   v: () => (/* binding */ validatePassword),\n/* harmony export */   w: () => (/* binding */ onIdTokenChanged),\n/* harmony export */   x: () => (/* binding */ beforeAuthStateChanged),\n/* harmony export */   y: () => (/* binding */ onAuthStateChanged),\n/* harmony export */   z: () => (/* binding */ useDeviceLanguage)\n/* harmony export */ });\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ \"(ssr)/./node_modules/@firebase/app/dist/esm/index.esm2017.js\");\n/* harmony import */ var _firebase_util__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! @firebase/util */ \"(ssr)/./node_modules/@firebase/util/dist/node-esm/index.node.esm.js\");\n/* harmony import */ var tslib__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! tslib */ \"(ssr)/./node_modules/tslib/tslib.es6.mjs\");\n/* harmony import */ var _firebase_component__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! @firebase/component */ \"(ssr)/./node_modules/@firebase/component/dist/esm/index.esm2017.js\");\n/* harmony import */ var undici__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! undici */ \"(ssr)/./node_modules/undici/index.js\");\n/* harmony import */ var _firebase_logger__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! @firebase/logger */ \"(ssr)/./node_modules/@firebase/logger/dist/esm/index.esm2017.js\");\nvar _SERVER_ERROR_MAP;\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction _callSuper(t, o, e) { return o = _getPrototypeOf(o), _possibleConstructorReturn(t, _isNativeReflectConstruct() ? Reflect.construct(o, e || [], _getPrototypeOf(t).constructor) : o.apply(t, e)); }\nfunction _possibleConstructorReturn(t, e) { if (e && (\"object\" == _typeof(e) || \"function\" == typeof e)) return e; if (void 0 !== e) throw new TypeError(\"Derived constructors may only return object or undefined\"); return _assertThisInitialized(t); }\nfunction _assertThisInitialized(e) { if (void 0 === e) throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); return e; }\nfunction _isNativeReflectConstruct() { try { var t = !Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); } catch (t) {} return (_isNativeReflectConstruct = function _isNativeReflectConstruct() { return !!t; })(); }\nfunction _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t); }, _getPrototypeOf(t); }\nfunction _inherits(t, e) { if (\"function\" != typeof e && null !== e) throw new TypeError(\"Super expression must either be null or a function\"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, \"prototype\", { writable: !1 }), e && _setPrototypeOf(t, e); }\nfunction _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t; }, _setPrototypeOf(t, e); }\nfunction _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _slicedToArray(r, e) { return _arrayWithHoles(r) || _iterableToArrayLimit(r, e) || _unsupportedIterableToArray(r, e) || _nonIterableRest(); }\nfunction _nonIterableRest() { throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _iterableToArrayLimit(r, l) { var t = null == r ? null : \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (null != t) { var e, n, i, u, a = [], f = !0, o = !1; try { if (i = (t = t.call(r)).next, 0 === l) { if (Object(t) !== t) return; f = !1; } else for (; !(f = (e = i.call(t)).done) && (a.push(e.value), a.length !== l); f = !0); } catch (r) { o = !0, n = r; } finally { try { if (!f && null != t[\"return\"] && (u = t[\"return\"](), Object(u) !== u)) return; } finally { if (o) throw n; } } return a; } }\nfunction _arrayWithHoles(r) { if (Array.isArray(r)) return r; }\nfunction _createForOfIteratorHelper(r, e) { var t = \"undefined\" != typeof Symbol && r[Symbol.iterator] || r[\"@@iterator\"]; if (!t) { if (Array.isArray(r) || (t = _unsupportedIterableToArray(r)) || e && r && \"number\" == typeof r.length) { t && (r = t); var _n = 0, F = function F() {}; return { s: F, n: function n() { return _n >= r.length ? { done: !0 } : { done: !1, value: r[_n++] }; }, e: function e(r) { throw r; }, f: F }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); } var o, a = !0, u = !1; return { s: function s() { t = t.call(r); }, n: function n() { var r = t.next(); return a = r.done, r; }, e: function e(r) { u = !0, o = r; }, f: function f() { try { a || null == t[\"return\"] || t[\"return\"](); } finally { if (u) throw o; } } }; }\nfunction asyncGeneratorStep(n, t, e, r, o, a, c) { try { var i = n[a](c), u = i.value; } catch (n) { return void e(n); } i.done ? t(u) : Promise.resolve(u).then(r, o); }\nfunction _asyncToGenerator(n) { return function () { var t = this, e = arguments; return new Promise(function (r, o) { var a = n.apply(t, e); function _next(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"next\", n); } function _throw(n) { asyncGeneratorStep(a, r, o, _next, _throw, \"throw\", n); } _next(void 0); }); }; }\nfunction _classCallCheck(a, n) { if (!(a instanceof n)) throw new TypeError(\"Cannot call a class as a function\"); }\nfunction _defineProperties(e, r) { for (var t = 0; t < r.length; t++) { var o = r[t]; o.enumerable = o.enumerable || !1, o.configurable = !0, \"value\" in o && (o.writable = !0), Object.defineProperty(e, _toPropertyKey(o.key), o); } }\nfunction _createClass(e, r, t) { return r && _defineProperties(e.prototype, r), t && _defineProperties(e, t), Object.defineProperty(e, \"prototype\", { writable: !1 }), e; }\nfunction _toConsumableArray(r) { return _arrayWithoutHoles(r) || _iterableToArray(r) || _unsupportedIterableToArray(r) || _nonIterableSpread(); }\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\nfunction _unsupportedIterableToArray(r, a) { if (r) { if (\"string\" == typeof r) return _arrayLikeToArray(r, a); var t = {}.toString.call(r).slice(8, -1); return \"Object\" === t && r.constructor && (t = r.constructor.name), \"Map\" === t || \"Set\" === t ? Array.from(r) : \"Arguments\" === t || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(t) ? _arrayLikeToArray(r, a) : void 0; } }\nfunction _iterableToArray(r) { if (\"undefined\" != typeof Symbol && null != r[Symbol.iterator] || null != r[\"@@iterator\"]) return Array.from(r); }\nfunction _arrayWithoutHoles(r) { if (Array.isArray(r)) return _arrayLikeToArray(r); }\nfunction _arrayLikeToArray(r, a) { (null == a || a > r.length) && (a = r.length); for (var e = 0, n = Array(a); e < a; e++) n[e] = r[e]; return n; }\nfunction _defineProperty(e, r, t) { return (r = _toPropertyKey(r)) in e ? Object.defineProperty(e, r, { value: t, enumerable: !0, configurable: !0, writable: !0 }) : e[r] = t, e; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : i + \"\"; }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n\n\n\n\n\n\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * An enum of factors that may be used for multifactor authentication.\r\n *\r\n * @public\r\n */\nvar FactorId = {\n  /** Phone as second factor */\n  PHONE: 'phone',\n  TOTP: 'totp'\n};\n/**\r\n * Enumeration of supported providers.\r\n *\r\n * @public\r\n */\nvar ProviderId = {\n  /** Facebook provider ID */\n  FACEBOOK: 'facebook.com',\n  /** GitHub provider ID */\n  GITHUB: 'github.com',\n  /** Google provider ID */\n  GOOGLE: 'google.com',\n  /** Password provider */\n  PASSWORD: 'password',\n  /** Phone provider */\n  PHONE: 'phone',\n  /** Twitter provider ID */\n  TWITTER: 'twitter.com'\n};\n/**\r\n * Enumeration of supported sign-in methods.\r\n *\r\n * @public\r\n */\nvar SignInMethod = {\n  /** Email link sign in method */\n  EMAIL_LINK: 'emailLink',\n  /** Email/password sign in method */\n  EMAIL_PASSWORD: 'password',\n  /** Facebook sign in method */\n  FACEBOOK: 'facebook.com',\n  /** GitHub sign in method */\n  GITHUB: 'github.com',\n  /** Google sign in method */\n  GOOGLE: 'google.com',\n  /** Phone sign in method */\n  PHONE: 'phone',\n  /** Twitter sign in method */\n  TWITTER: 'twitter.com'\n};\n/**\r\n * Enumeration of supported operation types.\r\n *\r\n * @public\r\n */\nvar OperationType = {\n  /** Operation involving linking an additional provider to an already signed-in user. */\n  LINK: 'link',\n  /** Operation involving using a provider to reauthenticate an already signed-in user. */\n  REAUTHENTICATE: 'reauthenticate',\n  /** Operation involving signing in a user. */\n  SIGN_IN: 'signIn'\n};\n/**\r\n * An enumeration of the possible email action types.\r\n *\r\n * @public\r\n */\nvar ActionCodeOperation = {\n  /** The email link sign-in action. */\n  EMAIL_SIGNIN: 'EMAIL_SIGNIN',\n  /** The password reset action. */\n  PASSWORD_RESET: 'PASSWORD_RESET',\n  /** The email revocation action. */\n  RECOVER_EMAIL: 'RECOVER_EMAIL',\n  /** The revert second factor addition email action. */\n  REVERT_SECOND_FACTOR_ADDITION: 'REVERT_SECOND_FACTOR_ADDITION',\n  /** The revert second factor addition email action. */\n  VERIFY_AND_CHANGE_EMAIL: 'VERIFY_AND_CHANGE_EMAIL',\n  /** The email verification action. */\n  VERIFY_EMAIL: 'VERIFY_EMAIL'\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _debugErrorMap() {\n  var _ref;\n  return _ref = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"admin-restricted-operation\" /* AuthErrorCode.ADMIN_ONLY_OPERATION */, 'This operation is restricted to administrators only.'), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */, ''), \"app-not-authorized\" /* AuthErrorCode.APP_NOT_AUTHORIZED */, \"This app, identified by the domain where it's hosted, is not \" + 'authorized to use Firebase Authentication with the provided API key. ' + 'Review your key configuration in the Google API console.'), \"app-not-installed\" /* AuthErrorCode.APP_NOT_INSTALLED */, 'The requested mobile application corresponding to the identifier (' + 'Android package name or iOS bundle ID) provided is not installed on ' + 'this device.'), \"captcha-check-failed\" /* AuthErrorCode.CAPTCHA_CHECK_FAILED */, 'The reCAPTCHA response token provided is either invalid, expired, ' + 'already used or the domain associated with it does not match the list ' + 'of whitelisted domains.'), \"code-expired\" /* AuthErrorCode.CODE_EXPIRED */, 'The SMS code has expired. Please re-send the verification code to try ' + 'again.'), \"cordova-not-ready\" /* AuthErrorCode.CORDOVA_NOT_READY */, 'Cordova framework is not ready.'), \"cors-unsupported\" /* AuthErrorCode.CORS_UNSUPPORTED */, 'This browser is not supported.'), \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, 'This credential is already associated with a different user account.'), \"custom-token-mismatch\" /* AuthErrorCode.CREDENTIAL_MISMATCH */, 'The custom token corresponds to a different audience.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"requires-recent-login\" /* AuthErrorCode.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */, 'This operation is sensitive and requires recent authentication. Log in ' + 'again before retrying this request.'), \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */, 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.'), \"dynamic-link-not-activated\" /* AuthErrorCode.DYNAMIC_LINK_NOT_ACTIVATED */, 'Please activate Dynamic Links in the Firebase Console and agree to the terms and ' + 'conditions.'), \"email-change-needs-verification\" /* AuthErrorCode.EMAIL_CHANGE_NEEDS_VERIFICATION */, 'Multi-factor users must always have a verified email.'), \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, 'The email address is already in use by another account.'), \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */, 'Auth instance has already been used to make a network call. Auth can ' + 'no longer be configured to use the emulator. Try calling ' + '\"connectAuthEmulator()\" sooner.'), \"expired-action-code\" /* AuthErrorCode.EXPIRED_OOB_CODE */, 'The action code has expired.'), \"cancelled-popup-request\" /* AuthErrorCode.EXPIRED_POPUP_REQUEST */, 'This operation has been cancelled due to another conflicting popup being opened.'), \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, 'An internal AuthError has occurred.'), \"invalid-app-credential\" /* AuthErrorCode.INVALID_APP_CREDENTIAL */, 'The phone verification request contains an invalid application verifier.' + ' The reCAPTCHA token response is either invalid or expired.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"invalid-app-id\" /* AuthErrorCode.INVALID_APP_ID */, 'The mobile app identifier is not registered for the current project.'), \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */, \"This user's credential isn't valid for this project. This can happen \" + \"if the user's token has been tampered with, or if the user isn't for \" + 'the project associated with this API key.'), \"invalid-auth-event\" /* AuthErrorCode.INVALID_AUTH_EVENT */, 'An internal AuthError has occurred.'), \"invalid-verification-code\" /* AuthErrorCode.INVALID_CODE */, 'The SMS verification code used to create the phone auth credential is ' + 'invalid. Please resend the verification code sms and be sure to use the ' + 'verification code provided by the user.'), \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */, 'The continue URL provided in the request is invalid.'), \"invalid-cordova-configuration\" /* AuthErrorCode.INVALID_CORDOVA_CONFIGURATION */, 'The following Cordova plugins must be installed to enable OAuth sign-in: ' + 'cordova-plugin-buildinfo, cordova-universal-links-plugin, ' + 'cordova-plugin-browsertab, cordova-plugin-inappbrowser and ' + 'cordova-plugin-customurlscheme.'), \"invalid-custom-token\" /* AuthErrorCode.INVALID_CUSTOM_TOKEN */, 'The custom token format is incorrect. Please check the documentation.'), \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */, 'The provided dynamic link domain is not configured or authorized for the current project.'), \"invalid-email\" /* AuthErrorCode.INVALID_EMAIL */, 'The email address is badly formatted.'), \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */, 'Emulator URL must start with a valid scheme (http:// or https://).'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, 'Your API key is invalid, please check you have copied it correctly.'), \"invalid-cert-hash\" /* AuthErrorCode.INVALID_CERT_HASH */, 'The SHA-1 certificate hash provided is invalid.'), \"invalid-credential\" /* AuthErrorCode.INVALID_CREDENTIAL */, 'The supplied auth credential is incorrect, malformed or has expired.'), \"invalid-message-payload\" /* AuthErrorCode.INVALID_MESSAGE_PAYLOAD */, 'The email template corresponding to this action contains invalid characters in its message. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.'), \"invalid-multi-factor-session\" /* AuthErrorCode.INVALID_MFA_SESSION */, 'The request does not contain a valid proof of first factor successful sign-in.'), \"invalid-oauth-provider\" /* AuthErrorCode.INVALID_OAUTH_PROVIDER */, 'EmailAuthProvider is not supported for this operation. This operation ' + 'only supports OAuth providers.'), \"invalid-oauth-client-id\" /* AuthErrorCode.INVALID_OAUTH_CLIENT_ID */, 'The OAuth client ID provided is either invalid or does not match the ' + 'specified API key.'), \"unauthorized-domain\" /* AuthErrorCode.INVALID_ORIGIN */, 'This domain is not authorized for OAuth operations for your Firebase ' + 'project. Edit the list of authorized domains from the Firebase console.'), \"invalid-action-code\" /* AuthErrorCode.INVALID_OOB_CODE */, 'The action code is invalid. This can happen if the code is malformed, ' + 'expired, or has already been used.'), \"wrong-password\" /* AuthErrorCode.INVALID_PASSWORD */, 'The password is invalid or the user does not have a password.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"invalid-persistence-type\" /* AuthErrorCode.INVALID_PERSISTENCE */, 'The specified persistence type is invalid. It can only be local, session or none.'), \"invalid-phone-number\" /* AuthErrorCode.INVALID_PHONE_NUMBER */, 'The format of the phone number provided is incorrect. Please enter the ' + 'phone number in a format that can be parsed into E.164 format. E.164 ' + 'phone numbers are written in the format [+][country code][subscriber ' + 'number including area code].'), \"invalid-provider-id\" /* AuthErrorCode.INVALID_PROVIDER_ID */, 'The specified provider ID is invalid.'), \"invalid-recipient-email\" /* AuthErrorCode.INVALID_RECIPIENT_EMAIL */, 'The email corresponding to this action failed to send as the provided ' + 'recipient email address is invalid.'), \"invalid-sender\" /* AuthErrorCode.INVALID_SENDER */, 'The email template corresponding to this action contains an invalid sender email or name. ' + 'Please fix by going to the Auth email templates section in the Firebase Console.'), \"invalid-verification-id\" /* AuthErrorCode.INVALID_SESSION_INFO */, 'The verification ID used to create the phone auth credential is invalid.'), \"invalid-tenant-id\" /* AuthErrorCode.INVALID_TENANT_ID */, \"The Auth instance's tenant ID is invalid.\"), \"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, 'Login blocked by user-provided method: {$originalMessage}'), \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */, 'An Android Package Name must be provided if the Android App is required to be installed.'), \"auth-domain-config-required\" /* AuthErrorCode.MISSING_AUTH_DOMAIN */, 'Be sure to include authDomain when calling firebase.initializeApp(), ' + 'by following the instructions in the Firebase console.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"missing-app-credential\" /* AuthErrorCode.MISSING_APP_CREDENTIAL */, 'The phone verification request is missing an application verifier ' + 'assertion. A reCAPTCHA response token needs to be provided.'), \"missing-verification-code\" /* AuthErrorCode.MISSING_CODE */, 'The phone auth credential was created with an empty SMS verification code.'), \"missing-continue-uri\" /* AuthErrorCode.MISSING_CONTINUE_URI */, 'A continue URL must be provided in the request.'), \"missing-iframe-start\" /* AuthErrorCode.MISSING_IFRAME_START */, 'An internal AuthError has occurred.'), \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */, 'An iOS Bundle ID must be provided if an App Store ID is provided.'), \"missing-or-invalid-nonce\" /* AuthErrorCode.MISSING_OR_INVALID_NONCE */, 'The request does not contain a valid nonce. This can occur if the ' + 'SHA-256 hash of the provided raw nonce does not match the hashed nonce ' + 'in the ID token payload.'), \"missing-password\" /* AuthErrorCode.MISSING_PASSWORD */, 'A non-empty password must be provided'), \"missing-multi-factor-info\" /* AuthErrorCode.MISSING_MFA_INFO */, 'No second factor identifier is provided.'), \"missing-multi-factor-session\" /* AuthErrorCode.MISSING_MFA_SESSION */, 'The request is missing proof of first factor successful sign-in.'), \"missing-phone-number\" /* AuthErrorCode.MISSING_PHONE_NUMBER */, 'To send verification codes, provide a phone number for the recipient.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"missing-verification-id\" /* AuthErrorCode.MISSING_SESSION_INFO */, 'The phone auth credential was created with an empty verification ID.'), \"app-deleted\" /* AuthErrorCode.MODULE_DESTROYED */, 'This instance of FirebaseApp has been deleted.'), \"multi-factor-info-not-found\" /* AuthErrorCode.MFA_INFO_NOT_FOUND */, 'The user does not have a second factor matching the identifier provided.'), \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, 'Proof of ownership of a second factor is required to complete sign-in.'), \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, 'An account already exists with the same email address but different ' + 'sign-in credentials. Sign in using a provider associated with this ' + 'email address.'), \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, 'A network AuthError (such as timeout, interrupted connection or unreachable host) has occurred.'), \"no-auth-event\" /* AuthErrorCode.NO_AUTH_EVENT */, 'An internal AuthError has occurred.'), \"no-such-provider\" /* AuthErrorCode.NO_SUCH_PROVIDER */, 'User was not linked to an account with the given provider.'), \"null-user\" /* AuthErrorCode.NULL_USER */, 'A null user object was provided as the argument for an operation which ' + 'requires a non-null user object.'), \"operation-not-allowed\" /* AuthErrorCode.OPERATION_NOT_ALLOWED */, 'The given sign-in provider is disabled for this Firebase project. ' + 'Enable it in the Firebase console, under the sign-in method tab of the ' + 'Auth section.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'This operation is not supported in the environment this application is ' + 'running on. \"location.protocol\" must be http, https or chrome-extension' + ' and web storage must be enabled.'), \"popup-blocked\" /* AuthErrorCode.POPUP_BLOCKED */, 'Unable to establish a connection with the popup. It may have been blocked by the browser.'), \"popup-closed-by-user\" /* AuthErrorCode.POPUP_CLOSED_BY_USER */, 'The popup has been closed by the user before finalizing the operation.'), \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */, 'User can only be linked to one identity for the given provider.'), \"quota-exceeded\" /* AuthErrorCode.QUOTA_EXCEEDED */, \"The project's quota for this operation has been exceeded.\"), \"redirect-cancelled-by-user\" /* AuthErrorCode.REDIRECT_CANCELLED_BY_USER */, 'The redirect operation has been cancelled by the user before finalizing.'), \"redirect-operation-pending\" /* AuthErrorCode.REDIRECT_OPERATION_PENDING */, 'A redirect sign-in operation is already pending.'), \"rejected-credential\" /* AuthErrorCode.REJECTED_CREDENTIAL */, 'The request contains malformed or mismatching credentials.'), \"second-factor-already-in-use\" /* AuthErrorCode.SECOND_FACTOR_ALREADY_ENROLLED */, 'The second factor is already enrolled on this account.'), \"maximum-second-factor-count-exceeded\" /* AuthErrorCode.SECOND_FACTOR_LIMIT_EXCEEDED */, 'The maximum allowed number of second factors on a user has been exceeded.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */, \"The provided tenant ID does not match the Auth instance's tenant ID\"), \"timeout\" /* AuthErrorCode.TIMEOUT */, 'The operation has timed out.'), \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */, \"The user's credential is no longer valid. The user must sign in again.\"), \"too-many-requests\" /* AuthErrorCode.TOO_MANY_ATTEMPTS_TRY_LATER */, 'We have blocked all requests from this device due to unusual activity. ' + 'Try again later.'), \"unauthorized-continue-uri\" /* AuthErrorCode.UNAUTHORIZED_DOMAIN */, 'The domain of the continue URL is not whitelisted.  Please whitelist ' + 'the domain in the Firebase console.'), \"unsupported-first-factor\" /* AuthErrorCode.UNSUPPORTED_FIRST_FACTOR */, 'Enrolling a second factor or signing in with a multi-factor account requires sign-in with a supported first factor.'), \"unsupported-persistence-type\" /* AuthErrorCode.UNSUPPORTED_PERSISTENCE */, 'The current environment does not support the specified persistence type.'), \"unsupported-tenant-operation\" /* AuthErrorCode.UNSUPPORTED_TENANT_OPERATION */, 'This operation is not supported in a multi-tenant context.'), \"unverified-email\" /* AuthErrorCode.UNVERIFIED_EMAIL */, 'The operation requires a verified email.'), \"user-cancelled\" /* AuthErrorCode.USER_CANCELLED */, 'The user did not grant your application the permissions it requested.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"user-not-found\" /* AuthErrorCode.USER_DELETED */, 'There is no user record corresponding to this identifier. The user may ' + 'have been deleted.'), \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, 'The user account has been disabled by an administrator.'), \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */, 'The supplied credentials do not correspond to the previously signed in user.'), \"user-signed-out\" /* AuthErrorCode.USER_SIGNED_OUT */, ''), \"weak-password\" /* AuthErrorCode.WEAK_PASSWORD */, 'The password must be 6 characters long or more.'), \"web-storage-unsupported\" /* AuthErrorCode.WEB_STORAGE_UNSUPPORTED */, 'This browser is not supported or 3rd party cookies and data may be disabled.'), \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */, 'initializeAuth() has already been called with ' + 'different options. To avoid this error, call initializeAuth() with the ' + 'same options as when it was originally called, or call getAuth() to return the' + ' already initialized instance.'), \"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */, 'The reCAPTCHA token is missing when sending request to the backend.'), \"invalid-recaptcha-token\" /* AuthErrorCode.INVALID_RECAPTCHA_TOKEN */, 'The reCAPTCHA token is invalid when sending request to the backend.'), \"invalid-recaptcha-action\" /* AuthErrorCode.INVALID_RECAPTCHA_ACTION */, 'The reCAPTCHA action is invalid when sending request to the backend.'), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_ref, \"recaptcha-not-enabled\" /* AuthErrorCode.RECAPTCHA_NOT_ENABLED */, 'reCAPTCHA Enterprise integration is not enabled for this project.'), \"missing-client-type\" /* AuthErrorCode.MISSING_CLIENT_TYPE */, 'The reCAPTCHA client type is missing when sending request to the backend.'), \"missing-recaptcha-version\" /* AuthErrorCode.MISSING_RECAPTCHA_VERSION */, 'The reCAPTCHA version is missing when sending request to the backend.'), \"invalid-req-type\" /* AuthErrorCode.INVALID_REQ_TYPE */, 'Invalid request parameters.'), \"invalid-recaptcha-version\" /* AuthErrorCode.INVALID_RECAPTCHA_VERSION */, 'The reCAPTCHA version is invalid when sending request to the backend.'), \"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, 'The password policy received from the backend uses a schema version that is not supported by this version of the Firebase SDK.'), \"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */, 'The password does not meet the requirements.');\n}\nfunction _prodErrorMap() {\n  // We will include this one message in the prod error map since by the very\n  // nature of this error, developers will never be able to see the message\n  // using the debugErrorMap (which is installed during auth initialization).\n  return _defineProperty({}, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */, 'Another Firebase SDK was initialized and is trying to use Auth before Auth is ' + 'initialized. Please be sure to call `initializeAuth` or `getAuth` before ' + 'starting any other Firebase SDK.');\n}\n/**\r\n * A verbose error map with detailed descriptions for most error codes.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\nvar debugErrorMap = _debugErrorMap;\n/**\r\n * A minimal error map with all verbose error messages stripped.\r\n *\r\n * See discussion at {@link AuthErrorMap}\r\n *\r\n * @public\r\n */\nvar prodErrorMap = _prodErrorMap;\nvar _DEFAULT_AUTH_ERROR_FACTORY = new _firebase_util__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory('auth', 'Firebase', _prodErrorMap());\n/**\r\n * A map of potential `Auth` error codes, for easier comparison with errors\r\n * thrown by the SDK.\r\n *\r\n * @remarks\r\n * Note that you can't tree-shake individual keys\r\n * in the map, so by using the map you might substantially increase your\r\n * bundle size.\r\n *\r\n * @public\r\n */\nvar AUTH_ERROR_CODES_MAP_DO_NOT_USE_INTERNALLY = {\n  ADMIN_ONLY_OPERATION: 'auth/admin-restricted-operation',\n  ARGUMENT_ERROR: 'auth/argument-error',\n  APP_NOT_AUTHORIZED: 'auth/app-not-authorized',\n  APP_NOT_INSTALLED: 'auth/app-not-installed',\n  CAPTCHA_CHECK_FAILED: 'auth/captcha-check-failed',\n  CODE_EXPIRED: 'auth/code-expired',\n  CORDOVA_NOT_READY: 'auth/cordova-not-ready',\n  CORS_UNSUPPORTED: 'auth/cors-unsupported',\n  CREDENTIAL_ALREADY_IN_USE: 'auth/credential-already-in-use',\n  CREDENTIAL_MISMATCH: 'auth/custom-token-mismatch',\n  CREDENTIAL_TOO_OLD_LOGIN_AGAIN: 'auth/requires-recent-login',\n  DEPENDENT_SDK_INIT_BEFORE_AUTH: 'auth/dependent-sdk-initialized-before-auth',\n  DYNAMIC_LINK_NOT_ACTIVATED: 'auth/dynamic-link-not-activated',\n  EMAIL_CHANGE_NEEDS_VERIFICATION: 'auth/email-change-needs-verification',\n  EMAIL_EXISTS: 'auth/email-already-in-use',\n  EMULATOR_CONFIG_FAILED: 'auth/emulator-config-failed',\n  EXPIRED_OOB_CODE: 'auth/expired-action-code',\n  EXPIRED_POPUP_REQUEST: 'auth/cancelled-popup-request',\n  INTERNAL_ERROR: 'auth/internal-error',\n  INVALID_API_KEY: 'auth/invalid-api-key',\n  INVALID_APP_CREDENTIAL: 'auth/invalid-app-credential',\n  INVALID_APP_ID: 'auth/invalid-app-id',\n  INVALID_AUTH: 'auth/invalid-user-token',\n  INVALID_AUTH_EVENT: 'auth/invalid-auth-event',\n  INVALID_CERT_HASH: 'auth/invalid-cert-hash',\n  INVALID_CODE: 'auth/invalid-verification-code',\n  INVALID_CONTINUE_URI: 'auth/invalid-continue-uri',\n  INVALID_CORDOVA_CONFIGURATION: 'auth/invalid-cordova-configuration',\n  INVALID_CUSTOM_TOKEN: 'auth/invalid-custom-token',\n  INVALID_DYNAMIC_LINK_DOMAIN: 'auth/invalid-dynamic-link-domain',\n  INVALID_EMAIL: 'auth/invalid-email',\n  INVALID_EMULATOR_SCHEME: 'auth/invalid-emulator-scheme',\n  INVALID_IDP_RESPONSE: 'auth/invalid-credential',\n  INVALID_LOGIN_CREDENTIALS: 'auth/invalid-credential',\n  INVALID_MESSAGE_PAYLOAD: 'auth/invalid-message-payload',\n  INVALID_MFA_SESSION: 'auth/invalid-multi-factor-session',\n  INVALID_OAUTH_CLIENT_ID: 'auth/invalid-oauth-client-id',\n  INVALID_OAUTH_PROVIDER: 'auth/invalid-oauth-provider',\n  INVALID_OOB_CODE: 'auth/invalid-action-code',\n  INVALID_ORIGIN: 'auth/unauthorized-domain',\n  INVALID_PASSWORD: 'auth/wrong-password',\n  INVALID_PERSISTENCE: 'auth/invalid-persistence-type',\n  INVALID_PHONE_NUMBER: 'auth/invalid-phone-number',\n  INVALID_PROVIDER_ID: 'auth/invalid-provider-id',\n  INVALID_RECIPIENT_EMAIL: 'auth/invalid-recipient-email',\n  INVALID_SENDER: 'auth/invalid-sender',\n  INVALID_SESSION_INFO: 'auth/invalid-verification-id',\n  INVALID_TENANT_ID: 'auth/invalid-tenant-id',\n  MFA_INFO_NOT_FOUND: 'auth/multi-factor-info-not-found',\n  MFA_REQUIRED: 'auth/multi-factor-auth-required',\n  MISSING_ANDROID_PACKAGE_NAME: 'auth/missing-android-pkg-name',\n  MISSING_APP_CREDENTIAL: 'auth/missing-app-credential',\n  MISSING_AUTH_DOMAIN: 'auth/auth-domain-config-required',\n  MISSING_CODE: 'auth/missing-verification-code',\n  MISSING_CONTINUE_URI: 'auth/missing-continue-uri',\n  MISSING_IFRAME_START: 'auth/missing-iframe-start',\n  MISSING_IOS_BUNDLE_ID: 'auth/missing-ios-bundle-id',\n  MISSING_OR_INVALID_NONCE: 'auth/missing-or-invalid-nonce',\n  MISSING_MFA_INFO: 'auth/missing-multi-factor-info',\n  MISSING_MFA_SESSION: 'auth/missing-multi-factor-session',\n  MISSING_PHONE_NUMBER: 'auth/missing-phone-number',\n  MISSING_SESSION_INFO: 'auth/missing-verification-id',\n  MODULE_DESTROYED: 'auth/app-deleted',\n  NEED_CONFIRMATION: 'auth/account-exists-with-different-credential',\n  NETWORK_REQUEST_FAILED: 'auth/network-request-failed',\n  NULL_USER: 'auth/null-user',\n  NO_AUTH_EVENT: 'auth/no-auth-event',\n  NO_SUCH_PROVIDER: 'auth/no-such-provider',\n  OPERATION_NOT_ALLOWED: 'auth/operation-not-allowed',\n  OPERATION_NOT_SUPPORTED: 'auth/operation-not-supported-in-this-environment',\n  POPUP_BLOCKED: 'auth/popup-blocked',\n  POPUP_CLOSED_BY_USER: 'auth/popup-closed-by-user',\n  PROVIDER_ALREADY_LINKED: 'auth/provider-already-linked',\n  QUOTA_EXCEEDED: 'auth/quota-exceeded',\n  REDIRECT_CANCELLED_BY_USER: 'auth/redirect-cancelled-by-user',\n  REDIRECT_OPERATION_PENDING: 'auth/redirect-operation-pending',\n  REJECTED_CREDENTIAL: 'auth/rejected-credential',\n  SECOND_FACTOR_ALREADY_ENROLLED: 'auth/second-factor-already-in-use',\n  SECOND_FACTOR_LIMIT_EXCEEDED: 'auth/maximum-second-factor-count-exceeded',\n  TENANT_ID_MISMATCH: 'auth/tenant-id-mismatch',\n  TIMEOUT: 'auth/timeout',\n  TOKEN_EXPIRED: 'auth/user-token-expired',\n  TOO_MANY_ATTEMPTS_TRY_LATER: 'auth/too-many-requests',\n  UNAUTHORIZED_DOMAIN: 'auth/unauthorized-continue-uri',\n  UNSUPPORTED_FIRST_FACTOR: 'auth/unsupported-first-factor',\n  UNSUPPORTED_PERSISTENCE: 'auth/unsupported-persistence-type',\n  UNSUPPORTED_TENANT_OPERATION: 'auth/unsupported-tenant-operation',\n  UNVERIFIED_EMAIL: 'auth/unverified-email',\n  USER_CANCELLED: 'auth/user-cancelled',\n  USER_DELETED: 'auth/user-not-found',\n  USER_DISABLED: 'auth/user-disabled',\n  USER_MISMATCH: 'auth/user-mismatch',\n  USER_SIGNED_OUT: 'auth/user-signed-out',\n  WEAK_PASSWORD: 'auth/weak-password',\n  WEB_STORAGE_UNSUPPORTED: 'auth/web-storage-unsupported',\n  ALREADY_INITIALIZED: 'auth/already-initialized',\n  RECAPTCHA_NOT_ENABLED: 'auth/recaptcha-not-enabled',\n  MISSING_RECAPTCHA_TOKEN: 'auth/missing-recaptcha-token',\n  INVALID_RECAPTCHA_TOKEN: 'auth/invalid-recaptcha-token',\n  INVALID_RECAPTCHA_ACTION: 'auth/invalid-recaptcha-action',\n  MISSING_CLIENT_TYPE: 'auth/missing-client-type',\n  MISSING_RECAPTCHA_VERSION: 'auth/missing-recaptcha-version',\n  INVALID_RECAPTCHA_VERSION: 'auth/invalid-recaptcha-version',\n  INVALID_REQ_TYPE: 'auth/invalid-req-type'\n};\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar logClient = new _firebase_logger__WEBPACK_IMPORTED_MODULE_4__.Logger('@firebase/auth');\nfunction _logWarn(msg) {\n  if (logClient.logLevel <= _firebase_logger__WEBPACK_IMPORTED_MODULE_4__.LogLevel.WARN) {\n    for (var _len = arguments.length, args = new Array(_len > 1 ? _len - 1 : 0), _key2 = 1; _key2 < _len; _key2++) {\n      args[_key2 - 1] = arguments[_key2];\n    }\n    logClient.warn.apply(logClient, [\"Auth (\".concat(_firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION, \"): \").concat(msg)].concat(args));\n  }\n}\nfunction _logError(msg) {\n  if (logClient.logLevel <= _firebase_logger__WEBPACK_IMPORTED_MODULE_4__.LogLevel.ERROR) {\n    for (var _len2 = arguments.length, args = new Array(_len2 > 1 ? _len2 - 1 : 0), _key3 = 1; _key3 < _len2; _key3++) {\n      args[_key3 - 1] = arguments[_key3];\n    }\n    logClient.error.apply(logClient, [\"Auth (\".concat(_firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION, \"): \").concat(msg)].concat(args));\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _fail(authOrCode) {\n  for (var _len3 = arguments.length, rest = new Array(_len3 > 1 ? _len3 - 1 : 0), _key4 = 1; _key4 < _len3; _key4++) {\n    rest[_key4 - 1] = arguments[_key4];\n  }\n  throw createErrorInternal.apply(void 0, [authOrCode].concat(rest));\n}\nfunction _createError(authOrCode) {\n  for (var _len4 = arguments.length, rest = new Array(_len4 > 1 ? _len4 - 1 : 0), _key5 = 1; _key5 < _len4; _key5++) {\n    rest[_key5 - 1] = arguments[_key5];\n  }\n  return createErrorInternal.apply(void 0, [authOrCode].concat(rest));\n}\nfunction _errorWithCustomMessage(auth, code, message) {\n  var errorMap = Object.assign(Object.assign({}, prodErrorMap()), _defineProperty({}, code, message));\n  var factory = new _firebase_util__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory('auth', 'Firebase', errorMap);\n  return factory.create(code, {\n    appName: auth.name\n  });\n}\nfunction _serverAppCurrentUserOperationNotSupportedError(auth) {\n  return _errorWithCustomMessage(auth, \"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */, 'Operations that alter the current user are not supported in conjunction with FirebaseServerApp');\n}\nfunction createErrorInternal(authOrCode) {\n  for (var _len5 = arguments.length, rest = new Array(_len5 > 1 ? _len5 - 1 : 0), _key6 = 1; _key6 < _len5; _key6++) {\n    rest[_key6 - 1] = arguments[_key6];\n  }\n  if (typeof authOrCode !== 'string') {\n    var _authOrCode$_errorFac;\n    var code = rest[0];\n    var fullParams = _toConsumableArray(rest.slice(1));\n    if (fullParams[0]) {\n      fullParams[0].appName = authOrCode.name;\n    }\n    return (_authOrCode$_errorFac = authOrCode._errorFactory).create.apply(_authOrCode$_errorFac, [code].concat(_toConsumableArray(fullParams)));\n  }\n  return _DEFAULT_AUTH_ERROR_FACTORY.create.apply(_DEFAULT_AUTH_ERROR_FACTORY, [authOrCode].concat(rest));\n}\nfunction _assert(assertion, authOrCode) {\n  if (!assertion) {\n    for (var _len6 = arguments.length, rest = new Array(_len6 > 2 ? _len6 - 2 : 0), _key7 = 2; _key7 < _len6; _key7++) {\n      rest[_key7 - 2] = arguments[_key7];\n    }\n    throw createErrorInternal.apply(void 0, [authOrCode].concat(rest));\n  }\n}\n/**\r\n * Unconditionally fails, throwing an internal error with the given message.\r\n *\r\n * @param failure type of failure encountered\r\n * @throws Error\r\n */\nfunction debugFail(failure) {\n  // Log the failure in addition to throw an exception, just in case the\n  // exception is swallowed.\n  var message = \"INTERNAL ASSERTION FAILED: \" + failure;\n  _logError(message);\n  // NOTE: We don't use FirebaseError here because these are internal failures\n  // that cannot be handled by the user. (Also it would create a circular\n  // dependency between the error and assert modules which doesn't work.)\n  throw new Error(message);\n}\n/**\r\n * Fails if the given assertion condition is false, throwing an Error with the\r\n * given message if it did.\r\n *\r\n * @param assertion\r\n * @param message\r\n */\nfunction debugAssert(assertion, message) {\n  if (!assertion) {\n    debugFail(message);\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _getCurrentUrl() {\n  var _a;\n  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.href) || '';\n}\nfunction _isHttpOrHttps() {\n  return _getCurrentScheme() === 'http:' || _getCurrentScheme() === 'https:';\n}\nfunction _getCurrentScheme() {\n  var _a;\n  return typeof self !== 'undefined' && ((_a = self.location) === null || _a === void 0 ? void 0 : _a.protocol) || null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Determine whether the browser is working online\r\n */\nfunction _isOnline() {\n  if (typeof navigator !== 'undefined' && navigator && 'onLine' in navigator && typeof navigator.onLine === 'boolean' && (\n  // Apply only for traditional web apps and Chrome extensions.\n  // This is especially true for Cordova apps which have unreliable\n  // navigator.onLine behavior unless cordova-plugin-network-information is\n  // installed which overwrites the native navigator.onLine value and\n  // defines navigator.connection.\n  _isHttpOrHttps() || (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.isBrowserExtension)() || 'connection' in navigator)) {\n    return navigator.onLine;\n  }\n  // If we can't determine the state, assume it is online.\n  return true;\n}\nfunction _getUserLanguage() {\n  if (typeof navigator === 'undefined') {\n    return null;\n  }\n  var navigatorLanguage = navigator;\n  return (\n    // Most reliable, but only supported in Chrome/Firefox.\n    navigatorLanguage.languages && navigatorLanguage.languages[0] ||\n    // Supported in most browsers, but returns the language of the browser\n    // UI, not the language set in browser settings.\n    navigatorLanguage.language ||\n    // Couldn't determine language.\n    null\n  );\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * A structure to help pick between a range of long and short delay durations\r\n * depending on the current environment. In general, the long delay is used for\r\n * mobile environments whereas short delays are used for desktop environments.\r\n */\nvar Delay = /*#__PURE__*/function () {\n  function Delay(shortDelay, longDelay) {\n    _classCallCheck(this, Delay);\n    this.shortDelay = shortDelay;\n    this.longDelay = longDelay;\n    // Internal error when improperly initialized.\n    debugAssert(longDelay > shortDelay, 'Short delay should be less than long delay!');\n    this.isMobile = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.isMobileCordova)() || (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.isReactNative)();\n  }\n  return _createClass(Delay, [{\n    key: \"get\",\n    value: function get() {\n      if (!_isOnline()) {\n        // Pick the shorter timeout.\n        return Math.min(5000 /* DelayMin.OFFLINE */, this.shortDelay);\n      }\n      // If running in a mobile environment, return the long delay, otherwise\n      // return the short delay.\n      // This could be improved in the future to dynamically change based on other\n      // variables instead of just reading the current environment.\n      return this.isMobile ? this.longDelay : this.shortDelay;\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _emulatorUrl(config, path) {\n  debugAssert(config.emulator, 'Emulator should always be set here');\n  var url = config.emulator.url;\n  if (!path) {\n    return url;\n  }\n  return \"\".concat(url).concat(path.startsWith('/') ? path.slice(1) : path);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar FetchProvider = /*#__PURE__*/function () {\n  function FetchProvider() {\n    _classCallCheck(this, FetchProvider);\n  }\n  return _createClass(FetchProvider, null, [{\n    key: \"initialize\",\n    value: function initialize(fetchImpl, headersImpl, responseImpl) {\n      this.fetchImpl = fetchImpl;\n      if (headersImpl) {\n        this.headersImpl = headersImpl;\n      }\n      if (responseImpl) {\n        this.responseImpl = responseImpl;\n      }\n    }\n  }, {\n    key: \"fetch\",\n    value: function (_fetch) {\n      function fetch() {\n        return _fetch.apply(this, arguments);\n      }\n      fetch.toString = function () {\n        return _fetch.toString();\n      };\n      return fetch;\n    }(function () {\n      if (this.fetchImpl) {\n        return this.fetchImpl;\n      }\n      if (typeof self !== 'undefined' && 'fetch' in self) {\n        return self.fetch;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.fetch) {\n        return globalThis.fetch;\n      }\n      if (typeof fetch !== 'undefined') {\n        return fetch;\n      }\n      debugFail('Could not find fetch implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    })\n  }, {\n    key: \"headers\",\n    value: function headers() {\n      if (this.headersImpl) {\n        return this.headersImpl;\n      }\n      if (typeof self !== 'undefined' && 'Headers' in self) {\n        return self.Headers;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Headers) {\n        return globalThis.Headers;\n      }\n      if (typeof Headers !== 'undefined') {\n        return Headers;\n      }\n      debugFail('Could not find Headers implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n  }, {\n    key: \"response\",\n    value: function response() {\n      if (this.responseImpl) {\n        return this.responseImpl;\n      }\n      if (typeof self !== 'undefined' && 'Response' in self) {\n        return self.Response;\n      }\n      if (typeof globalThis !== 'undefined' && globalThis.Response) {\n        return globalThis.Response;\n      }\n      if (typeof Response !== 'undefined') {\n        return Response;\n      }\n      debugFail('Could not find Response implementation, make sure you call FetchProvider.initialize() with an appropriate polyfill');\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Map from errors returned by the server to errors to developer visible errors\r\n */\nvar SERVER_ERROR_MAP = (_SERVER_ERROR_MAP = {}, _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_SERVER_ERROR_MAP, \"CREDENTIAL_MISMATCH\" /* ServerError.CREDENTIAL_MISMATCH */, \"custom-token-mismatch\"), \"MISSING_CUSTOM_TOKEN\" /* ServerError.MISSING_CUSTOM_TOKEN */, \"internal-error\"), \"INVALID_IDENTIFIER\" /* ServerError.INVALID_IDENTIFIER */, \"invalid-email\"), \"MISSING_CONTINUE_URI\" /* ServerError.MISSING_CONTINUE_URI */, \"internal-error\"), \"INVALID_PASSWORD\" /* ServerError.INVALID_PASSWORD */, \"wrong-password\"), \"MISSING_PASSWORD\" /* ServerError.MISSING_PASSWORD */, \"missing-password\"), \"INVALID_LOGIN_CREDENTIALS\" /* ServerError.INVALID_LOGIN_CREDENTIALS */, \"invalid-credential\"), \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */, \"email-already-in-use\"), \"PASSWORD_LOGIN_DISABLED\" /* ServerError.PASSWORD_LOGIN_DISABLED */, \"operation-not-allowed\"), \"INVALID_IDP_RESPONSE\" /* ServerError.INVALID_IDP_RESPONSE */, \"invalid-credential\"), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_SERVER_ERROR_MAP, \"INVALID_PENDING_TOKEN\" /* ServerError.INVALID_PENDING_TOKEN */, \"invalid-credential\"), \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */, \"credential-already-in-use\"), \"MISSING_REQ_TYPE\" /* ServerError.MISSING_REQ_TYPE */, \"internal-error\"), \"EMAIL_NOT_FOUND\" /* ServerError.EMAIL_NOT_FOUND */, \"user-not-found\"), \"RESET_PASSWORD_EXCEED_LIMIT\" /* ServerError.RESET_PASSWORD_EXCEED_LIMIT */, \"too-many-requests\"), \"EXPIRED_OOB_CODE\" /* ServerError.EXPIRED_OOB_CODE */, \"expired-action-code\"), \"INVALID_OOB_CODE\" /* ServerError.INVALID_OOB_CODE */, \"invalid-action-code\"), \"MISSING_OOB_CODE\" /* ServerError.MISSING_OOB_CODE */, \"internal-error\"), \"CREDENTIAL_TOO_OLD_LOGIN_AGAIN\" /* ServerError.CREDENTIAL_TOO_OLD_LOGIN_AGAIN */, \"requires-recent-login\"), \"INVALID_ID_TOKEN\" /* ServerError.INVALID_ID_TOKEN */, \"invalid-user-token\"), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_SERVER_ERROR_MAP, \"TOKEN_EXPIRED\" /* ServerError.TOKEN_EXPIRED */, \"user-token-expired\"), \"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */, \"user-token-expired\"), \"TOO_MANY_ATTEMPTS_TRY_LATER\" /* ServerError.TOO_MANY_ATTEMPTS_TRY_LATER */, \"too-many-requests\"), \"PASSWORD_DOES_NOT_MEET_REQUIREMENTS\" /* ServerError.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */, \"password-does-not-meet-requirements\"), \"INVALID_CODE\" /* ServerError.INVALID_CODE */, \"invalid-verification-code\"), \"INVALID_SESSION_INFO\" /* ServerError.INVALID_SESSION_INFO */, \"invalid-verification-id\"), \"INVALID_TEMPORARY_PROOF\" /* ServerError.INVALID_TEMPORARY_PROOF */, \"invalid-credential\"), \"MISSING_SESSION_INFO\" /* ServerError.MISSING_SESSION_INFO */, \"missing-verification-id\"), \"SESSION_EXPIRED\" /* ServerError.SESSION_EXPIRED */, \"code-expired\"), \"MISSING_ANDROID_PACKAGE_NAME\" /* ServerError.MISSING_ANDROID_PACKAGE_NAME */, \"missing-android-pkg-name\"), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_SERVER_ERROR_MAP, \"UNAUTHORIZED_DOMAIN\" /* ServerError.UNAUTHORIZED_DOMAIN */, \"unauthorized-continue-uri\"), \"INVALID_OAUTH_CLIENT_ID\" /* ServerError.INVALID_OAUTH_CLIENT_ID */, \"invalid-oauth-client-id\"), \"ADMIN_ONLY_OPERATION\" /* ServerError.ADMIN_ONLY_OPERATION */, \"admin-restricted-operation\"), \"INVALID_MFA_PENDING_CREDENTIAL\" /* ServerError.INVALID_MFA_PENDING_CREDENTIAL */, \"invalid-multi-factor-session\"), \"MFA_ENROLLMENT_NOT_FOUND\" /* ServerError.MFA_ENROLLMENT_NOT_FOUND */, \"multi-factor-info-not-found\"), \"MISSING_MFA_ENROLLMENT_ID\" /* ServerError.MISSING_MFA_ENROLLMENT_ID */, \"missing-multi-factor-info\"), \"MISSING_MFA_PENDING_CREDENTIAL\" /* ServerError.MISSING_MFA_PENDING_CREDENTIAL */, \"missing-multi-factor-session\"), \"SECOND_FACTOR_EXISTS\" /* ServerError.SECOND_FACTOR_EXISTS */, \"second-factor-already-in-use\"), \"SECOND_FACTOR_LIMIT_EXCEEDED\" /* ServerError.SECOND_FACTOR_LIMIT_EXCEEDED */, \"maximum-second-factor-count-exceeded\"), \"BLOCKING_FUNCTION_ERROR_RESPONSE\" /* ServerError.BLOCKING_FUNCTION_ERROR_RESPONSE */, \"internal-error\"), _defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_defineProperty(_SERVER_ERROR_MAP, \"RECAPTCHA_NOT_ENABLED\" /* ServerError.RECAPTCHA_NOT_ENABLED */, \"recaptcha-not-enabled\"), \"MISSING_RECAPTCHA_TOKEN\" /* ServerError.MISSING_RECAPTCHA_TOKEN */, \"missing-recaptcha-token\"), \"INVALID_RECAPTCHA_TOKEN\" /* ServerError.INVALID_RECAPTCHA_TOKEN */, \"invalid-recaptcha-token\"), \"INVALID_RECAPTCHA_ACTION\" /* ServerError.INVALID_RECAPTCHA_ACTION */, \"invalid-recaptcha-action\"), \"MISSING_CLIENT_TYPE\" /* ServerError.MISSING_CLIENT_TYPE */, \"missing-client-type\"), \"MISSING_RECAPTCHA_VERSION\" /* ServerError.MISSING_RECAPTCHA_VERSION */, \"missing-recaptcha-version\"), \"INVALID_RECAPTCHA_VERSION\" /* ServerError.INVALID_RECAPTCHA_VERSION */, \"invalid-recaptcha-version\"), \"INVALID_REQ_TYPE\" /* ServerError.INVALID_REQ_TYPE */, \"invalid-req-type\"));\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar DEFAULT_API_TIMEOUT_MS = new Delay(30000, 60000);\nfunction _addTidIfNecessary(auth, request) {\n  if (auth.tenantId && !request.tenantId) {\n    return Object.assign(Object.assign({}, request), {\n      tenantId: auth.tenantId\n    });\n  }\n  return request;\n}\nfunction _performApiRequest(_x, _x2, _x3, _x4) {\n  return _performApiRequest2.apply(this, arguments);\n}\nfunction _performApiRequest2() {\n  _performApiRequest2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee64(auth, method, path, request) {\n    var customErrorMap,\n      _args64 = arguments;\n    return _regeneratorRuntime().wrap(function _callee64$(_context64) {\n      while (1) switch (_context64.prev = _context64.next) {\n        case 0:\n          customErrorMap = _args64.length > 4 && _args64[4] !== undefined ? _args64[4] : {};\n          return _context64.abrupt(\"return\", _performFetchWithErrorHandling(auth, customErrorMap, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee63() {\n            var body, params, query, headers, fetchArgs;\n            return _regeneratorRuntime().wrap(function _callee63$(_context63) {\n              while (1) switch (_context63.prev = _context63.next) {\n                case 0:\n                  body = {};\n                  params = {};\n                  if (request) {\n                    if (method === \"GET\" /* HttpMethod.GET */) {\n                      params = request;\n                    } else {\n                      body = {\n                        body: JSON.stringify(request)\n                      };\n                    }\n                  }\n                  query = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystring)(Object.assign({\n                    key: auth.config.apiKey\n                  }, params)).slice(1);\n                  _context63.next = 6;\n                  return auth._getAdditionalHeaders();\n                case 6:\n                  headers = _context63.sent;\n                  headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/json';\n                  if (auth.languageCode) {\n                    headers[\"X-Firebase-Locale\" /* HttpHeader.X_FIREBASE_LOCALE */] = auth.languageCode;\n                  }\n                  fetchArgs = Object.assign({\n                    method: method,\n                    headers: headers\n                  }, body);\n                  /* Security-conscious server-side frameworks tend to have built in mitigations for referrer\r\n                     problems\". See the Cloudflare GitHub issue #487: Error: The 'referrerPolicy' field on\r\n                     'RequestInitializerDict' is not implemented.\"\r\n                     https://github.com/cloudflare/next-on-pages/issues/487 */\n                  if (!(0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.isCloudflareWorker)()) {\n                    fetchArgs.referrerPolicy = 'no-referrer';\n                  }\n                  return _context63.abrupt(\"return\", FetchProvider.fetch()(_getFinalTarget(auth, auth.config.apiHost, path, query), fetchArgs));\n                case 12:\n                case \"end\":\n                  return _context63.stop();\n              }\n            }, _callee63);\n          }))));\n        case 2:\n        case \"end\":\n          return _context64.stop();\n      }\n    }, _callee64);\n  }));\n  return _performApiRequest2.apply(this, arguments);\n}\nfunction _performFetchWithErrorHandling(_x5, _x6, _x7) {\n  return _performFetchWithErrorHandling2.apply(this, arguments);\n}\nfunction _performFetchWithErrorHandling2() {\n  _performFetchWithErrorHandling2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee65(auth, customErrorMap, fetchFn) {\n    var errorMap, networkTimeout, response, json, errorMessage, _errorMessage$split, _errorMessage$split2, serverErrorCode, serverErrorMessage, authError;\n    return _regeneratorRuntime().wrap(function _callee65$(_context65) {\n      while (1) switch (_context65.prev = _context65.next) {\n        case 0:\n          auth._canInitEmulator = false;\n          errorMap = Object.assign(Object.assign({}, SERVER_ERROR_MAP), customErrorMap);\n          _context65.prev = 2;\n          networkTimeout = new NetworkTimeout(auth);\n          _context65.next = 6;\n          return Promise.race([fetchFn(), networkTimeout.promise]);\n        case 6:\n          response = _context65.sent;\n          // If we've reached this point, the fetch succeeded and the networkTimeout\n          // didn't throw; clear the network timeout delay so that Node won't hang\n          networkTimeout.clearNetworkTimeout();\n          _context65.next = 10;\n          return response.json();\n        case 10:\n          json = _context65.sent;\n          if (!('needConfirmation' in json)) {\n            _context65.next = 13;\n            break;\n          }\n          throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, json);\n        case 13:\n          if (!(response.ok && !('errorMessage' in json))) {\n            _context65.next = 17;\n            break;\n          }\n          return _context65.abrupt(\"return\", json);\n        case 17:\n          errorMessage = response.ok ? json.errorMessage : json.error.message;\n          _errorMessage$split = errorMessage.split(' : '), _errorMessage$split2 = _slicedToArray(_errorMessage$split, 2), serverErrorCode = _errorMessage$split2[0], serverErrorMessage = _errorMessage$split2[1];\n          if (!(serverErrorCode === \"FEDERATED_USER_ID_ALREADY_LINKED\" /* ServerError.FEDERATED_USER_ID_ALREADY_LINKED */)) {\n            _context65.next = 23;\n            break;\n          }\n          throw _makeTaggedError(auth, \"credential-already-in-use\" /* AuthErrorCode.CREDENTIAL_ALREADY_IN_USE */, json);\n        case 23:\n          if (!(serverErrorCode === \"EMAIL_EXISTS\" /* ServerError.EMAIL_EXISTS */)) {\n            _context65.next = 27;\n            break;\n          }\n          throw _makeTaggedError(auth, \"email-already-in-use\" /* AuthErrorCode.EMAIL_EXISTS */, json);\n        case 27:\n          if (!(serverErrorCode === \"USER_DISABLED\" /* ServerError.USER_DISABLED */)) {\n            _context65.next = 29;\n            break;\n          }\n          throw _makeTaggedError(auth, \"user-disabled\" /* AuthErrorCode.USER_DISABLED */, json);\n        case 29:\n          authError = errorMap[serverErrorCode] || serverErrorCode.toLowerCase().replace(/[_\\s]+/g, '-');\n          if (!serverErrorMessage) {\n            _context65.next = 34;\n            break;\n          }\n          throw _errorWithCustomMessage(auth, authError, serverErrorMessage);\n        case 34:\n          _fail(auth, authError);\n        case 35:\n          _context65.next = 42;\n          break;\n        case 37:\n          _context65.prev = 37;\n          _context65.t0 = _context65[\"catch\"](2);\n          if (!(_context65.t0 instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_1__.FirebaseError)) {\n            _context65.next = 41;\n            break;\n          }\n          throw _context65.t0;\n        case 41:\n          // Changing this to a different error code will log user out when there is a network error\n          // because we treat any error other than NETWORK_REQUEST_FAILED as token is invalid.\n          // https://github.com/firebase/firebase-js-sdk/blob/4fbc73610d70be4e0852e7de63a39cb7897e8546/packages/auth/src/core/auth/auth_impl.ts#L309-L316\n          _fail(auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */, {\n            'message': String(_context65.t0)\n          });\n        case 42:\n        case \"end\":\n          return _context65.stop();\n      }\n    }, _callee65, null, [[2, 37]]);\n  }));\n  return _performFetchWithErrorHandling2.apply(this, arguments);\n}\nfunction _performSignInRequest(_x8, _x9, _x10, _x11) {\n  return _performSignInRequest2.apply(this, arguments);\n}\nfunction _performSignInRequest2() {\n  _performSignInRequest2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee66(auth, method, path, request) {\n    var customErrorMap,\n      serverResponse,\n      _args66 = arguments;\n    return _regeneratorRuntime().wrap(function _callee66$(_context66) {\n      while (1) switch (_context66.prev = _context66.next) {\n        case 0:\n          customErrorMap = _args66.length > 4 && _args66[4] !== undefined ? _args66[4] : {};\n          _context66.next = 3;\n          return _performApiRequest(auth, method, path, request, customErrorMap);\n        case 3:\n          serverResponse = _context66.sent;\n          if ('mfaPendingCredential' in serverResponse) {\n            _fail(auth, \"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */, {\n              _serverResponse: serverResponse\n            });\n          }\n          return _context66.abrupt(\"return\", serverResponse);\n        case 6:\n        case \"end\":\n          return _context66.stop();\n      }\n    }, _callee66);\n  }));\n  return _performSignInRequest2.apply(this, arguments);\n}\nfunction _getFinalTarget(auth, host, path, query) {\n  var base = \"\".concat(host).concat(path, \"?\").concat(query);\n  if (!auth.config.emulator) {\n    return \"\".concat(auth.config.apiScheme, \"://\").concat(base);\n  }\n  return _emulatorUrl(auth.config, base);\n}\nfunction _parseEnforcementState(enforcementStateStr) {\n  switch (enforcementStateStr) {\n    case 'ENFORCE':\n      return \"ENFORCE\" /* EnforcementState.ENFORCE */;\n    case 'AUDIT':\n      return \"AUDIT\" /* EnforcementState.AUDIT */;\n    case 'OFF':\n      return \"OFF\" /* EnforcementState.OFF */;\n    default:\n      return \"ENFORCEMENT_STATE_UNSPECIFIED\" /* EnforcementState.ENFORCEMENT_STATE_UNSPECIFIED */;\n  }\n}\nvar NetworkTimeout = /*#__PURE__*/function () {\n  function NetworkTimeout(auth) {\n    var _this = this;\n    _classCallCheck(this, NetworkTimeout);\n    this.auth = auth;\n    // Node timers and browser timers are fundamentally incompatible, but we\n    // don't care about the value here\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.timer = null;\n    this.promise = new Promise(function (_, reject) {\n      _this.timer = setTimeout(function () {\n        return reject(_createError(_this.auth, \"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */));\n      }, DEFAULT_API_TIMEOUT_MS.get());\n    });\n  }\n  return _createClass(NetworkTimeout, [{\n    key: \"clearNetworkTimeout\",\n    value: function clearNetworkTimeout() {\n      clearTimeout(this.timer);\n    }\n  }]);\n}();\nfunction _makeTaggedError(auth, code, response) {\n  var errorParams = {\n    appName: auth.name\n  };\n  if (response.email) {\n    errorParams.email = response.email;\n  }\n  if (response.phoneNumber) {\n    errorParams.phoneNumber = response.phoneNumber;\n  }\n  var error = _createError(auth, code, errorParams);\n  // We know customData is defined on error because errorParams is defined\n  error.customData._tokenResponse = response;\n  return error;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction isEnterprise(grecaptcha) {\n  return grecaptcha !== undefined && grecaptcha.enterprise !== undefined;\n}\nvar RecaptchaConfig = /*#__PURE__*/function () {\n  function RecaptchaConfig(response) {\n    _classCallCheck(this, RecaptchaConfig);\n    /**\r\n     * The reCAPTCHA site key.\r\n     */\n    this.siteKey = '';\n    /**\r\n     * The list of providers and their enablement status for reCAPTCHA Enterprise.\r\n     */\n    this.recaptchaEnforcementState = [];\n    if (response.recaptchaKey === undefined) {\n      throw new Error('recaptchaKey undefined');\n    }\n    // Example response.recaptchaKey: \"projects/proj123/keys/sitekey123\"\n    this.siteKey = response.recaptchaKey.split('/')[3];\n    this.recaptchaEnforcementState = response.recaptchaEnforcementState;\n  }\n  /**\r\n   * Returns the reCAPTCHA Enterprise enforcement state for the given provider.\r\n   *\r\n   * @param providerStr - The provider whose enforcement state is to be returned.\r\n   * @returns The reCAPTCHA Enterprise enforcement state for the given provider.\r\n   */\n  return _createClass(RecaptchaConfig, [{\n    key: \"getProviderEnforcementState\",\n    value: function getProviderEnforcementState(providerStr) {\n      if (!this.recaptchaEnforcementState || this.recaptchaEnforcementState.length === 0) {\n        return null;\n      }\n      var _iterator = _createForOfIteratorHelper(this.recaptchaEnforcementState),\n        _step;\n      try {\n        for (_iterator.s(); !(_step = _iterator.n()).done;) {\n          var recaptchaEnforcementState = _step.value;\n          if (recaptchaEnforcementState.provider && recaptchaEnforcementState.provider === providerStr) {\n            return _parseEnforcementState(recaptchaEnforcementState.enforcementState);\n          }\n        }\n      } catch (err) {\n        _iterator.e(err);\n      } finally {\n        _iterator.f();\n      }\n      return null;\n    }\n    /**\r\n     * Returns true if the reCAPTCHA Enterprise enforcement state for the provider is set to ENFORCE or AUDIT.\r\n     *\r\n     * @param providerStr - The provider whose enablement state is to be returned.\r\n     * @returns Whether or not reCAPTCHA Enterprise protection is enabled for the given provider.\r\n     */\n  }, {\n    key: \"isProviderEnabled\",\n    value: function isProviderEnabled(providerStr) {\n      return this.getProviderEnforcementState(providerStr) === \"ENFORCE\" /* EnforcementState.ENFORCE */ || this.getProviderEnforcementState(providerStr) === \"AUDIT\" /* EnforcementState.AUDIT */;\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getRecaptchaConfig(_x12, _x13) {\n  return _getRecaptchaConfig.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _getRecaptchaConfig() {\n  _getRecaptchaConfig = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee67(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee67$(_context67) {\n      while (1) switch (_context67.prev = _context67.next) {\n        case 0:\n          return _context67.abrupt(\"return\", _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/recaptchaConfig\" /* Endpoint.GET_RECAPTCHA_CONFIG */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context67.stop();\n      }\n    }, _callee67);\n  }));\n  return _getRecaptchaConfig.apply(this, arguments);\n}\nfunction deleteAccount(_x14, _x15) {\n  return _deleteAccount.apply(this, arguments);\n}\nfunction _deleteAccount() {\n  _deleteAccount = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee68(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee68$(_context68) {\n      while (1) switch (_context68.prev = _context68.next) {\n        case 0:\n          return _context68.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:delete\" /* Endpoint.DELETE_ACCOUNT */, request));\n        case 1:\n        case \"end\":\n          return _context68.stop();\n      }\n    }, _callee68);\n  }));\n  return _deleteAccount.apply(this, arguments);\n}\nfunction deleteLinkedAccounts(_x16, _x17) {\n  return _deleteLinkedAccounts.apply(this, arguments);\n}\nfunction _deleteLinkedAccounts() {\n  _deleteLinkedAccounts = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee69(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee69$(_context69) {\n      while (1) switch (_context69.prev = _context69.next) {\n        case 0:\n          return _context69.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request));\n        case 1:\n        case \"end\":\n          return _context69.stop();\n      }\n    }, _callee69);\n  }));\n  return _deleteLinkedAccounts.apply(this, arguments);\n}\nfunction getAccountInfo(_x18, _x19) {\n  return _getAccountInfo.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _getAccountInfo() {\n  _getAccountInfo = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee70(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee70$(_context70) {\n      while (1) switch (_context70.prev = _context70.next) {\n        case 0:\n          return _context70.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:lookup\" /* Endpoint.GET_ACCOUNT_INFO */, request));\n        case 1:\n        case \"end\":\n          return _context70.stop();\n      }\n    }, _callee70);\n  }));\n  return _getAccountInfo.apply(this, arguments);\n}\nfunction utcTimestampToDateString(utcTimestamp) {\n  if (!utcTimestamp) {\n    return undefined;\n  }\n  try {\n    // Convert to date object.\n    var date = new Date(Number(utcTimestamp));\n    // Test date is valid.\n    if (!isNaN(date.getTime())) {\n      // Convert to UTC date string.\n      return date.toUTCString();\n    }\n  } catch (e) {\n    // Do nothing. undefined will be returned.\n  }\n  return undefined;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Returns a JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\nfunction getIdToken(user) {\n  var forceRefresh = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user).getIdToken(forceRefresh);\n}\n/**\r\n * Returns a deserialized JSON Web Token (JWT) used to identify the user to a Firebase service.\r\n *\r\n * @remarks\r\n * Returns the current token if it has not expired or if it will not expire in the next five\r\n * minutes. Otherwise, this will refresh the token and return a new one.\r\n *\r\n * @param user - The user.\r\n * @param forceRefresh - Force refresh regardless of token expiration.\r\n *\r\n * @public\r\n */\nfunction _getIdTokenResult2(_x20) {\n  return _getIdTokenResult.apply(this, arguments);\n}\nfunction _getIdTokenResult() {\n  _getIdTokenResult = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee71(user) {\n    var forceRefresh,\n      userInternal,\n      token,\n      claims,\n      firebase,\n      signInProvider,\n      _args71 = arguments;\n    return _regeneratorRuntime().wrap(function _callee71$(_context71) {\n      while (1) switch (_context71.prev = _context71.next) {\n        case 0:\n          forceRefresh = _args71.length > 1 && _args71[1] !== undefined ? _args71[1] : false;\n          userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n          _context71.next = 4;\n          return userInternal.getIdToken(forceRefresh);\n        case 4:\n          token = _context71.sent;\n          claims = _parseToken(token);\n          _assert(claims && claims.exp && claims.auth_time && claims.iat, userInternal.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          firebase = _typeof(claims.firebase) === 'object' ? claims.firebase : undefined;\n          signInProvider = firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_provider'];\n          return _context71.abrupt(\"return\", {\n            claims: claims,\n            token: token,\n            authTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.auth_time)),\n            issuedAtTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.iat)),\n            expirationTime: utcTimestampToDateString(secondsStringToMilliseconds(claims.exp)),\n            signInProvider: signInProvider || null,\n            signInSecondFactor: (firebase === null || firebase === void 0 ? void 0 : firebase['sign_in_second_factor']) || null\n          });\n        case 10:\n        case \"end\":\n          return _context71.stop();\n      }\n    }, _callee71);\n  }));\n  return _getIdTokenResult.apply(this, arguments);\n}\nfunction secondsStringToMilliseconds(seconds) {\n  return Number(seconds) * 1000;\n}\nfunction _parseToken(token) {\n  var _token$split = token.split('.'),\n    _token$split2 = _slicedToArray(_token$split, 3),\n    algorithm = _token$split2[0],\n    payload = _token$split2[1],\n    signature = _token$split2[2];\n  if (algorithm === undefined || payload === undefined || signature === undefined) {\n    _logError('JWT malformed, contained fewer than 3 sections');\n    return null;\n  }\n  try {\n    var decoded = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.base64Decode)(payload);\n    if (!decoded) {\n      _logError('Failed to decode base64 JWT payload');\n      return null;\n    }\n    return JSON.parse(decoded);\n  } catch (e) {\n    _logError('Caught error parsing JWT payload as JSON', e === null || e === void 0 ? void 0 : e.toString());\n    return null;\n  }\n}\n/**\r\n * Extract expiresIn TTL from a token by subtracting the expiration from the issuance.\r\n */\nfunction _tokenExpiresIn(token) {\n  var parsedToken = _parseToken(token);\n  _assert(parsedToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  _assert(typeof parsedToken.exp !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  _assert(typeof parsedToken.iat !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n  return Number(parsedToken.exp) - Number(parsedToken.iat);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _logoutIfInvalidated(_x21, _x22) {\n  return _logoutIfInvalidated2.apply(this, arguments);\n}\nfunction _logoutIfInvalidated2() {\n  _logoutIfInvalidated2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee72(user, promise) {\n    var bypassAuthState,\n      _args72 = arguments;\n    return _regeneratorRuntime().wrap(function _callee72$(_context72) {\n      while (1) switch (_context72.prev = _context72.next) {\n        case 0:\n          bypassAuthState = _args72.length > 2 && _args72[2] !== undefined ? _args72[2] : false;\n          if (!bypassAuthState) {\n            _context72.next = 3;\n            break;\n          }\n          return _context72.abrupt(\"return\", promise);\n        case 3:\n          _context72.prev = 3;\n          _context72.next = 6;\n          return promise;\n        case 6:\n          return _context72.abrupt(\"return\", _context72.sent);\n        case 9:\n          _context72.prev = 9;\n          _context72.t0 = _context72[\"catch\"](3);\n          if (!(_context72.t0 instanceof _firebase_util__WEBPACK_IMPORTED_MODULE_1__.FirebaseError && isUserInvalidated(_context72.t0))) {\n            _context72.next = 15;\n            break;\n          }\n          if (!(user.auth.currentUser === user)) {\n            _context72.next = 15;\n            break;\n          }\n          _context72.next = 15;\n          return user.auth.signOut();\n        case 15:\n          throw _context72.t0;\n        case 16:\n        case \"end\":\n          return _context72.stop();\n      }\n    }, _callee72, null, [[3, 9]]);\n  }));\n  return _logoutIfInvalidated2.apply(this, arguments);\n}\nfunction isUserInvalidated(_ref3) {\n  var code = _ref3.code;\n  return code === \"auth/\".concat(\"user-disabled\" /* AuthErrorCode.USER_DISABLED */) || code === \"auth/\".concat(\"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar ProactiveRefresh = /*#__PURE__*/function () {\n  function ProactiveRefresh(user) {\n    _classCallCheck(this, ProactiveRefresh);\n    this.user = user;\n    this.isRunning = false;\n    // Node timers and browser timers return fundamentally different types.\n    // We don't actually care what the value is but TS won't accept unknown and\n    // we can't cast properly in both environments.\n    // eslint-disable-next-line @typescript-eslint/no-explicit-any\n    this.timerId = null;\n    this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n  }\n  return _createClass(ProactiveRefresh, [{\n    key: \"_start\",\n    value: function _start() {\n      if (this.isRunning) {\n        return;\n      }\n      this.isRunning = true;\n      this.schedule();\n    }\n  }, {\n    key: \"_stop\",\n    value: function _stop() {\n      if (!this.isRunning) {\n        return;\n      }\n      this.isRunning = false;\n      if (this.timerId !== null) {\n        clearTimeout(this.timerId);\n      }\n    }\n  }, {\n    key: \"getInterval\",\n    value: function getInterval(wasError) {\n      var _a;\n      if (wasError) {\n        var interval = this.errorBackoff;\n        this.errorBackoff = Math.min(this.errorBackoff * 2, 960000 /* Duration.RETRY_BACKOFF_MAX */);\n        return interval;\n      } else {\n        // Reset the error backoff\n        this.errorBackoff = 30000 /* Duration.RETRY_BACKOFF_MIN */;\n        var expTime = (_a = this.user.stsTokenManager.expirationTime) !== null && _a !== void 0 ? _a : 0;\n        var _interval = expTime - Date.now() - 300000 /* Duration.OFFSET */;\n        return Math.max(0, _interval);\n      }\n    }\n  }, {\n    key: \"schedule\",\n    value: function schedule() {\n      var _this2 = this;\n      var wasError = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      if (!this.isRunning) {\n        // Just in case...\n        return;\n      }\n      var interval = this.getInterval(wasError);\n      this.timerId = setTimeout(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n        return _regeneratorRuntime().wrap(function _callee$(_context) {\n          while (1) switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _this2.iteration();\n            case 2:\n            case \"end\":\n              return _context.stop();\n          }\n        }, _callee);\n      })), interval);\n    }\n  }, {\n    key: \"iteration\",\n    value: function () {\n      var _iteration = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee2() {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.prev = 0;\n              _context2.next = 3;\n              return this.user.getIdToken(true);\n            case 3:\n              _context2.next = 9;\n              break;\n            case 5:\n              _context2.prev = 5;\n              _context2.t0 = _context2[\"catch\"](0);\n              // Only retry on network errors\n              if ((_context2.t0 === null || _context2.t0 === void 0 ? void 0 : _context2.t0.code) === \"auth/\".concat(\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */)) {\n                this.schedule(/* wasError */true);\n              }\n              return _context2.abrupt(\"return\");\n            case 9:\n              this.schedule();\n            case 10:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, this, [[0, 5]]);\n      }));\n      function iteration() {\n        return _iteration.apply(this, arguments);\n      }\n      return iteration;\n    }()\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar UserMetadata = /*#__PURE__*/function () {\n  function UserMetadata(createdAt, lastLoginAt) {\n    _classCallCheck(this, UserMetadata);\n    this.createdAt = createdAt;\n    this.lastLoginAt = lastLoginAt;\n    this._initializeTime();\n  }\n  return _createClass(UserMetadata, [{\n    key: \"_initializeTime\",\n    value: function _initializeTime() {\n      this.lastSignInTime = utcTimestampToDateString(this.lastLoginAt);\n      this.creationTime = utcTimestampToDateString(this.createdAt);\n    }\n  }, {\n    key: \"_copy\",\n    value: function _copy(metadata) {\n      this.createdAt = metadata.createdAt;\n      this.lastLoginAt = metadata.lastLoginAt;\n      this._initializeTime();\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        createdAt: this.createdAt,\n        lastLoginAt: this.lastLoginAt\n      };\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _reloadWithoutSaving(_x23) {\n  return _reloadWithoutSaving2.apply(this, arguments);\n}\n/**\r\n * Reloads user account data, if signed in.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\nfunction _reloadWithoutSaving2() {\n  _reloadWithoutSaving2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee73(user) {\n    var _a, auth, idToken, response, coreAccount, newProviderData, providerData, oldIsAnonymous, newIsAnonymous, isAnonymous, updates;\n    return _regeneratorRuntime().wrap(function _callee73$(_context73) {\n      while (1) switch (_context73.prev = _context73.next) {\n        case 0:\n          auth = user.auth;\n          _context73.next = 3;\n          return user.getIdToken();\n        case 3:\n          idToken = _context73.sent;\n          _context73.next = 6;\n          return _logoutIfInvalidated(user, getAccountInfo(auth, {\n            idToken: idToken\n          }));\n        case 6:\n          response = _context73.sent;\n          _assert(response === null || response === void 0 ? void 0 : response.users.length, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          coreAccount = response.users[0];\n          user._notifyReloadListener(coreAccount);\n          newProviderData = ((_a = coreAccount.providerUserInfo) === null || _a === void 0 ? void 0 : _a.length) ? extractProviderData(coreAccount.providerUserInfo) : [];\n          providerData = mergeProviderData(user.providerData, newProviderData); // Preserves the non-nonymous status of the stored user, even if no more\n          // credentials (federated or email/password) are linked to the user. If\n          // the user was previously anonymous, then use provider data to update.\n          // On the other hand, if it was not anonymous before, it should never be\n          // considered anonymous now.\n          oldIsAnonymous = user.isAnonymous;\n          newIsAnonymous = !(user.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n          isAnonymous = !oldIsAnonymous ? false : newIsAnonymous;\n          updates = {\n            uid: coreAccount.localId,\n            displayName: coreAccount.displayName || null,\n            photoURL: coreAccount.photoUrl || null,\n            email: coreAccount.email || null,\n            emailVerified: coreAccount.emailVerified || false,\n            phoneNumber: coreAccount.phoneNumber || null,\n            tenantId: coreAccount.tenantId || null,\n            providerData: providerData,\n            metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n            isAnonymous: isAnonymous\n          };\n          Object.assign(user, updates);\n        case 17:\n        case \"end\":\n          return _context73.stop();\n      }\n    }, _callee73);\n  }));\n  return _reloadWithoutSaving2.apply(this, arguments);\n}\nfunction _reload2(_x24) {\n  return _reload.apply(this, arguments);\n}\nfunction _reload() {\n  _reload = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee74(user) {\n    var userInternal;\n    return _regeneratorRuntime().wrap(function _callee74$(_context74) {\n      while (1) switch (_context74.prev = _context74.next) {\n        case 0:\n          userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n          _context74.next = 3;\n          return _reloadWithoutSaving(userInternal);\n        case 3:\n          _context74.next = 5;\n          return userInternal.auth._persistUserIfCurrent(userInternal);\n        case 5:\n          userInternal.auth._notifyListenersIfCurrent(userInternal);\n        case 6:\n        case \"end\":\n          return _context74.stop();\n      }\n    }, _callee74);\n  }));\n  return _reload.apply(this, arguments);\n}\nfunction mergeProviderData(original, newData) {\n  var deduped = original.filter(function (o) {\n    return !newData.some(function (n) {\n      return n.providerId === o.providerId;\n    });\n  });\n  return [].concat(_toConsumableArray(deduped), _toConsumableArray(newData));\n}\nfunction extractProviderData(providers) {\n  return providers.map(function (_a) {\n    var providerId = _a.providerId,\n      provider = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(_a, [\"providerId\"]);\n    return {\n      providerId: providerId,\n      uid: provider.rawId || '',\n      displayName: provider.displayName || null,\n      email: provider.email || null,\n      phoneNumber: provider.phoneNumber || null,\n      photoURL: provider.photoUrl || null\n    };\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction requestStsToken(_x25, _x26) {\n  return _requestStsToken.apply(this, arguments);\n}\nfunction _requestStsToken() {\n  _requestStsToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee76(auth, refreshToken) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee76$(_context76) {\n      while (1) switch (_context76.prev = _context76.next) {\n        case 0:\n          _context76.next = 2;\n          return _performFetchWithErrorHandling(auth, {}, /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee75() {\n            var body, _auth$config, tokenApiHost, apiKey, url, headers;\n            return _regeneratorRuntime().wrap(function _callee75$(_context75) {\n              while (1) switch (_context75.prev = _context75.next) {\n                case 0:\n                  body = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystring)({\n                    'grant_type': 'refresh_token',\n                    'refresh_token': refreshToken\n                  }).slice(1);\n                  _auth$config = auth.config, tokenApiHost = _auth$config.tokenApiHost, apiKey = _auth$config.apiKey;\n                  url = _getFinalTarget(auth, tokenApiHost, \"/v1/token\" /* Endpoint.TOKEN */, \"key=\".concat(apiKey));\n                  _context75.next = 5;\n                  return auth._getAdditionalHeaders();\n                case 5:\n                  headers = _context75.sent;\n                  headers[\"Content-Type\" /* HttpHeader.CONTENT_TYPE */] = 'application/x-www-form-urlencoded';\n                  return _context75.abrupt(\"return\", FetchProvider.fetch()(url, {\n                    method: \"POST\" /* HttpMethod.POST */,\n                    headers: headers,\n                    body: body\n                  }));\n                case 8:\n                case \"end\":\n                  return _context75.stop();\n              }\n            }, _callee75);\n          })));\n        case 2:\n          response = _context76.sent;\n          return _context76.abrupt(\"return\", {\n            accessToken: response.access_token,\n            expiresIn: response.expires_in,\n            refreshToken: response.refresh_token\n          });\n        case 4:\n        case \"end\":\n          return _context76.stop();\n      }\n    }, _callee76);\n  }));\n  return _requestStsToken.apply(this, arguments);\n}\nfunction revokeToken(_x27, _x28) {\n  return _revokeToken.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * We need to mark this class as internal explicitly to exclude it in the public typings, because\r\n * it references AuthInternal which has a circular dependency with UserInternal.\r\n *\r\n * @internal\r\n */\nfunction _revokeToken() {\n  _revokeToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee77(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee77$(_context77) {\n      while (1) switch (_context77.prev = _context77.next) {\n        case 0:\n          return _context77.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts:revokeToken\" /* Endpoint.REVOKE_TOKEN */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context77.stop();\n      }\n    }, _callee77);\n  }));\n  return _revokeToken.apply(this, arguments);\n}\nvar StsTokenManager = /*#__PURE__*/function () {\n  function StsTokenManager() {\n    _classCallCheck(this, StsTokenManager);\n    this.refreshToken = null;\n    this.accessToken = null;\n    this.expirationTime = null;\n  }\n  return _createClass(StsTokenManager, [{\n    key: \"isExpired\",\n    get: function get() {\n      return !this.expirationTime || Date.now() > this.expirationTime - 30000 /* Buffer.TOKEN_REFRESH */;\n    }\n  }, {\n    key: \"updateFromServerResponse\",\n    value: function updateFromServerResponse(response) {\n      _assert(response.idToken, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.idToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof response.refreshToken !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var expiresIn = 'expiresIn' in response && typeof response.expiresIn !== 'undefined' ? Number(response.expiresIn) : _tokenExpiresIn(response.idToken);\n      this.updateTokensAndExpiration(response.idToken, response.refreshToken, expiresIn);\n    }\n  }, {\n    key: \"updateFromIdToken\",\n    value: function updateFromIdToken(idToken) {\n      _assert(idToken.length !== 0, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var expiresIn = _tokenExpiresIn(idToken);\n      this.updateTokensAndExpiration(idToken, null, expiresIn);\n    }\n  }, {\n    key: \"getToken\",\n    value: function () {\n      var _getToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee3(auth) {\n        var forceRefresh,\n          _args3 = arguments;\n        return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n          while (1) switch (_context3.prev = _context3.next) {\n            case 0:\n              forceRefresh = _args3.length > 1 && _args3[1] !== undefined ? _args3[1] : false;\n              if (!(!forceRefresh && this.accessToken && !this.isExpired)) {\n                _context3.next = 3;\n                break;\n              }\n              return _context3.abrupt(\"return\", this.accessToken);\n            case 3:\n              _assert(this.refreshToken, auth, \"user-token-expired\" /* AuthErrorCode.TOKEN_EXPIRED */);\n              if (!this.refreshToken) {\n                _context3.next = 8;\n                break;\n              }\n              _context3.next = 7;\n              return this.refresh(auth, this.refreshToken);\n            case 7:\n              return _context3.abrupt(\"return\", this.accessToken);\n            case 8:\n              return _context3.abrupt(\"return\", null);\n            case 9:\n            case \"end\":\n              return _context3.stop();\n          }\n        }, _callee3, this);\n      }));\n      function getToken(_x29) {\n        return _getToken.apply(this, arguments);\n      }\n      return getToken;\n    }()\n  }, {\n    key: \"clearRefreshToken\",\n    value: function clearRefreshToken() {\n      this.refreshToken = null;\n    }\n  }, {\n    key: \"refresh\",\n    value: function () {\n      var _refresh = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee4(auth, oldToken) {\n        var _yield$requestStsToke, accessToken, refreshToken, expiresIn;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              _context4.next = 2;\n              return requestStsToken(auth, oldToken);\n            case 2:\n              _yield$requestStsToke = _context4.sent;\n              accessToken = _yield$requestStsToke.accessToken;\n              refreshToken = _yield$requestStsToke.refreshToken;\n              expiresIn = _yield$requestStsToke.expiresIn;\n              this.updateTokensAndExpiration(accessToken, refreshToken, Number(expiresIn));\n            case 7:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4, this);\n      }));\n      function refresh(_x30, _x31) {\n        return _refresh.apply(this, arguments);\n      }\n      return refresh;\n    }()\n  }, {\n    key: \"updateTokensAndExpiration\",\n    value: function updateTokensAndExpiration(accessToken, refreshToken, expiresInSec) {\n      this.refreshToken = refreshToken || null;\n      this.accessToken = accessToken || null;\n      this.expirationTime = Date.now() + expiresInSec * 1000;\n    }\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        refreshToken: this.refreshToken,\n        accessToken: this.accessToken,\n        expirationTime: this.expirationTime\n      };\n    }\n  }, {\n    key: \"_assign\",\n    value: function _assign(stsTokenManager) {\n      this.accessToken = stsTokenManager.accessToken;\n      this.refreshToken = stsTokenManager.refreshToken;\n      this.expirationTime = stsTokenManager.expirationTime;\n    }\n  }, {\n    key: \"_clone\",\n    value: function _clone() {\n      return Object.assign(new StsTokenManager(), this.toJSON());\n    }\n  }, {\n    key: \"_performRefresh\",\n    value: function _performRefresh() {\n      return debugFail('not implemented');\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(appName, object) {\n      var refreshToken = object.refreshToken,\n        accessToken = object.accessToken,\n        expirationTime = object.expirationTime;\n      var manager = new StsTokenManager();\n      if (refreshToken) {\n        _assert(typeof refreshToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName: appName\n        });\n        manager.refreshToken = refreshToken;\n      }\n      if (accessToken) {\n        _assert(typeof accessToken === 'string', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName: appName\n        });\n        manager.accessToken = accessToken;\n      }\n      if (expirationTime) {\n        _assert(typeof expirationTime === 'number', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n          appName: appName\n        });\n        manager.expirationTime = expirationTime;\n      }\n      return manager;\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction assertStringOrUndefined(assertion, appName) {\n  _assert(typeof assertion === 'string' || typeof assertion === 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */, {\n    appName: appName\n  });\n}\nvar UserImpl = /*#__PURE__*/function () {\n  function UserImpl(_a) {\n    _classCallCheck(this, UserImpl);\n    var uid = _a.uid,\n      auth = _a.auth,\n      stsTokenManager = _a.stsTokenManager,\n      opt = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(_a, [\"uid\", \"auth\", \"stsTokenManager\"]);\n    // For the user object, provider is always Firebase.\n    this.providerId = \"firebase\" /* ProviderId.FIREBASE */;\n    this.proactiveRefresh = new ProactiveRefresh(this);\n    this.reloadUserInfo = null;\n    this.reloadListener = null;\n    this.uid = uid;\n    this.auth = auth;\n    this.stsTokenManager = stsTokenManager;\n    this.accessToken = stsTokenManager.accessToken;\n    this.displayName = opt.displayName || null;\n    this.email = opt.email || null;\n    this.emailVerified = opt.emailVerified || false;\n    this.phoneNumber = opt.phoneNumber || null;\n    this.photoURL = opt.photoURL || null;\n    this.isAnonymous = opt.isAnonymous || false;\n    this.tenantId = opt.tenantId || null;\n    this.providerData = opt.providerData ? _toConsumableArray(opt.providerData) : [];\n    this.metadata = new UserMetadata(opt.createdAt || undefined, opt.lastLoginAt || undefined);\n  }\n  return _createClass(UserImpl, [{\n    key: \"getIdToken\",\n    value: function () {\n      var _getIdToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee5(forceRefresh) {\n        var accessToken;\n        return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n          while (1) switch (_context5.prev = _context5.next) {\n            case 0:\n              _context5.next = 2;\n              return _logoutIfInvalidated(this, this.stsTokenManager.getToken(this.auth, forceRefresh));\n            case 2:\n              accessToken = _context5.sent;\n              _assert(accessToken, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n              if (!(this.accessToken !== accessToken)) {\n                _context5.next = 9;\n                break;\n              }\n              this.accessToken = accessToken;\n              _context5.next = 8;\n              return this.auth._persistUserIfCurrent(this);\n            case 8:\n              this.auth._notifyListenersIfCurrent(this);\n            case 9:\n              return _context5.abrupt(\"return\", accessToken);\n            case 10:\n            case \"end\":\n              return _context5.stop();\n          }\n        }, _callee5, this);\n      }));\n      function getIdToken(_x32) {\n        return _getIdToken.apply(this, arguments);\n      }\n      return getIdToken;\n    }()\n  }, {\n    key: \"getIdTokenResult\",\n    value: function getIdTokenResult(forceRefresh) {\n      return _getIdTokenResult2(this, forceRefresh);\n    }\n  }, {\n    key: \"reload\",\n    value: function reload() {\n      return _reload2(this);\n    }\n  }, {\n    key: \"_assign\",\n    value: function _assign(user) {\n      if (this === user) {\n        return;\n      }\n      _assert(this.uid === user.uid, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.displayName = user.displayName;\n      this.photoURL = user.photoURL;\n      this.email = user.email;\n      this.emailVerified = user.emailVerified;\n      this.phoneNumber = user.phoneNumber;\n      this.isAnonymous = user.isAnonymous;\n      this.tenantId = user.tenantId;\n      this.providerData = user.providerData.map(function (userInfo) {\n        return Object.assign({}, userInfo);\n      });\n      this.metadata._copy(user.metadata);\n      this.stsTokenManager._assign(user.stsTokenManager);\n    }\n  }, {\n    key: \"_clone\",\n    value: function _clone(auth) {\n      var newUser = new UserImpl(Object.assign(Object.assign({}, this), {\n        auth: auth,\n        stsTokenManager: this.stsTokenManager._clone()\n      }));\n      newUser.metadata._copy(this.metadata);\n      return newUser;\n    }\n  }, {\n    key: \"_onReload\",\n    value: function _onReload(callback) {\n      // There should only ever be one listener, and that is a single instance of MultiFactorUser\n      _assert(!this.reloadListener, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      this.reloadListener = callback;\n      if (this.reloadUserInfo) {\n        this._notifyReloadListener(this.reloadUserInfo);\n        this.reloadUserInfo = null;\n      }\n    }\n  }, {\n    key: \"_notifyReloadListener\",\n    value: function _notifyReloadListener(userInfo) {\n      if (this.reloadListener) {\n        this.reloadListener(userInfo);\n      } else {\n        // If no listener is subscribed yet, save the result so it's available when they do subscribe\n        this.reloadUserInfo = userInfo;\n      }\n    }\n  }, {\n    key: \"_startProactiveRefresh\",\n    value: function _startProactiveRefresh() {\n      this.proactiveRefresh._start();\n    }\n  }, {\n    key: \"_stopProactiveRefresh\",\n    value: function _stopProactiveRefresh() {\n      this.proactiveRefresh._stop();\n    }\n  }, {\n    key: \"_updateTokensIfNecessary\",\n    value: function () {\n      var _updateTokensIfNecessary2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee6(response) {\n        var reload,\n          tokensRefreshed,\n          _args6 = arguments;\n        return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n          while (1) switch (_context6.prev = _context6.next) {\n            case 0:\n              reload = _args6.length > 1 && _args6[1] !== undefined ? _args6[1] : false;\n              tokensRefreshed = false;\n              if (response.idToken && response.idToken !== this.stsTokenManager.accessToken) {\n                this.stsTokenManager.updateFromServerResponse(response);\n                tokensRefreshed = true;\n              }\n              if (!reload) {\n                _context6.next = 6;\n                break;\n              }\n              _context6.next = 6;\n              return _reloadWithoutSaving(this);\n            case 6:\n              _context6.next = 8;\n              return this.auth._persistUserIfCurrent(this);\n            case 8:\n              if (tokensRefreshed) {\n                this.auth._notifyListenersIfCurrent(this);\n              }\n            case 9:\n            case \"end\":\n              return _context6.stop();\n          }\n        }, _callee6, this);\n      }));\n      function _updateTokensIfNecessary(_x33) {\n        return _updateTokensIfNecessary2.apply(this, arguments);\n      }\n      return _updateTokensIfNecessary;\n    }()\n  }, {\n    key: \"delete\",\n    value: function () {\n      var _delete2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee7() {\n        var idToken;\n        return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n          while (1) switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(this.auth.app)) {\n                _context7.next = 2;\n                break;\n              }\n              return _context7.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this.auth)));\n            case 2:\n              _context7.next = 4;\n              return this.getIdToken();\n            case 4:\n              idToken = _context7.sent;\n              _context7.next = 7;\n              return _logoutIfInvalidated(this, deleteAccount(this.auth, {\n                idToken: idToken\n              }));\n            case 7:\n              this.stsTokenManager.clearRefreshToken();\n              // TODO: Determine if cancellable-promises are necessary to use in this class so that delete()\n              //       cancels pending actions...\n              return _context7.abrupt(\"return\", this.auth.signOut());\n            case 9:\n            case \"end\":\n              return _context7.stop();\n          }\n        }, _callee7, this);\n      }));\n      function _delete() {\n        return _delete2.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return Object.assign(Object.assign({\n        uid: this.uid,\n        email: this.email || undefined,\n        emailVerified: this.emailVerified,\n        displayName: this.displayName || undefined,\n        isAnonymous: this.isAnonymous,\n        photoURL: this.photoURL || undefined,\n        phoneNumber: this.phoneNumber || undefined,\n        tenantId: this.tenantId || undefined,\n        providerData: this.providerData.map(function (userInfo) {\n          return Object.assign({}, userInfo);\n        }),\n        stsTokenManager: this.stsTokenManager.toJSON(),\n        // Redirect event ID must be maintained in case there is a pending\n        // redirect event.\n        _redirectEventId: this._redirectEventId\n      }, this.metadata.toJSON()), {\n        // Required for compatibility with the legacy SDK (go/firebase-auth-sdk-persistence-parsing):\n        apiKey: this.auth.config.apiKey,\n        appName: this.auth.name\n      });\n    }\n  }, {\n    key: \"refreshToken\",\n    get: function get() {\n      return this.stsTokenManager.refreshToken || '';\n    }\n  }], [{\n    key: \"_fromJSON\",\n    value: function _fromJSON(auth, object) {\n      var _a, _b, _c, _d, _e, _f, _g, _h;\n      var displayName = (_a = object.displayName) !== null && _a !== void 0 ? _a : undefined;\n      var email = (_b = object.email) !== null && _b !== void 0 ? _b : undefined;\n      var phoneNumber = (_c = object.phoneNumber) !== null && _c !== void 0 ? _c : undefined;\n      var photoURL = (_d = object.photoURL) !== null && _d !== void 0 ? _d : undefined;\n      var tenantId = (_e = object.tenantId) !== null && _e !== void 0 ? _e : undefined;\n      var _redirectEventId = (_f = object._redirectEventId) !== null && _f !== void 0 ? _f : undefined;\n      var createdAt = (_g = object.createdAt) !== null && _g !== void 0 ? _g : undefined;\n      var lastLoginAt = (_h = object.lastLoginAt) !== null && _h !== void 0 ? _h : undefined;\n      var uid = object.uid,\n        emailVerified = object.emailVerified,\n        isAnonymous = object.isAnonymous,\n        providerData = object.providerData,\n        plainObjectTokenManager = object.stsTokenManager;\n      _assert(uid && plainObjectTokenManager, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var stsTokenManager = StsTokenManager.fromJSON(this.name, plainObjectTokenManager);\n      _assert(typeof uid === 'string', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(displayName, auth.name);\n      assertStringOrUndefined(email, auth.name);\n      _assert(typeof emailVerified === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      _assert(typeof isAnonymous === 'boolean', auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      assertStringOrUndefined(phoneNumber, auth.name);\n      assertStringOrUndefined(photoURL, auth.name);\n      assertStringOrUndefined(tenantId, auth.name);\n      assertStringOrUndefined(_redirectEventId, auth.name);\n      assertStringOrUndefined(createdAt, auth.name);\n      assertStringOrUndefined(lastLoginAt, auth.name);\n      var user = new UserImpl({\n        uid: uid,\n        auth: auth,\n        email: email,\n        emailVerified: emailVerified,\n        displayName: displayName,\n        isAnonymous: isAnonymous,\n        photoURL: photoURL,\n        phoneNumber: phoneNumber,\n        tenantId: tenantId,\n        stsTokenManager: stsTokenManager,\n        createdAt: createdAt,\n        lastLoginAt: lastLoginAt\n      });\n      if (providerData && Array.isArray(providerData)) {\n        user.providerData = providerData.map(function (userInfo) {\n          return Object.assign({}, userInfo);\n        });\n      }\n      if (_redirectEventId) {\n        user._redirectEventId = _redirectEventId;\n      }\n      return user;\n    }\n    /**\r\n     * Initialize a User from an idToken server response\r\n     * @param auth\r\n     * @param idTokenResponse\r\n     */\n  }, {\n    key: \"_fromIdTokenResponse\",\n    value: (function () {\n      var _fromIdTokenResponse2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee8(auth, idTokenResponse) {\n        var isAnonymous,\n          stsTokenManager,\n          user,\n          _args8 = arguments;\n        return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n          while (1) switch (_context8.prev = _context8.next) {\n            case 0:\n              isAnonymous = _args8.length > 2 && _args8[2] !== undefined ? _args8[2] : false;\n              stsTokenManager = new StsTokenManager();\n              stsTokenManager.updateFromServerResponse(idTokenResponse);\n              // Initialize the Firebase Auth user.\n              user = new UserImpl({\n                uid: idTokenResponse.localId,\n                auth: auth,\n                stsTokenManager: stsTokenManager,\n                isAnonymous: isAnonymous\n              }); // Updates the user info and data and resolves with a user instance.\n              _context8.next = 6;\n              return _reloadWithoutSaving(user);\n            case 6:\n              return _context8.abrupt(\"return\", user);\n            case 7:\n            case \"end\":\n              return _context8.stop();\n          }\n        }, _callee8);\n      }));\n      function _fromIdTokenResponse(_x34, _x35) {\n        return _fromIdTokenResponse2.apply(this, arguments);\n      }\n      return _fromIdTokenResponse;\n    }()\n    /**\r\n     * Initialize a User from an idToken server response\r\n     * @param auth\r\n     * @param idTokenResponse\r\n     */\n    )\n  }, {\n    key: \"_fromGetAccountInfoResponse\",\n    value: (function () {\n      var _fromGetAccountInfoResponse2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee9(auth, response, idToken) {\n        var coreAccount, providerData, isAnonymous, stsTokenManager, user, updates;\n        return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n          while (1) switch (_context9.prev = _context9.next) {\n            case 0:\n              coreAccount = response.users[0];\n              _assert(coreAccount.localId !== undefined, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n              providerData = coreAccount.providerUserInfo !== undefined ? extractProviderData(coreAccount.providerUserInfo) : [];\n              isAnonymous = !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length);\n              stsTokenManager = new StsTokenManager();\n              stsTokenManager.updateFromIdToken(idToken);\n              // Initialize the Firebase Auth user.\n              user = new UserImpl({\n                uid: coreAccount.localId,\n                auth: auth,\n                stsTokenManager: stsTokenManager,\n                isAnonymous: isAnonymous\n              }); // update the user with data from the GetAccountInfo response.\n              updates = {\n                uid: coreAccount.localId,\n                displayName: coreAccount.displayName || null,\n                photoURL: coreAccount.photoUrl || null,\n                email: coreAccount.email || null,\n                emailVerified: coreAccount.emailVerified || false,\n                phoneNumber: coreAccount.phoneNumber || null,\n                tenantId: coreAccount.tenantId || null,\n                providerData: providerData,\n                metadata: new UserMetadata(coreAccount.createdAt, coreAccount.lastLoginAt),\n                isAnonymous: !(coreAccount.email && coreAccount.passwordHash) && !(providerData === null || providerData === void 0 ? void 0 : providerData.length)\n              };\n              Object.assign(user, updates);\n              return _context9.abrupt(\"return\", user);\n            case 10:\n            case \"end\":\n              return _context9.stop();\n          }\n        }, _callee9);\n      }));\n      function _fromGetAccountInfoResponse(_x36, _x37, _x38) {\n        return _fromGetAccountInfoResponse2.apply(this, arguments);\n      }\n      return _fromGetAccountInfoResponse;\n    }())\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar instanceCache = new Map();\nfunction _getInstance(cls) {\n  debugAssert(cls instanceof Function, 'Expected a class definition');\n  var instance = instanceCache.get(cls);\n  if (instance) {\n    debugAssert(instance instanceof cls, 'Instance stored in cache mismatched with class');\n    return instance;\n  }\n  instance = new cls();\n  instanceCache.set(cls, instance);\n  return instance;\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar InMemoryPersistence = /*#__PURE__*/function () {\n  function InMemoryPersistence() {\n    _classCallCheck(this, InMemoryPersistence);\n    this.type = \"NONE\" /* PersistenceType.NONE */;\n    this.storage = {};\n  }\n  return _createClass(InMemoryPersistence, [{\n    key: \"_isAvailable\",\n    value: function () {\n      var _isAvailable2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee10() {\n        return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n          while (1) switch (_context10.prev = _context10.next) {\n            case 0:\n              return _context10.abrupt(\"return\", true);\n            case 1:\n            case \"end\":\n              return _context10.stop();\n          }\n        }, _callee10);\n      }));\n      function _isAvailable() {\n        return _isAvailable2.apply(this, arguments);\n      }\n      return _isAvailable;\n    }()\n  }, {\n    key: \"_set\",\n    value: function () {\n      var _set2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee11(key, value) {\n        return _regeneratorRuntime().wrap(function _callee11$(_context11) {\n          while (1) switch (_context11.prev = _context11.next) {\n            case 0:\n              this.storage[key] = value;\n            case 1:\n            case \"end\":\n              return _context11.stop();\n          }\n        }, _callee11, this);\n      }));\n      function _set(_x39, _x40) {\n        return _set2.apply(this, arguments);\n      }\n      return _set;\n    }()\n  }, {\n    key: \"_get\",\n    value: function () {\n      var _get2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee12(key) {\n        var value;\n        return _regeneratorRuntime().wrap(function _callee12$(_context12) {\n          while (1) switch (_context12.prev = _context12.next) {\n            case 0:\n              value = this.storage[key];\n              return _context12.abrupt(\"return\", value === undefined ? null : value);\n            case 2:\n            case \"end\":\n              return _context12.stop();\n          }\n        }, _callee12, this);\n      }));\n      function _get(_x41) {\n        return _get2.apply(this, arguments);\n      }\n      return _get;\n    }()\n  }, {\n    key: \"_remove\",\n    value: function () {\n      var _remove2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee13(key) {\n        return _regeneratorRuntime().wrap(function _callee13$(_context13) {\n          while (1) switch (_context13.prev = _context13.next) {\n            case 0:\n              delete this.storage[key];\n            case 1:\n            case \"end\":\n              return _context13.stop();\n          }\n        }, _callee13, this);\n      }));\n      function _remove(_x42) {\n        return _remove2.apply(this, arguments);\n      }\n      return _remove;\n    }()\n  }, {\n    key: \"_addListener\",\n    value: function _addListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n  }, {\n    key: \"_removeListener\",\n    value: function _removeListener(_key, _listener) {\n      // Listeners are not supported for in-memory storage since it cannot be shared across windows/workers\n      return;\n    }\n  }]);\n}();\nInMemoryPersistence.type = 'NONE';\n/**\r\n * An implementation of {@link Persistence} of type 'NONE'.\r\n *\r\n * @public\r\n */\nvar inMemoryPersistence = InMemoryPersistence;\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _persistenceKeyName(key, apiKey, appName) {\n  return \"firebase\" /* Namespace.PERSISTENCE */.concat(\":\", key, \":\").concat(apiKey, \":\").concat(appName);\n}\nvar PersistenceUserManager = /*#__PURE__*/function () {\n  function PersistenceUserManager(persistence, auth, userKey) {\n    _classCallCheck(this, PersistenceUserManager);\n    this.persistence = persistence;\n    this.auth = auth;\n    this.userKey = userKey;\n    var _this$auth = this.auth,\n      config = _this$auth.config,\n      name = _this$auth.name;\n    this.fullUserKey = _persistenceKeyName(this.userKey, config.apiKey, name);\n    this.fullPersistenceKey = _persistenceKeyName(\"persistence\" /* KeyName.PERSISTENCE_USER */, config.apiKey, name);\n    this.boundEventHandler = auth._onStorageEvent.bind(auth);\n    this.persistence._addListener(this.fullUserKey, this.boundEventHandler);\n  }\n  return _createClass(PersistenceUserManager, [{\n    key: \"setCurrentUser\",\n    value: function setCurrentUser(user) {\n      return this.persistence._set(this.fullUserKey, user.toJSON());\n    }\n  }, {\n    key: \"getCurrentUser\",\n    value: function () {\n      var _getCurrentUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee14() {\n        var blob;\n        return _regeneratorRuntime().wrap(function _callee14$(_context14) {\n          while (1) switch (_context14.prev = _context14.next) {\n            case 0:\n              _context14.next = 2;\n              return this.persistence._get(this.fullUserKey);\n            case 2:\n              blob = _context14.sent;\n              return _context14.abrupt(\"return\", blob ? UserImpl._fromJSON(this.auth, blob) : null);\n            case 4:\n            case \"end\":\n              return _context14.stop();\n          }\n        }, _callee14, this);\n      }));\n      function getCurrentUser() {\n        return _getCurrentUser.apply(this, arguments);\n      }\n      return getCurrentUser;\n    }()\n  }, {\n    key: \"removeCurrentUser\",\n    value: function removeCurrentUser() {\n      return this.persistence._remove(this.fullUserKey);\n    }\n  }, {\n    key: \"savePersistenceForRedirect\",\n    value: function savePersistenceForRedirect() {\n      return this.persistence._set(this.fullPersistenceKey, this.persistence.type);\n    }\n  }, {\n    key: \"setPersistence\",\n    value: function () {\n      var _setPersistence = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee15(newPersistence) {\n        var currentUser;\n        return _regeneratorRuntime().wrap(function _callee15$(_context15) {\n          while (1) switch (_context15.prev = _context15.next) {\n            case 0:\n              if (!(this.persistence === newPersistence)) {\n                _context15.next = 2;\n                break;\n              }\n              return _context15.abrupt(\"return\");\n            case 2:\n              _context15.next = 4;\n              return this.getCurrentUser();\n            case 4:\n              currentUser = _context15.sent;\n              _context15.next = 7;\n              return this.removeCurrentUser();\n            case 7:\n              this.persistence = newPersistence;\n              if (!currentUser) {\n                _context15.next = 10;\n                break;\n              }\n              return _context15.abrupt(\"return\", this.setCurrentUser(currentUser));\n            case 10:\n            case \"end\":\n              return _context15.stop();\n          }\n        }, _callee15, this);\n      }));\n      function setPersistence(_x43) {\n        return _setPersistence.apply(this, arguments);\n      }\n      return setPersistence;\n    }()\n  }, {\n    key: \"delete\",\n    value: function _delete() {\n      this.persistence._removeListener(this.fullUserKey, this.boundEventHandler);\n    }\n  }], [{\n    key: \"create\",\n    value: function () {\n      var _create = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee18(auth, persistenceHierarchy) {\n        var userKey,\n          availablePersistences,\n          selectedPersistence,\n          key,\n          userToMigrate,\n          _iterator2,\n          _step2,\n          persistence,\n          blob,\n          user,\n          migrationHierarchy,\n          _args18 = arguments;\n        return _regeneratorRuntime().wrap(function _callee18$(_context18) {\n          while (1) switch (_context18.prev = _context18.next) {\n            case 0:\n              userKey = _args18.length > 2 && _args18[2] !== undefined ? _args18[2] : \"authUser\";\n              if (persistenceHierarchy.length) {\n                _context18.next = 3;\n                break;\n              }\n              return _context18.abrupt(\"return\", new PersistenceUserManager(_getInstance(inMemoryPersistence), auth, userKey));\n            case 3:\n              _context18.next = 5;\n              return Promise.all(persistenceHierarchy.map(/*#__PURE__*/function () {\n                var _ref5 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee16(persistence) {\n                  return _regeneratorRuntime().wrap(function _callee16$(_context16) {\n                    while (1) switch (_context16.prev = _context16.next) {\n                      case 0:\n                        _context16.next = 2;\n                        return persistence._isAvailable();\n                      case 2:\n                        if (!_context16.sent) {\n                          _context16.next = 4;\n                          break;\n                        }\n                        return _context16.abrupt(\"return\", persistence);\n                      case 4:\n                        return _context16.abrupt(\"return\", undefined);\n                      case 5:\n                      case \"end\":\n                        return _context16.stop();\n                    }\n                  }, _callee16);\n                }));\n                return function (_x46) {\n                  return _ref5.apply(this, arguments);\n                };\n              }()));\n            case 5:\n              availablePersistences = _context18.sent.filter(function (persistence) {\n                return persistence;\n              });\n              // Fall back to the first persistence listed, or in memory if none available\n              selectedPersistence = availablePersistences[0] || _getInstance(inMemoryPersistence);\n              key = _persistenceKeyName(userKey, auth.config.apiKey, auth.name); // Pull out the existing user, setting the chosen persistence to that\n              // persistence if the user exists.\n              userToMigrate = null; // Note, here we check for a user in _all_ persistences, not just the\n              // ones deemed available. If we can migrate a user out of a broken\n              // persistence, we will (but only if that persistence supports migration).\n              _iterator2 = _createForOfIteratorHelper(persistenceHierarchy);\n              _context18.prev = 10;\n              _iterator2.s();\n            case 12:\n              if ((_step2 = _iterator2.n()).done) {\n                _context18.next = 29;\n                break;\n              }\n              persistence = _step2.value;\n              _context18.prev = 14;\n              _context18.next = 17;\n              return persistence._get(key);\n            case 17:\n              blob = _context18.sent;\n              if (!blob) {\n                _context18.next = 23;\n                break;\n              }\n              user = UserImpl._fromJSON(auth, blob); // throws for unparsable blob (wrong format)\n              if (persistence !== selectedPersistence) {\n                userToMigrate = user;\n              }\n              selectedPersistence = persistence;\n              return _context18.abrupt(\"break\", 29);\n            case 23:\n              _context18.next = 27;\n              break;\n            case 25:\n              _context18.prev = 25;\n              _context18.t0 = _context18[\"catch\"](14);\n            case 27:\n              _context18.next = 12;\n              break;\n            case 29:\n              _context18.next = 34;\n              break;\n            case 31:\n              _context18.prev = 31;\n              _context18.t1 = _context18[\"catch\"](10);\n              _iterator2.e(_context18.t1);\n            case 34:\n              _context18.prev = 34;\n              _iterator2.f();\n              return _context18.finish(34);\n            case 37:\n              // If we find the user in a persistence that does support migration, use\n              // that migration path (of only persistences that support migration)\n              migrationHierarchy = availablePersistences.filter(function (p) {\n                return p._shouldAllowMigration;\n              }); // If the persistence does _not_ allow migration, just finish off here\n              if (!(!selectedPersistence._shouldAllowMigration || !migrationHierarchy.length)) {\n                _context18.next = 40;\n                break;\n              }\n              return _context18.abrupt(\"return\", new PersistenceUserManager(selectedPersistence, auth, userKey));\n            case 40:\n              selectedPersistence = migrationHierarchy[0];\n              if (!userToMigrate) {\n                _context18.next = 44;\n                break;\n              }\n              _context18.next = 44;\n              return selectedPersistence._set(key, userToMigrate.toJSON());\n            case 44:\n              _context18.next = 46;\n              return Promise.all(persistenceHierarchy.map(/*#__PURE__*/function () {\n                var _ref6 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee17(persistence) {\n                  return _regeneratorRuntime().wrap(function _callee17$(_context17) {\n                    while (1) switch (_context17.prev = _context17.next) {\n                      case 0:\n                        if (!(persistence !== selectedPersistence)) {\n                          _context17.next = 8;\n                          break;\n                        }\n                        _context17.prev = 1;\n                        _context17.next = 4;\n                        return persistence._remove(key);\n                      case 4:\n                        _context17.next = 8;\n                        break;\n                      case 6:\n                        _context17.prev = 6;\n                        _context17.t0 = _context17[\"catch\"](1);\n                      case 8:\n                      case \"end\":\n                        return _context17.stop();\n                    }\n                  }, _callee17, null, [[1, 6]]);\n                }));\n                return function (_x47) {\n                  return _ref6.apply(this, arguments);\n                };\n              }()));\n            case 46:\n              return _context18.abrupt(\"return\", new PersistenceUserManager(selectedPersistence, auth, userKey));\n            case 47:\n            case \"end\":\n              return _context18.stop();\n          }\n        }, _callee18, null, [[10, 31, 34, 37], [14, 25]]);\n      }));\n      function create(_x44, _x45) {\n        return _create.apply(this, arguments);\n      }\n      return create;\n    }()\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Determine the browser for the purposes of reporting usage to the API\r\n */\nfunction _getBrowserName(userAgent) {\n  var ua = userAgent.toLowerCase();\n  if (ua.includes('opera/') || ua.includes('opr/') || ua.includes('opios/')) {\n    return \"Opera\" /* BrowserName.OPERA */;\n  } else if (_isIEMobile(ua)) {\n    // Windows phone IEMobile browser.\n    return \"IEMobile\" /* BrowserName.IEMOBILE */;\n  } else if (ua.includes('msie') || ua.includes('trident/')) {\n    return \"IE\" /* BrowserName.IE */;\n  } else if (ua.includes('edge/')) {\n    return \"Edge\" /* BrowserName.EDGE */;\n  } else if (_isFirefox(ua)) {\n    return \"Firefox\" /* BrowserName.FIREFOX */;\n  } else if (ua.includes('silk/')) {\n    return \"Silk\" /* BrowserName.SILK */;\n  } else if (_isBlackBerry(ua)) {\n    // Blackberry browser.\n    return \"Blackberry\" /* BrowserName.BLACKBERRY */;\n  } else if (_isWebOS(ua)) {\n    // WebOS default browser.\n    return \"Webos\" /* BrowserName.WEBOS */;\n  } else if (_isSafari(ua)) {\n    return \"Safari\" /* BrowserName.SAFARI */;\n  } else if ((ua.includes('chrome/') || _isChromeIOS(ua)) && !ua.includes('edge/')) {\n    return \"Chrome\" /* BrowserName.CHROME */;\n  } else if (_isAndroid(ua)) {\n    // Android stock browser.\n    return \"Android\" /* BrowserName.ANDROID */;\n  } else {\n    // Most modern browsers have name/version at end of user agent string.\n    var re = /([a-zA-Z\\d\\.]+)\\/[a-zA-Z\\d\\.]*$/;\n    var matches = userAgent.match(re);\n    if ((matches === null || matches === void 0 ? void 0 : matches.length) === 2) {\n      return matches[1];\n    }\n  }\n  return \"Other\" /* BrowserName.OTHER */;\n}\nfunction _isFirefox() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /firefox\\//i.test(ua);\n}\nfunction _isSafari() {\n  var userAgent = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  var ua = userAgent.toLowerCase();\n  return ua.includes('safari/') && !ua.includes('chrome/') && !ua.includes('crios/') && !ua.includes('android');\n}\nfunction _isChromeIOS() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /crios\\//i.test(ua);\n}\nfunction _isIEMobile() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /iemobile/i.test(ua);\n}\nfunction _isAndroid() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /android/i.test(ua);\n}\nfunction _isBlackBerry() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /blackberry/i.test(ua);\n}\nfunction _isWebOS() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /webos/i.test(ua);\n}\nfunction _isIOS() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /iphone|ipad|ipod/i.test(ua) || /macintosh/i.test(ua) && /mobile/i.test(ua);\n}\nfunction _isIOS7Or8() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  return /(iPad|iPhone|iPod).*OS 7_\\d/i.test(ua) || /(iPad|iPhone|iPod).*OS 8_\\d/i.test(ua);\n}\nfunction _isIE10() {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.isIE)() && document.documentMode === 10;\n}\nfunction _isMobileBrowser() {\n  var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)();\n  // TODO: implement getBrowserName equivalent for OS.\n  return _isIOS(ua) || _isAndroid(ua) || _isWebOS(ua) || _isBlackBerry(ua) || /windows phone/i.test(ua) || _isIEMobile(ua);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/*\r\n * Determine the SDK version string\r\n */\nfunction _getClientVersion(clientPlatform) {\n  var frameworks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n  var reportedPlatform;\n  switch (clientPlatform) {\n    case \"Browser\" /* ClientPlatform.BROWSER */:\n      // In a browser environment, report the browser name.\n      reportedPlatform = _getBrowserName((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)());\n      break;\n    case \"Worker\" /* ClientPlatform.WORKER */:\n      // Technically a worker runs from a browser but we need to differentiate a\n      // worker from a browser.\n      // For example: Chrome-Worker/JsCore/4.9.1/FirebaseCore-web.\n      reportedPlatform = \"\".concat(_getBrowserName((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getUA)()), \"-\").concat(clientPlatform);\n      break;\n    default:\n      reportedPlatform = clientPlatform;\n  }\n  var reportedFrameworks = frameworks.length ? frameworks.join(',') : 'FirebaseCore-web'; /* default value if no other framework is used */\n  return \"\".concat(reportedPlatform, \"/\", \"JsCore\" /* ClientImplementation.CORE */, \"/\").concat(_firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION, \"/\").concat(reportedFrameworks);\n}\n\n/**\r\n * @license\r\n * Copyright 2022 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AuthMiddlewareQueue = /*#__PURE__*/function () {\n  function AuthMiddlewareQueue(auth) {\n    _classCallCheck(this, AuthMiddlewareQueue);\n    this.auth = auth;\n    this.queue = [];\n  }\n  return _createClass(AuthMiddlewareQueue, [{\n    key: \"pushCallback\",\n    value: function pushCallback(callback, onAbort) {\n      var _this3 = this;\n      // The callback could be sync or async. Wrap it into a\n      // function that is always async.\n      var wrappedCallback = function wrappedCallback(user) {\n        return new Promise(function (resolve, reject) {\n          try {\n            var result = callback(user);\n            // Either resolve with existing promise or wrap a non-promise\n            // return value into a promise.\n            resolve(result);\n          } catch (e) {\n            // Sync callback throws.\n            reject(e);\n          }\n        });\n      };\n      // Attach the onAbort if present\n      wrappedCallback.onAbort = onAbort;\n      this.queue.push(wrappedCallback);\n      var index = this.queue.length - 1;\n      return function () {\n        // Unsubscribe. Replace with no-op. Do not remove from array, or it will disturb\n        // indexing of other elements.\n        _this3.queue[index] = function () {\n          return Promise.resolve();\n        };\n      };\n    }\n  }, {\n    key: \"runMiddleware\",\n    value: function () {\n      var _runMiddleware = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee19(nextUser) {\n        var onAbortStack, _iterator3, _step3, beforeStateCallback, _iterator4, _step4, onAbort;\n        return _regeneratorRuntime().wrap(function _callee19$(_context19) {\n          while (1) switch (_context19.prev = _context19.next) {\n            case 0:\n              if (!(this.auth.currentUser === nextUser)) {\n                _context19.next = 2;\n                break;\n              }\n              return _context19.abrupt(\"return\");\n            case 2:\n              // While running the middleware, build a temporary stack of onAbort\n              // callbacks to call if one middleware callback rejects.\n              onAbortStack = [];\n              _context19.prev = 3;\n              _iterator3 = _createForOfIteratorHelper(this.queue);\n              _context19.prev = 5;\n              _iterator3.s();\n            case 7:\n              if ((_step3 = _iterator3.n()).done) {\n                _context19.next = 14;\n                break;\n              }\n              beforeStateCallback = _step3.value;\n              _context19.next = 11;\n              return beforeStateCallback(nextUser);\n            case 11:\n              // Only push the onAbort if the callback succeeds\n              if (beforeStateCallback.onAbort) {\n                onAbortStack.push(beforeStateCallback.onAbort);\n              }\n            case 12:\n              _context19.next = 7;\n              break;\n            case 14:\n              _context19.next = 19;\n              break;\n            case 16:\n              _context19.prev = 16;\n              _context19.t0 = _context19[\"catch\"](5);\n              _iterator3.e(_context19.t0);\n            case 19:\n              _context19.prev = 19;\n              _iterator3.f();\n              return _context19.finish(19);\n            case 22:\n              _context19.next = 30;\n              break;\n            case 24:\n              _context19.prev = 24;\n              _context19.t1 = _context19[\"catch\"](3);\n              // Run all onAbort, with separate try/catch to ignore any errors and\n              // continue\n              onAbortStack.reverse();\n              _iterator4 = _createForOfIteratorHelper(onAbortStack);\n              try {\n                for (_iterator4.s(); !(_step4 = _iterator4.n()).done;) {\n                  onAbort = _step4.value;\n                  try {\n                    onAbort();\n                  } catch (_) {\n                    /* swallow error */\n                  }\n                }\n              } catch (err) {\n                _iterator4.e(err);\n              } finally {\n                _iterator4.f();\n              }\n              throw this.auth._errorFactory.create(\"login-blocked\" /* AuthErrorCode.LOGIN_BLOCKED */, {\n                originalMessage: _context19.t1 === null || _context19.t1 === void 0 ? void 0 : _context19.t1.message\n              });\n            case 30:\n            case \"end\":\n              return _context19.stop();\n          }\n        }, _callee19, this, [[3, 24], [5, 16, 19, 22]]);\n      }));\n      function runMiddleware(_x48) {\n        return _runMiddleware.apply(this, arguments);\n      }\n      return runMiddleware;\n    }()\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Fetches the password policy for the currently set tenant or the project if no tenant is set.\r\n *\r\n * @param auth Auth object.\r\n * @param request Password policy request.\r\n * @returns Password policy response.\r\n */\nfunction _getPasswordPolicy(_x49) {\n  return _getPasswordPolicy2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2023 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Minimum min password length enforced by the backend, even if no minimum length is set.\nfunction _getPasswordPolicy2() {\n  _getPasswordPolicy2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee78(auth) {\n    var request,\n      _args78 = arguments;\n    return _regeneratorRuntime().wrap(function _callee78$(_context78) {\n      while (1) switch (_context78.prev = _context78.next) {\n        case 0:\n          request = _args78.length > 1 && _args78[1] !== undefined ? _args78[1] : {};\n          return _context78.abrupt(\"return\", _performApiRequest(auth, \"GET\" /* HttpMethod.GET */, \"/v2/passwordPolicy\" /* Endpoint.GET_PASSWORD_POLICY */, _addTidIfNecessary(auth, request)));\n        case 2:\n        case \"end\":\n          return _context78.stop();\n      }\n    }, _callee78);\n  }));\n  return _getPasswordPolicy2.apply(this, arguments);\n}\nvar MINIMUM_MIN_PASSWORD_LENGTH = 6;\n/**\r\n * Stores password policy requirements and provides password validation against the policy.\r\n *\r\n * @internal\r\n */\nvar PasswordPolicyImpl = /*#__PURE__*/function () {\n  function PasswordPolicyImpl(response) {\n    _classCallCheck(this, PasswordPolicyImpl);\n    var _a, _b, _c, _d;\n    // Only include custom strength options defined in the response.\n    var responseOptions = response.customStrengthOptions;\n    this.customStrengthOptions = {};\n    // TODO: Remove once the backend is updated to include the minimum min password length instead of undefined when there is no minimum length set.\n    this.customStrengthOptions.minPasswordLength = (_a = responseOptions.minPasswordLength) !== null && _a !== void 0 ? _a : MINIMUM_MIN_PASSWORD_LENGTH;\n    if (responseOptions.maxPasswordLength) {\n      this.customStrengthOptions.maxPasswordLength = responseOptions.maxPasswordLength;\n    }\n    if (responseOptions.containsLowercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsLowercaseLetter = responseOptions.containsLowercaseCharacter;\n    }\n    if (responseOptions.containsUppercaseCharacter !== undefined) {\n      this.customStrengthOptions.containsUppercaseLetter = responseOptions.containsUppercaseCharacter;\n    }\n    if (responseOptions.containsNumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNumericCharacter = responseOptions.containsNumericCharacter;\n    }\n    if (responseOptions.containsNonAlphanumericCharacter !== undefined) {\n      this.customStrengthOptions.containsNonAlphanumericCharacter = responseOptions.containsNonAlphanumericCharacter;\n    }\n    this.enforcementState = response.enforcementState;\n    if (this.enforcementState === 'ENFORCEMENT_STATE_UNSPECIFIED') {\n      this.enforcementState = 'OFF';\n    }\n    // Use an empty string if no non-alphanumeric characters are specified in the response.\n    this.allowedNonAlphanumericCharacters = (_c = (_b = response.allowedNonAlphanumericCharacters) === null || _b === void 0 ? void 0 : _b.join('')) !== null && _c !== void 0 ? _c : '';\n    this.forceUpgradeOnSignin = (_d = response.forceUpgradeOnSignin) !== null && _d !== void 0 ? _d : false;\n    this.schemaVersion = response.schemaVersion;\n  }\n  return _createClass(PasswordPolicyImpl, [{\n    key: \"validatePassword\",\n    value: function validatePassword(password) {\n      var _a, _b, _c, _d, _e, _f;\n      var status = {\n        isValid: true,\n        passwordPolicy: this\n      };\n      // Check the password length and character options.\n      this.validatePasswordLengthOptions(password, status);\n      this.validatePasswordCharacterOptions(password, status);\n      // Combine the status into single isValid property.\n      status.isValid && (status.isValid = (_a = status.meetsMinPasswordLength) !== null && _a !== void 0 ? _a : true);\n      status.isValid && (status.isValid = (_b = status.meetsMaxPasswordLength) !== null && _b !== void 0 ? _b : true);\n      status.isValid && (status.isValid = (_c = status.containsLowercaseLetter) !== null && _c !== void 0 ? _c : true);\n      status.isValid && (status.isValid = (_d = status.containsUppercaseLetter) !== null && _d !== void 0 ? _d : true);\n      status.isValid && (status.isValid = (_e = status.containsNumericCharacter) !== null && _e !== void 0 ? _e : true);\n      status.isValid && (status.isValid = (_f = status.containsNonAlphanumericCharacter) !== null && _f !== void 0 ? _f : true);\n      return status;\n    }\n    /**\r\n     * Validates that the password meets the length options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\n  }, {\n    key: \"validatePasswordLengthOptions\",\n    value: function validatePasswordLengthOptions(password, status) {\n      var minPasswordLength = this.customStrengthOptions.minPasswordLength;\n      var maxPasswordLength = this.customStrengthOptions.maxPasswordLength;\n      if (minPasswordLength) {\n        status.meetsMinPasswordLength = password.length >= minPasswordLength;\n      }\n      if (maxPasswordLength) {\n        status.meetsMaxPasswordLength = password.length <= maxPasswordLength;\n      }\n    }\n    /**\r\n     * Validates that the password meets the character options for the policy.\r\n     *\r\n     * @param password Password to validate.\r\n     * @param status Validation status.\r\n     */\n  }, {\n    key: \"validatePasswordCharacterOptions\",\n    value: function validatePasswordCharacterOptions(password, status) {\n      // Assign statuses for requirements even if the password is an empty string.\n      this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */false, /* containsUppercaseCharacter= */false, /* containsNumericCharacter= */false, /* containsNonAlphanumericCharacter= */false);\n      var passwordChar;\n      for (var i = 0; i < password.length; i++) {\n        passwordChar = password.charAt(i);\n        this.updatePasswordCharacterOptionsStatuses(status, /* containsLowercaseCharacter= */passwordChar >= 'a' && passwordChar <= 'z', /* containsUppercaseCharacter= */passwordChar >= 'A' && passwordChar <= 'Z', /* containsNumericCharacter= */passwordChar >= '0' && passwordChar <= '9', /* containsNonAlphanumericCharacter= */this.allowedNonAlphanumericCharacters.includes(passwordChar));\n      }\n    }\n    /**\r\n     * Updates the running validation status with the statuses for the character options.\r\n     * Expected to be called each time a character is processed to update each option status\r\n     * based on the current character.\r\n     *\r\n     * @param status Validation status.\r\n     * @param containsLowercaseCharacter Whether the character is a lowercase letter.\r\n     * @param containsUppercaseCharacter Whether the character is an uppercase letter.\r\n     * @param containsNumericCharacter Whether the character is a numeric character.\r\n     * @param containsNonAlphanumericCharacter Whether the character is a non-alphanumeric character.\r\n     */\n  }, {\n    key: \"updatePasswordCharacterOptionsStatuses\",\n    value: function updatePasswordCharacterOptionsStatuses(status, containsLowercaseCharacter, containsUppercaseCharacter, containsNumericCharacter, containsNonAlphanumericCharacter) {\n      if (this.customStrengthOptions.containsLowercaseLetter) {\n        status.containsLowercaseLetter || (status.containsLowercaseLetter = containsLowercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsUppercaseLetter) {\n        status.containsUppercaseLetter || (status.containsUppercaseLetter = containsUppercaseCharacter);\n      }\n      if (this.customStrengthOptions.containsNumericCharacter) {\n        status.containsNumericCharacter || (status.containsNumericCharacter = containsNumericCharacter);\n      }\n      if (this.customStrengthOptions.containsNonAlphanumericCharacter) {\n        status.containsNonAlphanumericCharacter || (status.containsNonAlphanumericCharacter = containsNonAlphanumericCharacter);\n      }\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AuthImpl = /*#__PURE__*/function () {\n  function AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config) {\n    _classCallCheck(this, AuthImpl);\n    this.app = app;\n    this.heartbeatServiceProvider = heartbeatServiceProvider;\n    this.appCheckServiceProvider = appCheckServiceProvider;\n    this.config = config;\n    this.currentUser = null;\n    this.emulatorConfig = null;\n    this.operations = Promise.resolve();\n    this.authStateSubscription = new Subscription(this);\n    this.idTokenSubscription = new Subscription(this);\n    this.beforeStateQueue = new AuthMiddlewareQueue(this);\n    this.redirectUser = null;\n    this.isProactiveRefreshEnabled = false;\n    this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION = 1;\n    // Any network calls will set this to true and prevent subsequent emulator\n    // initialization\n    this._canInitEmulator = true;\n    this._isInitialized = false;\n    this._deleted = false;\n    this._initializationPromise = null;\n    this._popupRedirectResolver = null;\n    this._errorFactory = _DEFAULT_AUTH_ERROR_FACTORY;\n    this._agentRecaptchaConfig = null;\n    this._tenantRecaptchaConfigs = {};\n    this._projectPasswordPolicy = null;\n    this._tenantPasswordPolicies = {};\n    // Tracks the last notified UID for state change listeners to prevent\n    // repeated calls to the callbacks. Undefined means it's never been\n    // called, whereas null means it's been called with a signed out user\n    this.lastNotifiedUid = undefined;\n    this.languageCode = null;\n    this.tenantId = null;\n    this.settings = {\n      appVerificationDisabledForTesting: false\n    };\n    this.frameworks = [];\n    this.name = app.name;\n    this.clientVersion = config.sdkClientVersion;\n  }\n  return _createClass(AuthImpl, [{\n    key: \"_initializeWithPersistence\",\n    value: function _initializeWithPersistence(persistenceHierarchy, popupRedirectResolver) {\n      var _this4 = this;\n      if (popupRedirectResolver) {\n        this._popupRedirectResolver = _getInstance(popupRedirectResolver);\n      }\n      // Have to check for app deletion throughout initialization (after each\n      // promise resolution)\n      this._initializationPromise = this.queue(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee20() {\n        var _a, _b;\n        return _regeneratorRuntime().wrap(function _callee20$(_context20) {\n          while (1) switch (_context20.prev = _context20.next) {\n            case 0:\n              if (!_this4._deleted) {\n                _context20.next = 2;\n                break;\n              }\n              return _context20.abrupt(\"return\");\n            case 2:\n              _context20.next = 4;\n              return PersistenceUserManager.create(_this4, persistenceHierarchy);\n            case 4:\n              _this4.persistenceManager = _context20.sent;\n              if (!_this4._deleted) {\n                _context20.next = 7;\n                break;\n              }\n              return _context20.abrupt(\"return\");\n            case 7:\n              if (!((_a = _this4._popupRedirectResolver) === null || _a === void 0 ? void 0 : _a._shouldInitProactively)) {\n                _context20.next = 15;\n                break;\n              }\n              _context20.prev = 8;\n              _context20.next = 11;\n              return _this4._popupRedirectResolver._initialize(_this4);\n            case 11:\n              _context20.next = 15;\n              break;\n            case 13:\n              _context20.prev = 13;\n              _context20.t0 = _context20[\"catch\"](8);\n            case 15:\n              _context20.next = 17;\n              return _this4.initializeCurrentUser(popupRedirectResolver);\n            case 17:\n              _this4.lastNotifiedUid = ((_b = _this4.currentUser) === null || _b === void 0 ? void 0 : _b.uid) || null;\n              if (!_this4._deleted) {\n                _context20.next = 20;\n                break;\n              }\n              return _context20.abrupt(\"return\");\n            case 20:\n              _this4._isInitialized = true;\n            case 21:\n            case \"end\":\n              return _context20.stop();\n          }\n        }, _callee20, null, [[8, 13]]);\n      })));\n      return this._initializationPromise;\n    }\n    /**\r\n     * If the persistence is changed in another window, the user manager will let us know\r\n     */\n  }, {\n    key: \"_onStorageEvent\",\n    value: (function () {\n      var _onStorageEvent2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee21() {\n        var user;\n        return _regeneratorRuntime().wrap(function _callee21$(_context21) {\n          while (1) switch (_context21.prev = _context21.next) {\n            case 0:\n              if (!this._deleted) {\n                _context21.next = 2;\n                break;\n              }\n              return _context21.abrupt(\"return\");\n            case 2:\n              _context21.next = 4;\n              return this.assertedPersistence.getCurrentUser();\n            case 4:\n              user = _context21.sent;\n              if (!(!this.currentUser && !user)) {\n                _context21.next = 7;\n                break;\n              }\n              return _context21.abrupt(\"return\");\n            case 7:\n              if (!(this.currentUser && user && this.currentUser.uid === user.uid)) {\n                _context21.next = 12;\n                break;\n              }\n              // Data update, simply copy data changes.\n              this._currentUser._assign(user);\n              // If tokens changed from previous user tokens, this will trigger\n              // notifyAuthListeners_.\n              _context21.next = 11;\n              return this.currentUser.getIdToken();\n            case 11:\n              return _context21.abrupt(\"return\");\n            case 12:\n              _context21.next = 14;\n              return this._updateCurrentUser(user, /* skipBeforeStateCallbacks */true);\n            case 14:\n            case \"end\":\n              return _context21.stop();\n          }\n        }, _callee21, this);\n      }));\n      function _onStorageEvent() {\n        return _onStorageEvent2.apply(this, arguments);\n      }\n      return _onStorageEvent;\n    }())\n  }, {\n    key: \"initializeCurrentUserFromIdToken\",\n    value: function () {\n      var _initializeCurrentUserFromIdToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee22(idToken) {\n        var response, user;\n        return _regeneratorRuntime().wrap(function _callee22$(_context22) {\n          while (1) switch (_context22.prev = _context22.next) {\n            case 0:\n              _context22.prev = 0;\n              _context22.next = 3;\n              return getAccountInfo(this, {\n                idToken: idToken\n              });\n            case 3:\n              response = _context22.sent;\n              _context22.next = 6;\n              return UserImpl._fromGetAccountInfoResponse(this, response, idToken);\n            case 6:\n              user = _context22.sent;\n              _context22.next = 9;\n              return this.directlySetCurrentUser(user);\n            case 9:\n              _context22.next = 16;\n              break;\n            case 11:\n              _context22.prev = 11;\n              _context22.t0 = _context22[\"catch\"](0);\n              console.warn('FirebaseServerApp could not login user with provided authIdToken: ', _context22.t0);\n              _context22.next = 16;\n              return this.directlySetCurrentUser(null);\n            case 16:\n            case \"end\":\n              return _context22.stop();\n          }\n        }, _callee22, this, [[0, 11]]);\n      }));\n      function initializeCurrentUserFromIdToken(_x50) {\n        return _initializeCurrentUserFromIdToken.apply(this, arguments);\n      }\n      return initializeCurrentUserFromIdToken;\n    }()\n  }, {\n    key: \"initializeCurrentUser\",\n    value: function () {\n      var _initializeCurrentUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee23(popupRedirectResolver) {\n        var _this5 = this;\n        var _a, idToken, previouslyStoredUser, futureCurrentUser, needsTocheckMiddleware, redirectUserEventId, storedUserEventId, result;\n        return _regeneratorRuntime().wrap(function _callee23$(_context23) {\n          while (1) switch (_context23.prev = _context23.next) {\n            case 0:\n              if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(this.app)) {\n                _context23.next = 7;\n                break;\n              }\n              idToken = this.app.settings.authIdToken;\n              if (!idToken) {\n                _context23.next = 6;\n                break;\n              }\n              return _context23.abrupt(\"return\", new Promise(function (resolve) {\n                setTimeout(function () {\n                  return _this5.initializeCurrentUserFromIdToken(idToken).then(resolve, resolve);\n                });\n              }));\n            case 6:\n              return _context23.abrupt(\"return\", this.directlySetCurrentUser(null));\n            case 7:\n              _context23.next = 9;\n              return this.assertedPersistence.getCurrentUser();\n            case 9:\n              previouslyStoredUser = _context23.sent;\n              futureCurrentUser = previouslyStoredUser;\n              needsTocheckMiddleware = false;\n              if (!(popupRedirectResolver && this.config.authDomain)) {\n                _context23.next = 21;\n                break;\n              }\n              _context23.next = 15;\n              return this.getOrInitRedirectPersistenceManager();\n            case 15:\n              redirectUserEventId = (_a = this.redirectUser) === null || _a === void 0 ? void 0 : _a._redirectEventId;\n              storedUserEventId = futureCurrentUser === null || futureCurrentUser === void 0 ? void 0 : futureCurrentUser._redirectEventId;\n              _context23.next = 19;\n              return this.tryRedirectSignIn(popupRedirectResolver);\n            case 19:\n              result = _context23.sent;\n              // If the stored user (i.e. the old \"currentUser\") has a redirectId that\n              // matches the redirect user, then we want to initially sign in with the\n              // new user object from result.\n              // TODO(samgho): More thoroughly test all of this\n              if ((!redirectUserEventId || redirectUserEventId === storedUserEventId) && (result === null || result === void 0 ? void 0 : result.user)) {\n                futureCurrentUser = result.user;\n                needsTocheckMiddleware = true;\n              }\n            case 21:\n              if (futureCurrentUser) {\n                _context23.next = 23;\n                break;\n              }\n              return _context23.abrupt(\"return\", this.directlySetCurrentUser(null));\n            case 23:\n              if (futureCurrentUser._redirectEventId) {\n                _context23.next = 39;\n                break;\n              }\n              if (!needsTocheckMiddleware) {\n                _context23.next = 34;\n                break;\n              }\n              _context23.prev = 25;\n              _context23.next = 28;\n              return this.beforeStateQueue.runMiddleware(futureCurrentUser);\n            case 28:\n              _context23.next = 34;\n              break;\n            case 30:\n              _context23.prev = 30;\n              _context23.t0 = _context23[\"catch\"](25);\n              futureCurrentUser = previouslyStoredUser;\n              // We know this is available since the bit is only set when the\n              // resolver is available\n              this._popupRedirectResolver._overrideRedirectResult(this, function () {\n                return Promise.reject(_context23.t0);\n              });\n            case 34:\n              if (!futureCurrentUser) {\n                _context23.next = 38;\n                break;\n              }\n              return _context23.abrupt(\"return\", this.reloadAndSetCurrentUserOrClear(futureCurrentUser));\n            case 38:\n              return _context23.abrupt(\"return\", this.directlySetCurrentUser(null));\n            case 39:\n              _assert(this._popupRedirectResolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              _context23.next = 42;\n              return this.getOrInitRedirectPersistenceManager();\n            case 42:\n              if (!(this.redirectUser && this.redirectUser._redirectEventId === futureCurrentUser._redirectEventId)) {\n                _context23.next = 44;\n                break;\n              }\n              return _context23.abrupt(\"return\", this.directlySetCurrentUser(futureCurrentUser));\n            case 44:\n              return _context23.abrupt(\"return\", this.reloadAndSetCurrentUserOrClear(futureCurrentUser));\n            case 45:\n            case \"end\":\n              return _context23.stop();\n          }\n        }, _callee23, this, [[25, 30]]);\n      }));\n      function initializeCurrentUser(_x51) {\n        return _initializeCurrentUser.apply(this, arguments);\n      }\n      return initializeCurrentUser;\n    }()\n  }, {\n    key: \"tryRedirectSignIn\",\n    value: function () {\n      var _tryRedirectSignIn = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee24(redirectResolver) {\n        var result;\n        return _regeneratorRuntime().wrap(function _callee24$(_context24) {\n          while (1) switch (_context24.prev = _context24.next) {\n            case 0:\n              // The redirect user needs to be checked (and signed in if available)\n              // during auth initialization. All of the normal sign in and link/reauth\n              // flows call back into auth and push things onto the promise queue. We\n              // need to await the result of the redirect sign in *inside the promise\n              // queue*. This presents a problem: we run into deadlock. See:\n              //    ┌> [Initialization] ─────┐\n              //    ┌> [<other queue tasks>] │\n              //    └─ [getRedirectResult] <─┘\n              //    where [] are tasks on the queue and arrows denote awaits\n              // Initialization will never complete because it's waiting on something\n              // that's waiting for initialization to complete!\n              //\n              // Instead, this method calls getRedirectResult() (stored in\n              // _completeRedirectFn) with an optional parameter that instructs all of\n              // the underlying auth operations to skip anything that mutates auth state.\n              result = null;\n              _context24.prev = 1;\n              _context24.next = 4;\n              return this._popupRedirectResolver._completeRedirectFn(this, redirectResolver, true);\n            case 4:\n              result = _context24.sent;\n              _context24.next = 11;\n              break;\n            case 7:\n              _context24.prev = 7;\n              _context24.t0 = _context24[\"catch\"](1);\n              _context24.next = 11;\n              return this._setRedirectUser(null);\n            case 11:\n              return _context24.abrupt(\"return\", result);\n            case 12:\n            case \"end\":\n              return _context24.stop();\n          }\n        }, _callee24, this, [[1, 7]]);\n      }));\n      function tryRedirectSignIn(_x52) {\n        return _tryRedirectSignIn.apply(this, arguments);\n      }\n      return tryRedirectSignIn;\n    }()\n  }, {\n    key: \"reloadAndSetCurrentUserOrClear\",\n    value: function () {\n      var _reloadAndSetCurrentUserOrClear = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee25(user) {\n        return _regeneratorRuntime().wrap(function _callee25$(_context25) {\n          while (1) switch (_context25.prev = _context25.next) {\n            case 0:\n              _context25.prev = 0;\n              _context25.next = 3;\n              return _reloadWithoutSaving(user);\n            case 3:\n              _context25.next = 9;\n              break;\n            case 5:\n              _context25.prev = 5;\n              _context25.t0 = _context25[\"catch\"](0);\n              if (!((_context25.t0 === null || _context25.t0 === void 0 ? void 0 : _context25.t0.code) !== \"auth/\".concat(\"network-request-failed\" /* AuthErrorCode.NETWORK_REQUEST_FAILED */))) {\n                _context25.next = 9;\n                break;\n              }\n              return _context25.abrupt(\"return\", this.directlySetCurrentUser(null));\n            case 9:\n              return _context25.abrupt(\"return\", this.directlySetCurrentUser(user));\n            case 10:\n            case \"end\":\n              return _context25.stop();\n          }\n        }, _callee25, this, [[0, 5]]);\n      }));\n      function reloadAndSetCurrentUserOrClear(_x53) {\n        return _reloadAndSetCurrentUserOrClear.apply(this, arguments);\n      }\n      return reloadAndSetCurrentUserOrClear;\n    }()\n  }, {\n    key: \"useDeviceLanguage\",\n    value: function useDeviceLanguage() {\n      this.languageCode = _getUserLanguage();\n    }\n  }, {\n    key: \"_delete\",\n    value: function () {\n      var _delete3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee26() {\n        return _regeneratorRuntime().wrap(function _callee26$(_context26) {\n          while (1) switch (_context26.prev = _context26.next) {\n            case 0:\n              this._deleted = true;\n            case 1:\n            case \"end\":\n              return _context26.stop();\n          }\n        }, _callee26, this);\n      }));\n      function _delete() {\n        return _delete3.apply(this, arguments);\n      }\n      return _delete;\n    }()\n  }, {\n    key: \"updateCurrentUser\",\n    value: function () {\n      var _updateCurrentUser2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee27(userExtern) {\n        var user;\n        return _regeneratorRuntime().wrap(function _callee27$(_context27) {\n          while (1) switch (_context27.prev = _context27.next) {\n            case 0:\n              if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(this.app)) {\n                _context27.next = 2;\n                break;\n              }\n              return _context27.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this)));\n            case 2:\n              // The public updateCurrentUser method needs to make a copy of the user,\n              // and also check that the project matches\n              user = userExtern ? (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(userExtern) : null;\n              if (user) {\n                _assert(user.auth.config.apiKey === this.config.apiKey, this, \"invalid-user-token\" /* AuthErrorCode.INVALID_AUTH */);\n              }\n              return _context27.abrupt(\"return\", this._updateCurrentUser(user && user._clone(this)));\n            case 5:\n            case \"end\":\n              return _context27.stop();\n          }\n        }, _callee27, this);\n      }));\n      function updateCurrentUser(_x54) {\n        return _updateCurrentUser2.apply(this, arguments);\n      }\n      return updateCurrentUser;\n    }()\n  }, {\n    key: \"_updateCurrentUser\",\n    value: function () {\n      var _updateCurrentUser3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee29(user) {\n        var _this6 = this;\n        var skipBeforeStateCallbacks,\n          _args29 = arguments;\n        return _regeneratorRuntime().wrap(function _callee29$(_context29) {\n          while (1) switch (_context29.prev = _context29.next) {\n            case 0:\n              skipBeforeStateCallbacks = _args29.length > 1 && _args29[1] !== undefined ? _args29[1] : false;\n              if (!this._deleted) {\n                _context29.next = 3;\n                break;\n              }\n              return _context29.abrupt(\"return\");\n            case 3:\n              if (user) {\n                _assert(this.tenantId === user.tenantId, this, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n              }\n              if (skipBeforeStateCallbacks) {\n                _context29.next = 7;\n                break;\n              }\n              _context29.next = 7;\n              return this.beforeStateQueue.runMiddleware(user);\n            case 7:\n              return _context29.abrupt(\"return\", this.queue(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee28() {\n                return _regeneratorRuntime().wrap(function _callee28$(_context28) {\n                  while (1) switch (_context28.prev = _context28.next) {\n                    case 0:\n                      _context28.next = 2;\n                      return _this6.directlySetCurrentUser(user);\n                    case 2:\n                      _this6.notifyAuthListeners();\n                    case 3:\n                    case \"end\":\n                      return _context28.stop();\n                  }\n                }, _callee28);\n              }))));\n            case 8:\n            case \"end\":\n              return _context29.stop();\n          }\n        }, _callee29, this);\n      }));\n      function _updateCurrentUser(_x55) {\n        return _updateCurrentUser3.apply(this, arguments);\n      }\n      return _updateCurrentUser;\n    }()\n  }, {\n    key: \"signOut\",\n    value: function () {\n      var _signOut = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee30() {\n        return _regeneratorRuntime().wrap(function _callee30$(_context30) {\n          while (1) switch (_context30.prev = _context30.next) {\n            case 0:\n              if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(this.app)) {\n                _context30.next = 2;\n                break;\n              }\n              return _context30.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this)));\n            case 2:\n              _context30.next = 4;\n              return this.beforeStateQueue.runMiddleware(null);\n            case 4:\n              if (!(this.redirectPersistenceManager || this._popupRedirectResolver)) {\n                _context30.next = 7;\n                break;\n              }\n              _context30.next = 7;\n              return this._setRedirectUser(null);\n            case 7:\n              return _context30.abrupt(\"return\", this._updateCurrentUser(null, /* skipBeforeStateCallbacks */true));\n            case 8:\n            case \"end\":\n              return _context30.stop();\n          }\n        }, _callee30, this);\n      }));\n      function signOut() {\n        return _signOut.apply(this, arguments);\n      }\n      return signOut;\n    }()\n  }, {\n    key: \"setPersistence\",\n    value: function setPersistence(persistence) {\n      var _this7 = this;\n      if ((0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(this.app)) {\n        return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(this));\n      }\n      return this.queue(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee31() {\n        return _regeneratorRuntime().wrap(function _callee31$(_context31) {\n          while (1) switch (_context31.prev = _context31.next) {\n            case 0:\n              _context31.next = 2;\n              return _this7.assertedPersistence.setPersistence(_getInstance(persistence));\n            case 2:\n            case \"end\":\n              return _context31.stop();\n          }\n        }, _callee31);\n      })));\n    }\n  }, {\n    key: \"_getRecaptchaConfig\",\n    value: function _getRecaptchaConfig() {\n      if (this.tenantId == null) {\n        return this._agentRecaptchaConfig;\n      } else {\n        return this._tenantRecaptchaConfigs[this.tenantId];\n      }\n    }\n  }, {\n    key: \"validatePassword\",\n    value: function () {\n      var _validatePassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee32(password) {\n        var passwordPolicy;\n        return _regeneratorRuntime().wrap(function _callee32$(_context32) {\n          while (1) switch (_context32.prev = _context32.next) {\n            case 0:\n              if (this._getPasswordPolicyInternal()) {\n                _context32.next = 3;\n                break;\n              }\n              _context32.next = 3;\n              return this._updatePasswordPolicy();\n            case 3:\n              // Password policy will be defined after fetching.\n              passwordPolicy = this._getPasswordPolicyInternal(); // Check that the policy schema version is supported by the SDK.\n              // TODO: Update this logic to use a max supported policy schema version once we have multiple schema versions.\n              if (!(passwordPolicy.schemaVersion !== this.EXPECTED_PASSWORD_POLICY_SCHEMA_VERSION)) {\n                _context32.next = 6;\n                break;\n              }\n              return _context32.abrupt(\"return\", Promise.reject(this._errorFactory.create(\"unsupported-password-policy-schema-version\" /* AuthErrorCode.UNSUPPORTED_PASSWORD_POLICY_SCHEMA_VERSION */, {})));\n            case 6:\n              return _context32.abrupt(\"return\", passwordPolicy.validatePassword(password));\n            case 7:\n            case \"end\":\n              return _context32.stop();\n          }\n        }, _callee32, this);\n      }));\n      function validatePassword(_x56) {\n        return _validatePassword.apply(this, arguments);\n      }\n      return validatePassword;\n    }()\n  }, {\n    key: \"_getPasswordPolicyInternal\",\n    value: function _getPasswordPolicyInternal() {\n      if (this.tenantId === null) {\n        return this._projectPasswordPolicy;\n      } else {\n        return this._tenantPasswordPolicies[this.tenantId];\n      }\n    }\n  }, {\n    key: \"_updatePasswordPolicy\",\n    value: function () {\n      var _updatePasswordPolicy2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee33() {\n        var response, passwordPolicy;\n        return _regeneratorRuntime().wrap(function _callee33$(_context33) {\n          while (1) switch (_context33.prev = _context33.next) {\n            case 0:\n              _context33.next = 2;\n              return _getPasswordPolicy(this);\n            case 2:\n              response = _context33.sent;\n              passwordPolicy = new PasswordPolicyImpl(response);\n              if (this.tenantId === null) {\n                this._projectPasswordPolicy = passwordPolicy;\n              } else {\n                this._tenantPasswordPolicies[this.tenantId] = passwordPolicy;\n              }\n            case 5:\n            case \"end\":\n              return _context33.stop();\n          }\n        }, _callee33, this);\n      }));\n      function _updatePasswordPolicy() {\n        return _updatePasswordPolicy2.apply(this, arguments);\n      }\n      return _updatePasswordPolicy;\n    }()\n  }, {\n    key: \"_getPersistence\",\n    value: function _getPersistence() {\n      return this.assertedPersistence.persistence.type;\n    }\n  }, {\n    key: \"_updateErrorMap\",\n    value: function _updateErrorMap(errorMap) {\n      this._errorFactory = new _firebase_util__WEBPACK_IMPORTED_MODULE_1__.ErrorFactory('auth', 'Firebase', errorMap());\n    }\n  }, {\n    key: \"onAuthStateChanged\",\n    value: function onAuthStateChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.authStateSubscription, nextOrObserver, error, completed);\n    }\n  }, {\n    key: \"beforeAuthStateChanged\",\n    value: function beforeAuthStateChanged(callback, onAbort) {\n      return this.beforeStateQueue.pushCallback(callback, onAbort);\n    }\n  }, {\n    key: \"onIdTokenChanged\",\n    value: function onIdTokenChanged(nextOrObserver, error, completed) {\n      return this.registerStateListener(this.idTokenSubscription, nextOrObserver, error, completed);\n    }\n  }, {\n    key: \"authStateReady\",\n    value: function authStateReady() {\n      var _this8 = this;\n      return new Promise(function (resolve, reject) {\n        if (_this8.currentUser) {\n          resolve();\n        } else {\n          var unsubscribe = _this8.onAuthStateChanged(function () {\n            unsubscribe();\n            resolve();\n          }, reject);\n        }\n      });\n    }\n    /**\r\n     * Revokes the given access token. Currently only supports Apple OAuth access tokens.\r\n     */\n  }, {\n    key: \"revokeAccessToken\",\n    value: (function () {\n      var _revokeAccessToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee34(token) {\n        var idToken, request;\n        return _regeneratorRuntime().wrap(function _callee34$(_context34) {\n          while (1) switch (_context34.prev = _context34.next) {\n            case 0:\n              if (!this.currentUser) {\n                _context34.next = 8;\n                break;\n              }\n              _context34.next = 3;\n              return this.currentUser.getIdToken();\n            case 3:\n              idToken = _context34.sent;\n              // Generalize this to accept other providers once supported.\n              request = {\n                providerId: 'apple.com',\n                tokenType: \"ACCESS_TOKEN\" /* TokenType.ACCESS_TOKEN */,\n                token: token,\n                idToken: idToken\n              };\n              if (this.tenantId != null) {\n                request.tenantId = this.tenantId;\n              }\n              _context34.next = 8;\n              return revokeToken(this, request);\n            case 8:\n            case \"end\":\n              return _context34.stop();\n          }\n        }, _callee34, this);\n      }));\n      function revokeAccessToken(_x57) {\n        return _revokeAccessToken.apply(this, arguments);\n      }\n      return revokeAccessToken;\n    }())\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var _a;\n      return {\n        apiKey: this.config.apiKey,\n        authDomain: this.config.authDomain,\n        appName: this.name,\n        currentUser: (_a = this._currentUser) === null || _a === void 0 ? void 0 : _a.toJSON()\n      };\n    }\n  }, {\n    key: \"_setRedirectUser\",\n    value: function () {\n      var _setRedirectUser2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee35(user, popupRedirectResolver) {\n        var redirectManager;\n        return _regeneratorRuntime().wrap(function _callee35$(_context35) {\n          while (1) switch (_context35.prev = _context35.next) {\n            case 0:\n              _context35.next = 2;\n              return this.getOrInitRedirectPersistenceManager(popupRedirectResolver);\n            case 2:\n              redirectManager = _context35.sent;\n              return _context35.abrupt(\"return\", user === null ? redirectManager.removeCurrentUser() : redirectManager.setCurrentUser(user));\n            case 4:\n            case \"end\":\n              return _context35.stop();\n          }\n        }, _callee35, this);\n      }));\n      function _setRedirectUser(_x58, _x59) {\n        return _setRedirectUser2.apply(this, arguments);\n      }\n      return _setRedirectUser;\n    }()\n  }, {\n    key: \"getOrInitRedirectPersistenceManager\",\n    value: function () {\n      var _getOrInitRedirectPersistenceManager = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee36(popupRedirectResolver) {\n        var resolver;\n        return _regeneratorRuntime().wrap(function _callee36$(_context36) {\n          while (1) switch (_context36.prev = _context36.next) {\n            case 0:\n              if (this.redirectPersistenceManager) {\n                _context36.next = 9;\n                break;\n              }\n              resolver = popupRedirectResolver && _getInstance(popupRedirectResolver) || this._popupRedirectResolver;\n              _assert(resolver, this, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              _context36.next = 5;\n              return PersistenceUserManager.create(this, [_getInstance(resolver._redirectPersistence)], \"redirectUser\" /* KeyName.REDIRECT_USER */);\n            case 5:\n              this.redirectPersistenceManager = _context36.sent;\n              _context36.next = 8;\n              return this.redirectPersistenceManager.getCurrentUser();\n            case 8:\n              this.redirectUser = _context36.sent;\n            case 9:\n              return _context36.abrupt(\"return\", this.redirectPersistenceManager);\n            case 10:\n            case \"end\":\n              return _context36.stop();\n          }\n        }, _callee36, this);\n      }));\n      function getOrInitRedirectPersistenceManager(_x60) {\n        return _getOrInitRedirectPersistenceManager.apply(this, arguments);\n      }\n      return getOrInitRedirectPersistenceManager;\n    }()\n  }, {\n    key: \"_redirectUserForId\",\n    value: function () {\n      var _redirectUserForId2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee38(id) {\n        var _a, _b;\n        return _regeneratorRuntime().wrap(function _callee38$(_context38) {\n          while (1) switch (_context38.prev = _context38.next) {\n            case 0:\n              if (!this._isInitialized) {\n                _context38.next = 3;\n                break;\n              }\n              _context38.next = 3;\n              return this.queue(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee37() {\n                return _regeneratorRuntime().wrap(function _callee37$(_context37) {\n                  while (1) switch (_context37.prev = _context37.next) {\n                    case 0:\n                    case \"end\":\n                      return _context37.stop();\n                  }\n                }, _callee37);\n              })));\n            case 3:\n              if (!(((_a = this._currentUser) === null || _a === void 0 ? void 0 : _a._redirectEventId) === id)) {\n                _context38.next = 5;\n                break;\n              }\n              return _context38.abrupt(\"return\", this._currentUser);\n            case 5:\n              if (!(((_b = this.redirectUser) === null || _b === void 0 ? void 0 : _b._redirectEventId) === id)) {\n                _context38.next = 7;\n                break;\n              }\n              return _context38.abrupt(\"return\", this.redirectUser);\n            case 7:\n              return _context38.abrupt(\"return\", null);\n            case 8:\n            case \"end\":\n              return _context38.stop();\n          }\n        }, _callee38, this);\n      }));\n      function _redirectUserForId(_x61) {\n        return _redirectUserForId2.apply(this, arguments);\n      }\n      return _redirectUserForId;\n    }()\n  }, {\n    key: \"_persistUserIfCurrent\",\n    value: function () {\n      var _persistUserIfCurrent2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee40(user) {\n        var _this9 = this;\n        return _regeneratorRuntime().wrap(function _callee40$(_context40) {\n          while (1) switch (_context40.prev = _context40.next) {\n            case 0:\n              if (!(user === this.currentUser)) {\n                _context40.next = 2;\n                break;\n              }\n              return _context40.abrupt(\"return\", this.queue(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee39() {\n                return _regeneratorRuntime().wrap(function _callee39$(_context39) {\n                  while (1) switch (_context39.prev = _context39.next) {\n                    case 0:\n                      return _context39.abrupt(\"return\", _this9.directlySetCurrentUser(user));\n                    case 1:\n                    case \"end\":\n                      return _context39.stop();\n                  }\n                }, _callee39);\n              }))));\n            case 2:\n            case \"end\":\n              return _context40.stop();\n          }\n        }, _callee40, this);\n      }));\n      function _persistUserIfCurrent(_x62) {\n        return _persistUserIfCurrent2.apply(this, arguments);\n      }\n      return _persistUserIfCurrent;\n    }() /** Notifies listeners only if the user is current */\n  }, {\n    key: \"_notifyListenersIfCurrent\",\n    value: function _notifyListenersIfCurrent(user) {\n      if (user === this.currentUser) {\n        this.notifyAuthListeners();\n      }\n    }\n  }, {\n    key: \"_key\",\n    value: function _key() {\n      return \"\".concat(this.config.authDomain, \":\").concat(this.config.apiKey, \":\").concat(this.name);\n    }\n  }, {\n    key: \"_startProactiveRefresh\",\n    value: function _startProactiveRefresh() {\n      this.isProactiveRefreshEnabled = true;\n      if (this.currentUser) {\n        this._currentUser._startProactiveRefresh();\n      }\n    }\n  }, {\n    key: \"_stopProactiveRefresh\",\n    value: function _stopProactiveRefresh() {\n      this.isProactiveRefreshEnabled = false;\n      if (this.currentUser) {\n        this._currentUser._stopProactiveRefresh();\n      }\n    }\n    /** Returns the current user cast as the internal type */\n  }, {\n    key: \"_currentUser\",\n    get: function get() {\n      return this.currentUser;\n    }\n  }, {\n    key: \"notifyAuthListeners\",\n    value: function notifyAuthListeners() {\n      var _a, _b;\n      if (!this._isInitialized) {\n        return;\n      }\n      this.idTokenSubscription.next(this.currentUser);\n      var currentUid = (_b = (_a = this.currentUser) === null || _a === void 0 ? void 0 : _a.uid) !== null && _b !== void 0 ? _b : null;\n      if (this.lastNotifiedUid !== currentUid) {\n        this.lastNotifiedUid = currentUid;\n        this.authStateSubscription.next(this.currentUser);\n      }\n    }\n  }, {\n    key: \"registerStateListener\",\n    value: function registerStateListener(subscription, nextOrObserver, error, completed) {\n      var _this10 = this;\n      if (this._deleted) {\n        return function () {};\n      }\n      var cb = typeof nextOrObserver === 'function' ? nextOrObserver : nextOrObserver.next.bind(nextOrObserver);\n      var isUnsubscribed = false;\n      var promise = this._isInitialized ? Promise.resolve() : this._initializationPromise;\n      _assert(promise, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      // The callback needs to be called asynchronously per the spec.\n      // eslint-disable-next-line @typescript-eslint/no-floating-promises\n      promise.then(function () {\n        if (isUnsubscribed) {\n          return;\n        }\n        cb(_this10.currentUser);\n      });\n      if (typeof nextOrObserver === 'function') {\n        var unsubscribe = subscription.addObserver(nextOrObserver, error, completed);\n        return function () {\n          isUnsubscribed = true;\n          unsubscribe();\n        };\n      } else {\n        var _unsubscribe = subscription.addObserver(nextOrObserver);\n        return function () {\n          isUnsubscribed = true;\n          _unsubscribe();\n        };\n      }\n    }\n    /**\r\n     * Unprotected (from race conditions) method to set the current user. This\r\n     * should only be called from within a queued callback. This is necessary\r\n     * because the queue shouldn't rely on another queued callback.\r\n     */\n  }, {\n    key: \"directlySetCurrentUser\",\n    value: (function () {\n      var _directlySetCurrentUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee41(user) {\n        return _regeneratorRuntime().wrap(function _callee41$(_context41) {\n          while (1) switch (_context41.prev = _context41.next) {\n            case 0:\n              if (this.currentUser && this.currentUser !== user) {\n                this._currentUser._stopProactiveRefresh();\n              }\n              if (user && this.isProactiveRefreshEnabled) {\n                user._startProactiveRefresh();\n              }\n              this.currentUser = user;\n              if (!user) {\n                _context41.next = 8;\n                break;\n              }\n              _context41.next = 6;\n              return this.assertedPersistence.setCurrentUser(user);\n            case 6:\n              _context41.next = 10;\n              break;\n            case 8:\n              _context41.next = 10;\n              return this.assertedPersistence.removeCurrentUser();\n            case 10:\n            case \"end\":\n              return _context41.stop();\n          }\n        }, _callee41, this);\n      }));\n      function directlySetCurrentUser(_x63) {\n        return _directlySetCurrentUser.apply(this, arguments);\n      }\n      return directlySetCurrentUser;\n    }())\n  }, {\n    key: \"queue\",\n    value: function queue(action) {\n      // In case something errors, the callback still should be called in order\n      // to keep the promise chain alive\n      this.operations = this.operations.then(action, action);\n      return this.operations;\n    }\n  }, {\n    key: \"assertedPersistence\",\n    get: function get() {\n      _assert(this.persistenceManager, this, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.persistenceManager;\n    }\n  }, {\n    key: \"_logFramework\",\n    value: function _logFramework(framework) {\n      if (!framework || this.frameworks.includes(framework)) {\n        return;\n      }\n      this.frameworks.push(framework);\n      // Sort alphabetically so that \"FirebaseCore-web,FirebaseUI-web\" and\n      // \"FirebaseUI-web,FirebaseCore-web\" aren't viewed as different.\n      this.frameworks.sort();\n      this.clientVersion = _getClientVersion(this.config.clientPlatform, this._getFrameworks());\n    }\n  }, {\n    key: \"_getFrameworks\",\n    value: function _getFrameworks() {\n      return this.frameworks;\n    }\n  }, {\n    key: \"_getAdditionalHeaders\",\n    value: function () {\n      var _getAdditionalHeaders2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee42() {\n        var _a, headers, heartbeatsHeader, appCheckToken;\n        return _regeneratorRuntime().wrap(function _callee42$(_context42) {\n          while (1) switch (_context42.prev = _context42.next) {\n            case 0:\n              // Additional headers on every request\n              headers = _defineProperty({}, \"X-Client-Version\" /* HttpHeader.X_CLIENT_VERSION */, this.clientVersion);\n              if (this.app.options.appId) {\n                headers[\"X-Firebase-gmpid\" /* HttpHeader.X_FIREBASE_GMPID */] = this.app.options.appId;\n              }\n              // If the heartbeat service exists, add the heartbeat string\n              _context42.next = 4;\n              return (_a = this.heartbeatServiceProvider.getImmediate({\n                optional: true\n              })) === null || _a === void 0 ? void 0 : _a.getHeartbeatsHeader();\n            case 4:\n              heartbeatsHeader = _context42.sent;\n              if (heartbeatsHeader) {\n                headers[\"X-Firebase-Client\" /* HttpHeader.X_FIREBASE_CLIENT */] = heartbeatsHeader;\n              }\n              // If the App Check service exists, add the App Check token in the headers\n              _context42.next = 8;\n              return this._getAppCheckToken();\n            case 8:\n              appCheckToken = _context42.sent;\n              if (appCheckToken) {\n                headers[\"X-Firebase-AppCheck\" /* HttpHeader.X_FIREBASE_APP_CHECK */] = appCheckToken;\n              }\n              return _context42.abrupt(\"return\", headers);\n            case 11:\n            case \"end\":\n              return _context42.stop();\n          }\n        }, _callee42, this);\n      }));\n      function _getAdditionalHeaders() {\n        return _getAdditionalHeaders2.apply(this, arguments);\n      }\n      return _getAdditionalHeaders;\n    }()\n  }, {\n    key: \"_getAppCheckToken\",\n    value: function () {\n      var _getAppCheckToken2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee43() {\n        var _a, appCheckTokenResult;\n        return _regeneratorRuntime().wrap(function _callee43$(_context43) {\n          while (1) switch (_context43.prev = _context43.next) {\n            case 0:\n              _context43.next = 2;\n              return (_a = this.appCheckServiceProvider.getImmediate({\n                optional: true\n              })) === null || _a === void 0 ? void 0 : _a.getToken();\n            case 2:\n              appCheckTokenResult = _context43.sent;\n              if (appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.error) {\n                // Context: appCheck.getToken() will never throw even if an error happened.\n                // In the error case, a dummy token will be returned along with an error field describing\n                // the error. In general, we shouldn't care about the error condition and just use\n                // the token (actual or dummy) to send requests.\n                _logWarn(\"Error while retrieving App Check token: \".concat(appCheckTokenResult.error));\n              }\n              return _context43.abrupt(\"return\", appCheckTokenResult === null || appCheckTokenResult === void 0 ? void 0 : appCheckTokenResult.token);\n            case 5:\n            case \"end\":\n              return _context43.stop();\n          }\n        }, _callee43, this);\n      }));\n      function _getAppCheckToken() {\n        return _getAppCheckToken2.apply(this, arguments);\n      }\n      return _getAppCheckToken;\n    }()\n  }]);\n}();\n/**\r\n * Method to be used to cast down to our private implementation of Auth.\r\n * It will also handle unwrapping from the compat type if necessary\r\n *\r\n * @param auth Auth object passed in from developer\r\n */\nfunction _castAuth(auth) {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth);\n}\n/** Helper class to wrap subscriber logic */\nvar Subscription = /*#__PURE__*/function () {\n  function Subscription(auth) {\n    var _this11 = this;\n    _classCallCheck(this, Subscription);\n    this.auth = auth;\n    this.observer = null;\n    this.addObserver = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.createSubscribe)(function (observer) {\n      return _this11.observer = observer;\n    });\n  }\n  return _createClass(Subscription, [{\n    key: \"next\",\n    get: function get() {\n      _assert(this.observer, this.auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      return this.observer.next.bind(this.observer);\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar externalJSProvider = {\n  loadJS: function loadJS() {\n    return _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee44() {\n      return _regeneratorRuntime().wrap(function _callee44$(_context44) {\n        while (1) switch (_context44.prev = _context44.next) {\n          case 0:\n            throw new Error('Unable to load external scripts');\n          case 1:\n          case \"end\":\n            return _context44.stop();\n        }\n      }, _callee44);\n    }))();\n  },\n  recaptchaV2Script: '',\n  recaptchaEnterpriseScript: '',\n  gapiScript: ''\n};\nfunction _loadJS(url) {\n  return externalJSProvider.loadJS(url);\n}\nfunction _recaptchaEnterpriseScriptUrl() {\n  return externalJSProvider.recaptchaEnterpriseScript;\n}\n\n/* eslint-disable @typescript-eslint/no-require-imports */\nvar RECAPTCHA_ENTERPRISE_VERIFIER_TYPE = 'recaptcha-enterprise';\nvar FAKE_TOKEN = 'NO_RECAPTCHA';\nvar RecaptchaEnterpriseVerifier = /*#__PURE__*/function () {\n  /**\r\n   *\r\n   * @param authExtern - The corresponding Firebase {@link Auth} instance.\r\n   *\r\n   */\n  function RecaptchaEnterpriseVerifier(authExtern) {\n    _classCallCheck(this, RecaptchaEnterpriseVerifier);\n    /**\r\n     * Identifies the type of application verifier (e.g. \"recaptcha-enterprise\").\r\n     */\n    this.type = RECAPTCHA_ENTERPRISE_VERIFIER_TYPE;\n    this.auth = _castAuth(authExtern);\n  }\n  /**\r\n   * Executes the verification process.\r\n   *\r\n   * @returns A Promise for a token that can be used to assert the validity of a request.\r\n   */\n  return _createClass(RecaptchaEnterpriseVerifier, [{\n    key: \"verify\",\n    value: (function () {\n      var _verify = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee47() {\n        var _this12 = this;\n        var action,\n          forceRefresh,\n          retrieveSiteKey,\n          _retrieveSiteKey,\n          retrieveRecaptchaToken,\n          _args47 = arguments;\n        return _regeneratorRuntime().wrap(function _callee47$(_context47) {\n          while (1) switch (_context47.prev = _context47.next) {\n            case 0:\n              retrieveRecaptchaToken = function _retrieveRecaptchaTok(siteKey, resolve, reject) {\n                var grecaptcha = window.grecaptcha;\n                if (isEnterprise(grecaptcha)) {\n                  grecaptcha.enterprise.ready(function () {\n                    grecaptcha.enterprise.execute(siteKey, {\n                      action: action\n                    }).then(function (token) {\n                      resolve(token);\n                    })[\"catch\"](function () {\n                      resolve(FAKE_TOKEN);\n                    });\n                  });\n                } else {\n                  reject(Error('No reCAPTCHA enterprise script loaded.'));\n                }\n              };\n              _retrieveSiteKey = function _retrieveSiteKey3() {\n                _retrieveSiteKey = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee46(auth) {\n                  return _regeneratorRuntime().wrap(function _callee46$(_context46) {\n                    while (1) switch (_context46.prev = _context46.next) {\n                      case 0:\n                        if (forceRefresh) {\n                          _context46.next = 5;\n                          break;\n                        }\n                        if (!(auth.tenantId == null && auth._agentRecaptchaConfig != null)) {\n                          _context46.next = 3;\n                          break;\n                        }\n                        return _context46.abrupt(\"return\", auth._agentRecaptchaConfig.siteKey);\n                      case 3:\n                        if (!(auth.tenantId != null && auth._tenantRecaptchaConfigs[auth.tenantId] !== undefined)) {\n                          _context46.next = 5;\n                          break;\n                        }\n                        return _context46.abrupt(\"return\", auth._tenantRecaptchaConfigs[auth.tenantId].siteKey);\n                      case 5:\n                        return _context46.abrupt(\"return\", new Promise(/*#__PURE__*/function () {\n                          var _ref12 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee45(resolve, reject) {\n                            return _regeneratorRuntime().wrap(function _callee45$(_context45) {\n                              while (1) switch (_context45.prev = _context45.next) {\n                                case 0:\n                                  getRecaptchaConfig(auth, {\n                                    clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n                                    version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n                                  }).then(function (response) {\n                                    if (response.recaptchaKey === undefined) {\n                                      reject(new Error('recaptcha Enterprise site key undefined'));\n                                    } else {\n                                      var config = new RecaptchaConfig(response);\n                                      if (auth.tenantId == null) {\n                                        auth._agentRecaptchaConfig = config;\n                                      } else {\n                                        auth._tenantRecaptchaConfigs[auth.tenantId] = config;\n                                      }\n                                      return resolve(config.siteKey);\n                                    }\n                                  })[\"catch\"](function (error) {\n                                    reject(error);\n                                  });\n                                case 1:\n                                case \"end\":\n                                  return _context45.stop();\n                              }\n                            }, _callee45);\n                          }));\n                          return function (_x65, _x66) {\n                            return _ref12.apply(this, arguments);\n                          };\n                        }()));\n                      case 6:\n                      case \"end\":\n                        return _context46.stop();\n                    }\n                  }, _callee46);\n                }));\n                return _retrieveSiteKey.apply(this, arguments);\n              };\n              retrieveSiteKey = function _retrieveSiteKey2(_x64) {\n                return _retrieveSiteKey.apply(this, arguments);\n              };\n              action = _args47.length > 0 && _args47[0] !== undefined ? _args47[0] : 'verify';\n              forceRefresh = _args47.length > 1 && _args47[1] !== undefined ? _args47[1] : false;\n              return _context47.abrupt(\"return\", new Promise(function (resolve, reject) {\n                retrieveSiteKey(_this12.auth).then(function (siteKey) {\n                  if (!forceRefresh && isEnterprise(window.grecaptcha)) {\n                    retrieveRecaptchaToken(siteKey, resolve, reject);\n                  } else {\n                    if (typeof window === 'undefined') {\n                      reject(new Error('RecaptchaVerifier is only supported in browser'));\n                      return;\n                    }\n                    var url = _recaptchaEnterpriseScriptUrl();\n                    if (url.length !== 0) {\n                      url += siteKey;\n                    }\n                    _loadJS(url).then(function () {\n                      retrieveRecaptchaToken(siteKey, resolve, reject);\n                    })[\"catch\"](function (error) {\n                      reject(error);\n                    });\n                  }\n                })[\"catch\"](function (error) {\n                  reject(error);\n                });\n              }));\n            case 6:\n            case \"end\":\n              return _context47.stop();\n          }\n        }, _callee47);\n      }));\n      function verify() {\n        return _verify.apply(this, arguments);\n      }\n      return verify;\n    }())\n  }]);\n}();\nfunction injectRecaptchaFields(_x67, _x68, _x69) {\n  return _injectRecaptchaFields.apply(this, arguments);\n}\nfunction _injectRecaptchaFields() {\n  _injectRecaptchaFields = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee79(auth, request, action) {\n    var captchaResp,\n      verifier,\n      captchaResponse,\n      newRequest,\n      _args79 = arguments;\n    return _regeneratorRuntime().wrap(function _callee79$(_context79) {\n      while (1) switch (_context79.prev = _context79.next) {\n        case 0:\n          captchaResp = _args79.length > 3 && _args79[3] !== undefined ? _args79[3] : false;\n          verifier = new RecaptchaEnterpriseVerifier(auth);\n          _context79.prev = 2;\n          _context79.next = 5;\n          return verifier.verify(action);\n        case 5:\n          captchaResponse = _context79.sent;\n          _context79.next = 13;\n          break;\n        case 8:\n          _context79.prev = 8;\n          _context79.t0 = _context79[\"catch\"](2);\n          _context79.next = 12;\n          return verifier.verify(action, true);\n        case 12:\n          captchaResponse = _context79.sent;\n        case 13:\n          newRequest = Object.assign({}, request);\n          if (!captchaResp) {\n            Object.assign(newRequest, {\n              captchaResponse: captchaResponse\n            });\n          } else {\n            Object.assign(newRequest, {\n              'captchaResp': captchaResponse\n            });\n          }\n          Object.assign(newRequest, {\n            'clientType': \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          });\n          Object.assign(newRequest, {\n            'recaptchaVersion': \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          });\n          return _context79.abrupt(\"return\", newRequest);\n        case 18:\n        case \"end\":\n          return _context79.stop();\n      }\n    }, _callee79, null, [[2, 8]]);\n  }));\n  return _injectRecaptchaFields.apply(this, arguments);\n}\nfunction handleRecaptchaFlow(_x70, _x71, _x72, _x73) {\n  return _handleRecaptchaFlow.apply(this, arguments);\n}\nfunction _handleRecaptchaFlow() {\n  _handleRecaptchaFlow = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee81(authInstance, request, actionName, actionMethod) {\n    var _a, requestWithRecaptcha;\n    return _regeneratorRuntime().wrap(function _callee81$(_context81) {\n      while (1) switch (_context81.prev = _context81.next) {\n        case 0:\n          if (!((_a = authInstance._getRecaptchaConfig()) === null || _a === void 0 ? void 0 : _a.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */))) {\n            _context81.next = 7;\n            break;\n          }\n          _context81.next = 3;\n          return injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n        case 3:\n          requestWithRecaptcha = _context81.sent;\n          return _context81.abrupt(\"return\", actionMethod(authInstance, requestWithRecaptcha));\n        case 7:\n          return _context81.abrupt(\"return\", actionMethod(authInstance, request)[\"catch\"](/*#__PURE__*/function () {\n            var _ref28 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee80(error) {\n              var _requestWithRecaptcha;\n              return _regeneratorRuntime().wrap(function _callee80$(_context80) {\n                while (1) switch (_context80.prev = _context80.next) {\n                  case 0:\n                    if (!(error.code === \"auth/\".concat(\"missing-recaptcha-token\" /* AuthErrorCode.MISSING_RECAPTCHA_TOKEN */))) {\n                      _context80.next = 8;\n                      break;\n                    }\n                    console.log(\"\".concat(actionName, \" is protected by reCAPTCHA Enterprise for this project. Automatically triggering the reCAPTCHA flow and restarting the flow.\"));\n                    _context80.next = 4;\n                    return injectRecaptchaFields(authInstance, request, actionName, actionName === \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */);\n                  case 4:\n                    _requestWithRecaptcha = _context80.sent;\n                    return _context80.abrupt(\"return\", actionMethod(authInstance, _requestWithRecaptcha));\n                  case 8:\n                    return _context80.abrupt(\"return\", Promise.reject(error));\n                  case 9:\n                  case \"end\":\n                    return _context80.stop();\n                }\n              }, _callee80);\n            }));\n            return function (_x194) {\n              return _ref28.apply(this, arguments);\n            };\n          }()));\n        case 8:\n        case \"end\":\n          return _context81.stop();\n      }\n    }, _callee81);\n  }));\n  return _handleRecaptchaFlow.apply(this, arguments);\n}\nfunction _initializeRecaptchaConfig(_x74) {\n  return _initializeRecaptchaConfig2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Initializes an {@link Auth} instance with fine-grained control over\r\n * {@link Dependencies}.\r\n *\r\n * @remarks\r\n *\r\n * This function allows more control over the {@link Auth} instance than\r\n * {@link getAuth}. `getAuth` uses platform-specific defaults to supply\r\n * the {@link Dependencies}. In general, `getAuth` is the easiest way to\r\n * initialize Auth and works for most use cases. Use `initializeAuth` if you\r\n * need control over which persistence layer is used, or to minimize bundle\r\n * size if you're not using either `signInWithPopup` or `signInWithRedirect`.\r\n *\r\n * For example, if your app only uses anonymous accounts and you only want\r\n * accounts saved for the current session, initialize `Auth` with:\r\n *\r\n * ```js\r\n * const auth = initializeAuth(app, {\r\n *   persistence: browserSessionPersistence,\r\n *   popupRedirectResolver: undefined,\r\n * });\r\n * ```\r\n *\r\n * @public\r\n */\nfunction _initializeRecaptchaConfig2() {\n  _initializeRecaptchaConfig2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee82(auth) {\n    var authInternal, response, config, verifier;\n    return _regeneratorRuntime().wrap(function _callee82$(_context82) {\n      while (1) switch (_context82.prev = _context82.next) {\n        case 0:\n          authInternal = _castAuth(auth);\n          _context82.next = 3;\n          return getRecaptchaConfig(authInternal, {\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */,\n            version: \"RECAPTCHA_ENTERPRISE\" /* RecaptchaVersion.ENTERPRISE */\n          });\n        case 3:\n          response = _context82.sent;\n          config = new RecaptchaConfig(response);\n          if (authInternal.tenantId == null) {\n            authInternal._agentRecaptchaConfig = config;\n          } else {\n            authInternal._tenantRecaptchaConfigs[authInternal.tenantId] = config;\n          }\n          if (config.isProviderEnabled(\"EMAIL_PASSWORD_PROVIDER\" /* RecaptchaProvider.EMAIL_PASSWORD_PROVIDER */)) {\n            verifier = new RecaptchaEnterpriseVerifier(authInternal);\n            void verifier.verify();\n          }\n        case 7:\n        case \"end\":\n          return _context82.stop();\n      }\n    }, _callee82);\n  }));\n  return _initializeRecaptchaConfig2.apply(this, arguments);\n}\nfunction initializeAuth(app, deps) {\n  var provider = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, 'auth');\n  if (provider.isInitialized()) {\n    var _auth2 = provider.getImmediate();\n    var initialOptions = provider.getOptions();\n    if ((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.deepEqual)(initialOptions, deps !== null && deps !== void 0 ? deps : {})) {\n      return _auth2;\n    } else {\n      _fail(_auth2, \"already-initialized\" /* AuthErrorCode.ALREADY_INITIALIZED */);\n    }\n  }\n  var auth = provider.initialize({\n    options: deps\n  });\n  return auth;\n}\nfunction _initializeAuthInstance(auth, deps) {\n  var persistence = (deps === null || deps === void 0 ? void 0 : deps.persistence) || [];\n  var hierarchy = (Array.isArray(persistence) ? persistence : [persistence]).map(_getInstance);\n  if (deps === null || deps === void 0 ? void 0 : deps.errorMap) {\n    auth._updateErrorMap(deps.errorMap);\n  }\n  // This promise is intended to float; auth initialization happens in the\n  // background, meanwhile the auth object may be used by the app.\n  // eslint-disable-next-line @typescript-eslint/no-floating-promises\n  auth._initializeWithPersistence(hierarchy, deps === null || deps === void 0 ? void 0 : deps.popupRedirectResolver);\n}\n\n/**\r\n * Changes the {@link Auth} instance to communicate with the Firebase Auth Emulator, instead of production\r\n * Firebase Auth services.\r\n *\r\n * @remarks\r\n * This must be called synchronously immediately following the first call to\r\n * {@link initializeAuth}.  Do not use with production credentials as emulator\r\n * traffic is not encrypted.\r\n *\r\n *\r\n * @example\r\n * ```javascript\r\n * connectAuthEmulator(auth, 'http://127.0.0.1:9099', { disableWarnings: true });\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param url - The URL at which the emulator is running (eg, 'http://localhost:9099').\r\n * @param options - Optional. `options.disableWarnings` defaults to `false`. Set it to\r\n * `true` to disable the warning banner attached to the DOM.\r\n *\r\n * @public\r\n */\nfunction connectAuthEmulator(auth, url, options) {\n  var authInternal = _castAuth(auth);\n  _assert(authInternal._canInitEmulator, authInternal, \"emulator-config-failed\" /* AuthErrorCode.EMULATOR_CONFIG_FAILED */);\n  _assert(/^https?:\\/\\//.test(url), authInternal, \"invalid-emulator-scheme\" /* AuthErrorCode.INVALID_EMULATOR_SCHEME */);\n  var disableWarnings = !!(options === null || options === void 0 ? void 0 : options.disableWarnings);\n  var protocol = extractProtocol(url);\n  var _extractHostAndPort = extractHostAndPort(url),\n    host = _extractHostAndPort.host,\n    port = _extractHostAndPort.port;\n  var portStr = port === null ? '' : \":\".concat(port);\n  // Always replace path with \"/\" (even if input url had no path at all, or had a different one).\n  authInternal.config.emulator = {\n    url: \"\".concat(protocol, \"//\").concat(host).concat(portStr, \"/\")\n  };\n  authInternal.settings.appVerificationDisabledForTesting = true;\n  authInternal.emulatorConfig = Object.freeze({\n    host: host,\n    port: port,\n    protocol: protocol.replace(':', ''),\n    options: Object.freeze({\n      disableWarnings: disableWarnings\n    })\n  });\n  if (!disableWarnings) {\n    emitEmulatorWarning();\n  }\n}\nfunction extractProtocol(url) {\n  var protocolEnd = url.indexOf(':');\n  return protocolEnd < 0 ? '' : url.substr(0, protocolEnd + 1);\n}\nfunction extractHostAndPort(url) {\n  var protocol = extractProtocol(url);\n  var authority = /(\\/\\/)?([^?#/]+)/.exec(url.substr(protocol.length)); // Between // and /, ? or #.\n  if (!authority) {\n    return {\n      host: '',\n      port: null\n    };\n  }\n  var hostAndPort = authority[2].split('@').pop() || ''; // Strip out \"username:password@\".\n  var bracketedIPv6 = /^(\\[[^\\]]+\\])(:|$)/.exec(hostAndPort);\n  if (bracketedIPv6) {\n    var host = bracketedIPv6[1];\n    return {\n      host: host,\n      port: parsePort(hostAndPort.substr(host.length + 1))\n    };\n  } else {\n    var _hostAndPort$split = hostAndPort.split(':'),\n      _hostAndPort$split2 = _slicedToArray(_hostAndPort$split, 2),\n      _host = _hostAndPort$split2[0],\n      port = _hostAndPort$split2[1];\n    return {\n      host: _host,\n      port: parsePort(port)\n    };\n  }\n}\nfunction parsePort(portStr) {\n  if (!portStr) {\n    return null;\n  }\n  var port = Number(portStr);\n  if (isNaN(port)) {\n    return null;\n  }\n  return port;\n}\nfunction emitEmulatorWarning() {\n  function attachBanner() {\n    var el = document.createElement('p');\n    var sty = el.style;\n    el.innerText = 'Running in emulator mode. Do not use with production credentials.';\n    sty.position = 'fixed';\n    sty.width = '100%';\n    sty.backgroundColor = '#ffffff';\n    sty.border = '.1em solid #000000';\n    sty.color = '#b50000';\n    sty.bottom = '0px';\n    sty.left = '0px';\n    sty.margin = '0px';\n    sty.zIndex = '10000';\n    sty.textAlign = 'center';\n    el.classList.add('firebase-emulator-warning');\n    document.body.appendChild(el);\n  }\n  if (typeof console !== 'undefined' && typeof console.info === 'function') {\n    console.info('WARNING: You are using the Auth Emulator,' + ' which is intended for local testing only.  Do not use with' + ' production credentials.');\n  }\n  if (typeof window !== 'undefined' && typeof document !== 'undefined') {\n    if (document.readyState === 'loading') {\n      window.addEventListener('DOMContentLoaded', attachBanner);\n    } else {\n      attachBanner();\n    }\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface that represents the credentials returned by an {@link AuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\nvar AuthCredential = /*#__PURE__*/function () {\n  /** @internal */\n  function AuthCredential(\n  /**\r\n   * The authentication provider ID for the credential.\r\n   *\r\n   * @remarks\r\n   * For example, 'facebook.com', or 'google.com'.\r\n   */\n  providerId,\n  /**\r\n   * The authentication sign in method for the credential.\r\n   *\r\n   * @remarks\r\n   * For example, {@link SignInMethod}.EMAIL_PASSWORD, or\r\n   * {@link SignInMethod}.EMAIL_LINK. This corresponds to the sign-in method\r\n   * identifier as returned in {@link fetchSignInMethodsForEmail}.\r\n   */\n  signInMethod) {\n    _classCallCheck(this, AuthCredential);\n    this.providerId = providerId;\n    this.signInMethod = signInMethod;\n  }\n  /**\r\n   * Returns a JSON-serializable representation of this object.\r\n   *\r\n   * @returns a JSON-serializable representation of this object.\r\n   */\n  return _createClass(AuthCredential, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n  }, {\n    key: \"_getIdTokenResponse\",\n    value: function _getIdTokenResponse(_auth) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n  }, {\n    key: \"_linkToIdToken\",\n    value: function _linkToIdToken(_auth, _idToken) {\n      return debugFail('not implemented');\n    }\n    /** @internal */\n  }, {\n    key: \"_getReauthenticationResolver\",\n    value: function _getReauthenticationResolver(_auth) {\n      return debugFail('not implemented');\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction resetPassword(_x75, _x76) {\n  return _resetPassword.apply(this, arguments);\n}\nfunction _resetPassword() {\n  _resetPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee83(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee83$(_context83) {\n      while (1) switch (_context83.prev = _context83.next) {\n        case 0:\n          return _context83.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:resetPassword\" /* Endpoint.RESET_PASSWORD */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context83.stop();\n      }\n    }, _callee83);\n  }));\n  return _resetPassword.apply(this, arguments);\n}\nfunction updateEmailPassword(_x77, _x78) {\n  return _updateEmailPassword.apply(this, arguments);\n} // Used for linking an email/password account to an existing idToken. Uses the same request/response\n// format as updateEmailPassword.\nfunction _updateEmailPassword() {\n  _updateEmailPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee84(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee84$(_context84) {\n      while (1) switch (_context84.prev = _context84.next) {\n        case 0:\n          return _context84.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request));\n        case 1:\n        case \"end\":\n          return _context84.stop();\n      }\n    }, _callee84);\n  }));\n  return _updateEmailPassword.apply(this, arguments);\n}\nfunction linkEmailPassword(_x79, _x80) {\n  return _linkEmailPassword.apply(this, arguments);\n}\nfunction _linkEmailPassword() {\n  _linkEmailPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee85(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee85$(_context85) {\n      while (1) switch (_context85.prev = _context85.next) {\n        case 0:\n          return _context85.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, request));\n        case 1:\n        case \"end\":\n          return _context85.stop();\n      }\n    }, _callee85);\n  }));\n  return _linkEmailPassword.apply(this, arguments);\n}\nfunction applyActionCode$1(_x81, _x82) {\n  return _applyActionCode$.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _applyActionCode$() {\n  _applyActionCode$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee86(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee86$(_context86) {\n      while (1) switch (_context86.prev = _context86.next) {\n        case 0:\n          return _context86.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context86.stop();\n      }\n    }, _callee86);\n  }));\n  return _applyActionCode$.apply(this, arguments);\n}\nfunction signInWithPassword(_x83, _x84) {\n  return _signInWithPassword.apply(this, arguments);\n}\nfunction _signInWithPassword() {\n  _signInWithPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee87(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee87$(_context87) {\n      while (1) switch (_context87.prev = _context87.next) {\n        case 0:\n          return _context87.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPassword\" /* Endpoint.SIGN_IN_WITH_PASSWORD */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context87.stop();\n      }\n    }, _callee87);\n  }));\n  return _signInWithPassword.apply(this, arguments);\n}\nfunction sendOobCode(_x85, _x86) {\n  return _sendOobCode.apply(this, arguments);\n}\nfunction _sendOobCode() {\n  _sendOobCode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee88(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee88$(_context88) {\n      while (1) switch (_context88.prev = _context88.next) {\n        case 0:\n          return _context88.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:sendOobCode\" /* Endpoint.SEND_OOB_CODE */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context88.stop();\n      }\n    }, _callee88);\n  }));\n  return _sendOobCode.apply(this, arguments);\n}\nfunction sendEmailVerification$1(_x87, _x88) {\n  return _sendEmailVerification$.apply(this, arguments);\n}\nfunction _sendEmailVerification$() {\n  _sendEmailVerification$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee89(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee89$(_context89) {\n      while (1) switch (_context89.prev = _context89.next) {\n        case 0:\n          return _context89.abrupt(\"return\", sendOobCode(auth, request));\n        case 1:\n        case \"end\":\n          return _context89.stop();\n      }\n    }, _callee89);\n  }));\n  return _sendEmailVerification$.apply(this, arguments);\n}\nfunction sendPasswordResetEmail$1(_x89, _x90) {\n  return _sendPasswordResetEmail$.apply(this, arguments);\n}\nfunction _sendPasswordResetEmail$() {\n  _sendPasswordResetEmail$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee90(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee90$(_context90) {\n      while (1) switch (_context90.prev = _context90.next) {\n        case 0:\n          return _context90.abrupt(\"return\", sendOobCode(auth, request));\n        case 1:\n        case \"end\":\n          return _context90.stop();\n      }\n    }, _callee90);\n  }));\n  return _sendPasswordResetEmail$.apply(this, arguments);\n}\nfunction sendSignInLinkToEmail$1(_x91, _x92) {\n  return _sendSignInLinkToEmail$.apply(this, arguments);\n}\nfunction _sendSignInLinkToEmail$() {\n  _sendSignInLinkToEmail$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee91(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee91$(_context91) {\n      while (1) switch (_context91.prev = _context91.next) {\n        case 0:\n          return _context91.abrupt(\"return\", sendOobCode(auth, request));\n        case 1:\n        case \"end\":\n          return _context91.stop();\n      }\n    }, _callee91);\n  }));\n  return _sendSignInLinkToEmail$.apply(this, arguments);\n}\nfunction verifyAndChangeEmail(_x93, _x94) {\n  return _verifyAndChangeEmail.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _verifyAndChangeEmail() {\n  _verifyAndChangeEmail = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee92(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee92$(_context92) {\n      while (1) switch (_context92.prev = _context92.next) {\n        case 0:\n          return _context92.abrupt(\"return\", sendOobCode(auth, request));\n        case 1:\n        case \"end\":\n          return _context92.stop();\n      }\n    }, _callee92);\n  }));\n  return _verifyAndChangeEmail.apply(this, arguments);\n}\nfunction signInWithEmailLink$1(_x95, _x96) {\n  return _signInWithEmailLink$.apply(this, arguments);\n}\nfunction _signInWithEmailLink$() {\n  _signInWithEmailLink$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee93(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee93$(_context93) {\n      while (1) switch (_context93.prev = _context93.next) {\n        case 0:\n          return _context93.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context93.stop();\n      }\n    }, _callee93);\n  }));\n  return _signInWithEmailLink$.apply(this, arguments);\n}\nfunction signInWithEmailLinkForLinking(_x97, _x98) {\n  return _signInWithEmailLinkForLinking.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Interface that represents the credentials returned by {@link EmailAuthProvider} for\r\n * {@link ProviderId}.PASSWORD\r\n *\r\n * @remarks\r\n * Covers both {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @public\r\n */\nfunction _signInWithEmailLinkForLinking() {\n  _signInWithEmailLinkForLinking = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee94(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee94$(_context94) {\n      while (1) switch (_context94.prev = _context94.next) {\n        case 0:\n          return _context94.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithEmailLink\" /* Endpoint.SIGN_IN_WITH_EMAIL_LINK */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context94.stop();\n      }\n    }, _callee94);\n  }));\n  return _signInWithEmailLinkForLinking.apply(this, arguments);\n}\nvar EmailAuthCredential = /*#__PURE__*/function (_AuthCredential) {\n  /** @internal */\n  function EmailAuthCredential(/** @internal */\n  _email, /** @internal */\n  _password, signInMethod) {\n    var _this13;\n    var _tenantId = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n    _classCallCheck(this, EmailAuthCredential);\n    _this13 = _callSuper(this, EmailAuthCredential, [\"password\" /* ProviderId.PASSWORD */, signInMethod]);\n    _this13._email = _email;\n    _this13._password = _password;\n    _this13._tenantId = _tenantId;\n    return _this13;\n  }\n  /** @internal */\n  _inherits(EmailAuthCredential, _AuthCredential);\n  return _createClass(EmailAuthCredential, [{\n    key: \"toJSON\",\n    value: /** {@inheritdoc AuthCredential.toJSON} */\n    function toJSON() {\n      return {\n        email: this._email,\n        password: this._password,\n        signInMethod: this.signInMethod,\n        tenantId: this._tenantId\n      };\n    }\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an {@link  AuthCredential}.\r\n     *\r\n     * @param json - Either `object` or the stringified representation of the object. When string is\r\n     * provided, `JSON.parse` would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link AuthCredential}, null is returned.\r\n     */\n  }, {\n    key: \"_getIdTokenResponse\",\n    value: (/** @internal */function () {\n      var _getIdTokenResponse2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee48(auth) {\n        var request;\n        return _regeneratorRuntime().wrap(function _callee48$(_context48) {\n          while (1) switch (_context48.prev = _context48.next) {\n            case 0:\n              _context48.t0 = this.signInMethod;\n              _context48.next = _context48.t0 === \"password\" /* SignInMethod.EMAIL_PASSWORD */ ? 3 : _context48.t0 === \"emailLink\" /* SignInMethod.EMAIL_LINK */ ? 5 : 6;\n              break;\n            case 3:\n              request = {\n                returnSecureToken: true,\n                email: this._email,\n                password: this._password,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              };\n              return _context48.abrupt(\"return\", handleRecaptchaFlow(auth, request, \"signInWithPassword\" /* RecaptchaActionName.SIGN_IN_WITH_PASSWORD */, signInWithPassword));\n            case 5:\n              return _context48.abrupt(\"return\", signInWithEmailLink$1(auth, {\n                email: this._email,\n                oobCode: this._password\n              }));\n            case 6:\n              _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            case 7:\n            case \"end\":\n              return _context48.stop();\n          }\n        }, _callee48, this);\n      }));\n      function _getIdTokenResponse(_x99) {\n        return _getIdTokenResponse2.apply(this, arguments);\n      }\n      return _getIdTokenResponse;\n    }() /** @internal */)\n  }, {\n    key: \"_linkToIdToken\",\n    value: (function () {\n      var _linkToIdToken2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee49(auth, idToken) {\n        var request;\n        return _regeneratorRuntime().wrap(function _callee49$(_context49) {\n          while (1) switch (_context49.prev = _context49.next) {\n            case 0:\n              _context49.t0 = this.signInMethod;\n              _context49.next = _context49.t0 === \"password\" /* SignInMethod.EMAIL_PASSWORD */ ? 3 : _context49.t0 === \"emailLink\" /* SignInMethod.EMAIL_LINK */ ? 5 : 6;\n              break;\n            case 3:\n              request = {\n                idToken: idToken,\n                returnSecureToken: true,\n                email: this._email,\n                password: this._password,\n                clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n              };\n              return _context49.abrupt(\"return\", handleRecaptchaFlow(auth, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, linkEmailPassword));\n            case 5:\n              return _context49.abrupt(\"return\", signInWithEmailLinkForLinking(auth, {\n                idToken: idToken,\n                email: this._email,\n                oobCode: this._password\n              }));\n            case 6:\n              _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n            case 7:\n            case \"end\":\n              return _context49.stop();\n          }\n        }, _callee49, this);\n      }));\n      function _linkToIdToken(_x100, _x101) {\n        return _linkToIdToken2.apply(this, arguments);\n      }\n      return _linkToIdToken;\n    }() /** @internal */)\n  }, {\n    key: \"_getReauthenticationResolver\",\n    value: function _getReauthenticationResolver(auth) {\n      return this._getIdTokenResponse(auth);\n    }\n  }], [{\n    key: \"_fromEmailAndPassword\",\n    value: function _fromEmailAndPassword(email, password) {\n      return new EmailAuthCredential(email, password, \"password\" /* SignInMethod.EMAIL_PASSWORD */);\n    }\n    /** @internal */\n  }, {\n    key: \"_fromEmailAndCode\",\n    value: function _fromEmailAndCode(email, oobCode) {\n      var tenantId = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      return new EmailAuthCredential(email, oobCode, \"emailLink\" /* SignInMethod.EMAIL_LINK */, tenantId);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var obj = typeof json === 'string' ? JSON.parse(json) : json;\n      if ((obj === null || obj === void 0 ? void 0 : obj.email) && (obj === null || obj === void 0 ? void 0 : obj.password)) {\n        if (obj.signInMethod === \"password\" /* SignInMethod.EMAIL_PASSWORD */) {\n          return this._fromEmailAndPassword(obj.email, obj.password);\n        } else if (obj.signInMethod === \"emailLink\" /* SignInMethod.EMAIL_LINK */) {\n          return this._fromEmailAndCode(obj.email, obj.password, obj.tenantId);\n        }\n      }\n      return null;\n    }\n  }]);\n}(AuthCredential);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signInWithIdp(_x102, _x103) {\n  return _signInWithIdp.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _signInWithIdp() {\n  _signInWithIdp = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee95(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee95$(_context95) {\n      while (1) switch (_context95.prev = _context95.next) {\n        case 0:\n          return _context95.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithIdp\" /* Endpoint.SIGN_IN_WITH_IDP */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context95.stop();\n      }\n    }, _callee95);\n  }));\n  return _signInWithIdp.apply(this, arguments);\n}\nvar IDP_REQUEST_URI$1 = 'http://localhost';\n/**\r\n * Represents the OAuth credentials returned by an {@link OAuthProvider}.\r\n *\r\n * @remarks\r\n * Implementations specify the details about each auth provider's credential requirements.\r\n *\r\n * @public\r\n */\nvar OAuthCredential = /*#__PURE__*/function (_AuthCredential2) {\n  function OAuthCredential() {\n    var _this14;\n    _classCallCheck(this, OAuthCredential);\n    _this14 = _callSuper(this, OAuthCredential, arguments);\n    _this14.pendingToken = null;\n    return _this14;\n  }\n  /** @internal */\n  _inherits(OAuthCredential, _AuthCredential2);\n  return _createClass(OAuthCredential, [{\n    key: \"toJSON\",\n    value: /** {@inheritdoc AuthCredential.toJSON}  */\n    function toJSON() {\n      return {\n        idToken: this.idToken,\n        accessToken: this.accessToken,\n        secret: this.secret,\n        nonce: this.nonce,\n        pendingToken: this.pendingToken,\n        providerId: this.providerId,\n        signInMethod: this.signInMethod\n      };\n    }\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\n  }, {\n    key: \"_getIdTokenResponse\",\n    value: /** @internal */\n    function _getIdTokenResponse(auth) {\n      var request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n  }, {\n    key: \"_linkToIdToken\",\n    value: function _linkToIdToken(auth, idToken) {\n      var request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n  }, {\n    key: \"_getReauthenticationResolver\",\n    value: function _getReauthenticationResolver(auth) {\n      var request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n  }, {\n    key: \"buildRequest\",\n    value: function buildRequest() {\n      var request = {\n        requestUri: IDP_REQUEST_URI$1,\n        returnSecureToken: true\n      };\n      if (this.pendingToken) {\n        request.pendingToken = this.pendingToken;\n      } else {\n        var postBody = {};\n        if (this.idToken) {\n          postBody['id_token'] = this.idToken;\n        }\n        if (this.accessToken) {\n          postBody['access_token'] = this.accessToken;\n        }\n        if (this.secret) {\n          postBody['oauth_token_secret'] = this.secret;\n        }\n        postBody['providerId'] = this.providerId;\n        if (this.nonce && !this.pendingToken) {\n          postBody['nonce'] = this.nonce;\n        }\n        request.postBody = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystring)(postBody);\n      }\n      return request;\n    }\n  }], [{\n    key: \"_fromParams\",\n    value: function _fromParams(params) {\n      var cred = new OAuthCredential(params.providerId, params.signInMethod);\n      if (params.idToken || params.accessToken) {\n        // OAuth 2 and either ID token or access token.\n        if (params.idToken) {\n          cred.idToken = params.idToken;\n        }\n        if (params.accessToken) {\n          cred.accessToken = params.accessToken;\n        }\n        // Add nonce if available and no pendingToken is present.\n        if (params.nonce && !params.pendingToken) {\n          cred.nonce = params.nonce;\n        }\n        if (params.pendingToken) {\n          cred.pendingToken = params.pendingToken;\n        }\n      } else if (params.oauthToken && params.oauthTokenSecret) {\n        // OAuth 1 and OAuth token with token secret\n        cred.accessToken = params.oauthToken;\n        cred.secret = params.oauthTokenSecret;\n      } else {\n        _fail(\"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      }\n      return cred;\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var obj = typeof json === 'string' ? JSON.parse(json) : json;\n      var providerId = obj.providerId,\n        signInMethod = obj.signInMethod,\n        rest = (0,tslib__WEBPACK_IMPORTED_MODULE_5__.__rest)(obj, [\"providerId\", \"signInMethod\"]);\n      if (!providerId || !signInMethod) {\n        return null;\n      }\n      var cred = new OAuthCredential(providerId, signInMethod);\n      cred.idToken = rest.idToken || undefined;\n      cred.accessToken = rest.accessToken || undefined;\n      cred.secret = rest.secret;\n      cred.nonce = rest.nonce;\n      cred.pendingToken = rest.pendingToken || null;\n      return cred;\n    }\n  }]);\n}(AuthCredential);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signInWithPhoneNumber$1(_x104, _x105) {\n  return _signInWithPhoneNumber$.apply(this, arguments);\n}\nfunction _signInWithPhoneNumber$() {\n  _signInWithPhoneNumber$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee96(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee96$(_context96) {\n      while (1) switch (_context96.prev = _context96.next) {\n        case 0:\n          return _context96.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context96.stop();\n      }\n    }, _callee96);\n  }));\n  return _signInWithPhoneNumber$.apply(this, arguments);\n}\nfunction linkWithPhoneNumber$1(_x106, _x107) {\n  return _linkWithPhoneNumber$.apply(this, arguments);\n}\nfunction _linkWithPhoneNumber$() {\n  _linkWithPhoneNumber$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee97(auth, request) {\n    var response;\n    return _regeneratorRuntime().wrap(function _callee97$(_context97) {\n      while (1) switch (_context97.prev = _context97.next) {\n        case 0:\n          _context97.next = 2;\n          return _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, request));\n        case 2:\n          response = _context97.sent;\n          if (!response.temporaryProof) {\n            _context97.next = 5;\n            break;\n          }\n          throw _makeTaggedError(auth, \"account-exists-with-different-credential\" /* AuthErrorCode.NEED_CONFIRMATION */, response);\n        case 5:\n          return _context97.abrupt(\"return\", response);\n        case 6:\n        case \"end\":\n          return _context97.stop();\n      }\n    }, _callee97);\n  }));\n  return _linkWithPhoneNumber$.apply(this, arguments);\n}\nvar VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_ = _defineProperty({}, \"USER_NOT_FOUND\" /* ServerError.USER_NOT_FOUND */, \"user-not-found\");\nfunction verifyPhoneNumberForExisting(_x108, _x109) {\n  return _verifyPhoneNumberForExisting.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Represents the credentials returned by {@link PhoneAuthProvider}.\r\n *\r\n * @public\r\n */\nfunction _verifyPhoneNumberForExisting() {\n  _verifyPhoneNumberForExisting = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee98(auth, request) {\n    var apiRequest;\n    return _regeneratorRuntime().wrap(function _callee98$(_context98) {\n      while (1) switch (_context98.prev = _context98.next) {\n        case 0:\n          apiRequest = Object.assign(Object.assign({}, request), {\n            operation: 'REAUTH'\n          });\n          return _context98.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithPhoneNumber\" /* Endpoint.SIGN_IN_WITH_PHONE_NUMBER */, _addTidIfNecessary(auth, apiRequest), VERIFY_PHONE_NUMBER_FOR_EXISTING_ERROR_MAP_));\n        case 2:\n        case \"end\":\n          return _context98.stop();\n      }\n    }, _callee98);\n  }));\n  return _verifyPhoneNumberForExisting.apply(this, arguments);\n}\nvar PhoneAuthCredential = /*#__PURE__*/function (_AuthCredential3) {\n  function PhoneAuthCredential(params) {\n    var _this15;\n    _classCallCheck(this, PhoneAuthCredential);\n    _this15 = _callSuper(this, PhoneAuthCredential, [\"phone\" /* ProviderId.PHONE */, \"phone\" /* SignInMethod.PHONE */]);\n    _this15.params = params;\n    return _this15;\n  }\n  /** @internal */\n  _inherits(PhoneAuthCredential, _AuthCredential3);\n  return _createClass(PhoneAuthCredential, [{\n    key: \"_getIdTokenResponse\",\n    value: /** @internal */\n    function _getIdTokenResponse(auth) {\n      return signInWithPhoneNumber$1(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n  }, {\n    key: \"_linkToIdToken\",\n    value: function _linkToIdToken(auth, idToken) {\n      return linkWithPhoneNumber$1(auth, Object.assign({\n        idToken: idToken\n      }, this._makeVerificationRequest()));\n    }\n    /** @internal */\n  }, {\n    key: \"_getReauthenticationResolver\",\n    value: function _getReauthenticationResolver(auth) {\n      return verifyPhoneNumberForExisting(auth, this._makeVerificationRequest());\n    }\n    /** @internal */\n  }, {\n    key: \"_makeVerificationRequest\",\n    value: function _makeVerificationRequest() {\n      var _this$params = this.params,\n        temporaryProof = _this$params.temporaryProof,\n        phoneNumber = _this$params.phoneNumber,\n        verificationId = _this$params.verificationId,\n        verificationCode = _this$params.verificationCode;\n      if (temporaryProof && phoneNumber) {\n        return {\n          temporaryProof: temporaryProof,\n          phoneNumber: phoneNumber\n        };\n      }\n      return {\n        sessionInfo: verificationId,\n        code: verificationCode\n      };\n    }\n    /** {@inheritdoc AuthCredential.toJSON} */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      var obj = {\n        providerId: this.providerId\n      };\n      if (this.params.phoneNumber) {\n        obj.phoneNumber = this.params.phoneNumber;\n      }\n      if (this.params.temporaryProof) {\n        obj.temporaryProof = this.params.temporaryProof;\n      }\n      if (this.params.verificationCode) {\n        obj.verificationCode = this.params.verificationCode;\n      }\n      if (this.params.verificationId) {\n        obj.verificationId = this.params.verificationId;\n      }\n      return obj;\n    }\n    /** Generates a phone credential based on a plain object or a JSON string. */\n  }], [{\n    key: \"_fromVerification\",\n    value: function _fromVerification(verificationId, verificationCode) {\n      return new PhoneAuthCredential({\n        verificationId: verificationId,\n        verificationCode: verificationCode\n      });\n    }\n    /** @internal */\n  }, {\n    key: \"_fromTokenResponse\",\n    value: function _fromTokenResponse(phoneNumber, temporaryProof) {\n      return new PhoneAuthCredential({\n        phoneNumber: phoneNumber,\n        temporaryProof: temporaryProof\n      });\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      if (typeof json === 'string') {\n        json = JSON.parse(json);\n      }\n      var _json = json,\n        verificationId = _json.verificationId,\n        verificationCode = _json.verificationCode,\n        phoneNumber = _json.phoneNumber,\n        temporaryProof = _json.temporaryProof;\n      if (!verificationCode && !verificationId && !phoneNumber && !temporaryProof) {\n        return null;\n      }\n      return new PhoneAuthCredential({\n        verificationId: verificationId,\n        verificationCode: verificationCode,\n        phoneNumber: phoneNumber,\n        temporaryProof: temporaryProof\n      });\n    }\n  }]);\n}(AuthCredential);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Maps the mode string in action code URL to Action Code Info operation.\r\n *\r\n * @param mode\r\n */\nfunction parseMode(mode) {\n  switch (mode) {\n    case 'recoverEmail':\n      return \"RECOVER_EMAIL\" /* ActionCodeOperation.RECOVER_EMAIL */;\n    case 'resetPassword':\n      return \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */;\n    case 'signIn':\n      return \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n    case 'verifyEmail':\n      return \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */;\n    case 'verifyAndChangeEmail':\n      return \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */;\n    case 'revertSecondFactorAddition':\n      return \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */;\n    default:\n      return null;\n  }\n}\n/**\r\n * Helper to parse FDL links\r\n *\r\n * @param url\r\n */\nfunction parseDeepLink(url) {\n  var link = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.extractQuerystring)(url))['link'];\n  // Double link case (automatic redirect).\n  var doubleDeepLink = link ? (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.extractQuerystring)(link))['deep_link_id'] : null;\n  // iOS custom scheme links.\n  var iOSDeepLink = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.extractQuerystring)(url))['deep_link_id'];\n  var iOSDoubleDeepLink = iOSDeepLink ? (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.extractQuerystring)(iOSDeepLink))['link'] : null;\n  return iOSDoubleDeepLink || iOSDeepLink || doubleDeepLink || link || url;\n}\n/**\r\n * A utility class to parse email action URLs such as password reset, email verification,\r\n * email link sign in, etc.\r\n *\r\n * @public\r\n */\nvar ActionCodeURL = /*#__PURE__*/function () {\n  /**\r\n   * @param actionLink - The link from which to extract the URL.\r\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n   *\r\n   * @internal\r\n   */\n  function ActionCodeURL(actionLink) {\n    _classCallCheck(this, ActionCodeURL);\n    var _a, _b, _c, _d, _e, _f;\n    var searchParams = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.querystringDecode)((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.extractQuerystring)(actionLink));\n    var apiKey = (_a = searchParams[\"apiKey\" /* QueryField.API_KEY */]) !== null && _a !== void 0 ? _a : null;\n    var code = (_b = searchParams[\"oobCode\" /* QueryField.CODE */]) !== null && _b !== void 0 ? _b : null;\n    var operation = parseMode((_c = searchParams[\"mode\" /* QueryField.MODE */]) !== null && _c !== void 0 ? _c : null);\n    // Validate API key, code and mode.\n    _assert(apiKey && code && operation, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    this.apiKey = apiKey;\n    this.operation = operation;\n    this.code = code;\n    this.continueUrl = (_d = searchParams[\"continueUrl\" /* QueryField.CONTINUE_URL */]) !== null && _d !== void 0 ? _d : null;\n    this.languageCode = (_e = searchParams[\"languageCode\" /* QueryField.LANGUAGE_CODE */]) !== null && _e !== void 0 ? _e : null;\n    this.tenantId = (_f = searchParams[\"tenantId\" /* QueryField.TENANT_ID */]) !== null && _f !== void 0 ? _f : null;\n  }\n  /**\r\n   * Parses the email action link string and returns an {@link ActionCodeURL} if the link is valid,\r\n   * otherwise returns null.\r\n   *\r\n   * @param link  - The email action link string.\r\n   * @returns The {@link ActionCodeURL} object, or null if the link is invalid.\r\n   *\r\n   * @public\r\n   */\n  return _createClass(ActionCodeURL, null, [{\n    key: \"parseLink\",\n    value: function parseLink(link) {\n      var actionLink = parseDeepLink(link);\n      try {\n        return new ActionCodeURL(actionLink);\n      } catch (_a) {\n        return null;\n      }\n    }\n  }]);\n}();\n/**\r\n * Parses the email action link string and returns an {@link ActionCodeURL} if\r\n * the link is valid, otherwise returns null.\r\n *\r\n * @public\r\n */\nfunction parseActionCodeURL(link) {\n  return ActionCodeURL.parseLink(link);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating {@link EmailAuthCredential}.\r\n *\r\n * @public\r\n */\nvar EmailAuthProvider = /*#__PURE__*/function () {\n  function EmailAuthProvider() {\n    _classCallCheck(this, EmailAuthProvider);\n    /**\r\n     * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n     */\n    this.providerId = EmailAuthProvider.PROVIDER_ID;\n  }\n  /**\r\n   * Initialize an {@link AuthCredential} using an email and password.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const authCredential = EmailAuthProvider.credential(email, password);\r\n   * const userCredential = await signInWithCredential(auth, authCredential);\r\n   * ```\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * const userCredential = await signInWithEmailAndPassword(auth, email, password);\r\n   * ```\r\n   *\r\n   * @param email - Email address.\r\n   * @param password - User account password.\r\n   * @returns The auth provider credential.\r\n   */\n  return _createClass(EmailAuthProvider, null, [{\n    key: \"credential\",\n    value: function credential(email, password) {\n      return EmailAuthCredential._fromEmailAndPassword(email, password);\n    }\n    /**\r\n     * Initialize an {@link AuthCredential} using an email and an email link after a sign in with\r\n     * email link operation.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * const authCredential = EmailAuthProvider.credentialWithLink(auth, email, emailLink);\r\n     * const userCredential = await signInWithCredential(auth, authCredential);\r\n     * ```\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * await sendSignInLinkToEmail(auth, email);\r\n     * // Obtain emailLink from user.\r\n     * const userCredential = await signInWithEmailLink(auth, email, emailLink);\r\n     * ```\r\n     *\r\n     * @param auth - The {@link Auth} instance used to verify the link.\r\n     * @param email - Email address.\r\n     * @param emailLink - Sign-in email link.\r\n     * @returns - The auth provider credential.\r\n     */\n  }, {\n    key: \"credentialWithLink\",\n    value: function credentialWithLink(email, emailLink) {\n      var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n      _assert(actionCodeUrl, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return EmailAuthCredential._fromEmailAndCode(email, actionCodeUrl.code, actionCodeUrl.tenantId);\n    }\n  }]);\n}();\n/**\r\n * Always set to {@link ProviderId}.PASSWORD, even for email link.\r\n */\nEmailAuthProvider.PROVIDER_ID = \"password\" /* ProviderId.PASSWORD */;\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_PASSWORD.\r\n */\nEmailAuthProvider.EMAIL_PASSWORD_SIGN_IN_METHOD = \"password\" /* SignInMethod.EMAIL_PASSWORD */;\n/**\r\n * Always set to {@link SignInMethod}.EMAIL_LINK.\r\n */\nEmailAuthProvider.EMAIL_LINK_SIGN_IN_METHOD = \"emailLink\" /* SignInMethod.EMAIL_LINK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * The base class for all Federated providers (OAuth (including OIDC), SAML).\r\n *\r\n * This class is not meant to be instantiated directly.\r\n *\r\n * @public\r\n */\nvar FederatedAuthProvider = /*#__PURE__*/function () {\n  /**\r\n   * Constructor for generic OAuth providers.\r\n   *\r\n   * @param providerId - Provider for which credentials should be generated.\r\n   */\n  function FederatedAuthProvider(providerId) {\n    _classCallCheck(this, FederatedAuthProvider);\n    this.providerId = providerId;\n    /** @internal */\n    this.defaultLanguageCode = null;\n    /** @internal */\n    this.customParameters = {};\n  }\n  /**\r\n   * Set the language gode.\r\n   *\r\n   * @param languageCode - language code\r\n   */\n  return _createClass(FederatedAuthProvider, [{\n    key: \"setDefaultLanguage\",\n    value: function setDefaultLanguage(languageCode) {\n      this.defaultLanguageCode = languageCode;\n    }\n    /**\r\n     * Sets the OAuth custom parameters to pass in an OAuth request for popup and redirect sign-in\r\n     * operations.\r\n     *\r\n     * @remarks\r\n     * For a detailed list, check the reserved required OAuth 2.0 parameters such as `client_id`,\r\n     * `redirect_uri`, `scope`, `response_type`, and `state` are not allowed and will be ignored.\r\n     *\r\n     * @param customOAuthParameters - The custom OAuth parameters to pass in the OAuth request.\r\n     */\n  }, {\n    key: \"setCustomParameters\",\n    value: function setCustomParameters(customOAuthParameters) {\n      this.customParameters = customOAuthParameters;\n      return this;\n    }\n    /**\r\n     * Retrieve the current list of {@link CustomParameters}.\r\n     */\n  }, {\n    key: \"getCustomParameters\",\n    value: function getCustomParameters() {\n      return this.customParameters;\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Common code to all OAuth providers. This is separate from the\r\n * {@link OAuthProvider} so that child providers (like\r\n * {@link GoogleAuthProvider}) don't inherit the `credential` instance method.\r\n * Instead, they rely on a static `credential` method.\r\n */\nvar BaseOAuthProvider = /*#__PURE__*/function (_FederatedAuthProvide) {\n  function BaseOAuthProvider() {\n    var _this16;\n    _classCallCheck(this, BaseOAuthProvider);\n    _this16 = _callSuper(this, BaseOAuthProvider, arguments);\n    /** @internal */\n    _this16.scopes = [];\n    return _this16;\n  }\n  /**\r\n   * Add an OAuth scope to the credential.\r\n   *\r\n   * @param scope - Provider OAuth scope to add.\r\n   */\n  _inherits(BaseOAuthProvider, _FederatedAuthProvide);\n  return _createClass(BaseOAuthProvider, [{\n    key: \"addScope\",\n    value: function addScope(scope) {\n      // If not already added, add scope to list.\n      if (!this.scopes.includes(scope)) {\n        this.scopes.push(scope);\n      }\n      return this;\n    }\n    /**\r\n     * Retrieve the current list of OAuth scopes.\r\n     */\n  }, {\n    key: \"getScopes\",\n    value: function getScopes() {\n      return _toConsumableArray(this.scopes);\n    }\n  }]);\n}(FederatedAuthProvider);\n/**\r\n * Provider for generating generic {@link OAuthCredential}.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new OAuthProvider('google.com');\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a OAuth Access Token for the provider.\r\n *   const credential = provider.credentialFromResult(auth, result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new OAuthProvider('google.com');\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a OAuth Access Token for the provider.\r\n * const credential = provider.credentialFromResult(auth, result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\nvar OAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider) {\n  function OAuthProvider() {\n    _classCallCheck(this, OAuthProvider);\n    return _callSuper(this, OAuthProvider, arguments);\n  }\n  _inherits(OAuthProvider, _BaseOAuthProvider);\n  return _createClass(OAuthProvider, [{\n    key: \"credential\",\n    value:\n    /**\r\n     * Creates a {@link OAuthCredential} from a generic OAuth provider's access token or ID token.\r\n     *\r\n     * @remarks\r\n     * The raw nonce is required when an ID token with a nonce field is provided. The SHA-256 hash of\r\n     * the raw nonce must match the nonce field in the ID token.\r\n     *\r\n     * @example\r\n     * ```javascript\r\n     * // `googleUser` from the onsuccess Google Sign In callback.\r\n     * // Initialize a generate OAuth provider with a `google.com` providerId.\r\n     * const provider = new OAuthProvider('google.com');\r\n     * const credential = provider.credential({\r\n     *   idToken: googleUser.getAuthResponse().id_token,\r\n     * });\r\n     * const result = await signInWithCredential(credential);\r\n     * ```\r\n     *\r\n     * @param params - Either the options object containing the ID token, access token and raw nonce\r\n     * or the ID token string.\r\n     */\n    function credential(params) {\n      return this._credential(Object.assign(Object.assign({}, params), {\n        nonce: params.rawNonce\n      }));\n    }\n    /** An internal credential method that accepts more permissive options */\n  }, {\n    key: \"_credential\",\n    value: function _credential(params) {\n      _assert(params.idToken || params.accessToken, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      // For OAuthCredential, sign in method is same as providerId.\n      return OAuthCredential._fromParams(Object.assign(Object.assign({}, params), {\n        providerId: this.providerId,\n        signInMethod: this.providerId\n      }));\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }], [{\n    key: \"credentialFromJSON\",\n    value:\n    /**\r\n     * Creates an {@link OAuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\n    function credentialFromJSON(json) {\n      var obj = typeof json === 'string' ? JSON.parse(json) : json;\n      _assert('providerId' in obj && 'signInMethod' in obj, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return OAuthCredential._fromParams(obj);\n    }\n  }, {\n    key: \"credentialFromResult\",\n    value: function credentialFromResult(userCredential) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(userCredential);\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromError\",\n    value: function credentialFromError(error) {\n      return OAuthProvider.oauthCredentialFromTaggedObject(error.customData || {});\n    }\n  }, {\n    key: \"oauthCredentialFromTaggedObject\",\n    value: function oauthCredentialFromTaggedObject(_ref13) {\n      var tokenResponse = _ref13._tokenResponse;\n      if (!tokenResponse) {\n        return null;\n      }\n      var oauthIdToken = tokenResponse.oauthIdToken,\n        oauthAccessToken = tokenResponse.oauthAccessToken,\n        oauthTokenSecret = tokenResponse.oauthTokenSecret,\n        pendingToken = tokenResponse.pendingToken,\n        nonce = tokenResponse.nonce,\n        providerId = tokenResponse.providerId;\n      if (!oauthAccessToken && !oauthTokenSecret && !oauthIdToken && !pendingToken) {\n        return null;\n      }\n      if (!providerId) {\n        return null;\n      }\n      try {\n        return new OAuthProvider(providerId)._credential({\n          idToken: oauthIdToken,\n          accessToken: oauthAccessToken,\n          nonce: nonce,\n          pendingToken: pendingToken\n        });\n      } catch (e) {\n        return null;\n      }\n    }\n  }]);\n}(BaseOAuthProvider);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.FACEBOOK.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new FacebookAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('user_birthday');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Facebook Access Token.\r\n *   const credential = FacebookAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new FacebookAuthProvider();\r\n * provider.addScope('user_birthday');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Facebook Access Token.\r\n * const credential = FacebookAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\nvar FacebookAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider2) {\n  function FacebookAuthProvider() {\n    _classCallCheck(this, FacebookAuthProvider);\n    return _callSuper(this, FacebookAuthProvider, [\"facebook.com\" /* ProviderId.FACEBOOK */]);\n  }\n  /**\r\n   * Creates a credential for Facebook.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // `event` from the Facebook auth.authResponseChange callback.\r\n   * const credential = FacebookAuthProvider.credential(event.authResponse.accessToken);\r\n   * const result = await signInWithCredential(credential);\r\n   * ```\r\n   *\r\n   * @param accessToken - Facebook access token.\r\n   */\n  _inherits(FacebookAuthProvider, _BaseOAuthProvider2);\n  return _createClass(FacebookAuthProvider, null, [{\n    key: \"credential\",\n    value: function credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: FacebookAuthProvider.PROVIDER_ID,\n        signInMethod: FacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD,\n        accessToken: accessToken\n      });\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromResult\",\n    value: function credentialFromResult(userCredential) {\n      return FacebookAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromError\",\n    value: function credentialFromError(error) {\n      return FacebookAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n  }, {\n    key: \"credentialFromTaggedObject\",\n    value: function credentialFromTaggedObject(_ref14) {\n      var tokenResponse = _ref14._tokenResponse;\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return FacebookAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch (_a) {\n        return null;\n      }\n    }\n  }]);\n}(BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.FACEBOOK. */\nFacebookAuthProvider.FACEBOOK_SIGN_IN_METHOD = \"facebook.com\" /* SignInMethod.FACEBOOK */;\n/** Always set to {@link ProviderId}.FACEBOOK. */\nFacebookAuthProvider.PROVIDER_ID = \"facebook.com\" /* ProviderId.FACEBOOK */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GOOGLE.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GoogleAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Google Access Token.\r\n *   const credential = GoogleAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GoogleAuthProvider();\r\n * provider.addScope('profile');\r\n * provider.addScope('email');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Google Access Token.\r\n * const credential = GoogleAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n *\r\n * @public\r\n */\nvar GoogleAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider3) {\n  function GoogleAuthProvider() {\n    var _this17;\n    _classCallCheck(this, GoogleAuthProvider);\n    _this17 = _callSuper(this, GoogleAuthProvider, [\"google.com\" /* ProviderId.GOOGLE */]);\n    _this17.addScope('profile');\n    return _this17;\n  }\n  /**\r\n   * Creates a credential for Google. At least one of ID token and access token is required.\r\n   *\r\n   * @example\r\n   * ```javascript\r\n   * // \\`googleUser\\` from the onsuccess Google Sign In callback.\r\n   * const credential = GoogleAuthProvider.credential(googleUser.getAuthResponse().id_token);\r\n   * const result = await signInWithCredential(credential);\r\n   * ```\r\n   *\r\n   * @param idToken - Google ID token.\r\n   * @param accessToken - Google access token.\r\n   */\n  _inherits(GoogleAuthProvider, _BaseOAuthProvider3);\n  return _createClass(GoogleAuthProvider, null, [{\n    key: \"credential\",\n    value: function credential(idToken, accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GoogleAuthProvider.PROVIDER_ID,\n        signInMethod: GoogleAuthProvider.GOOGLE_SIGN_IN_METHOD,\n        idToken: idToken,\n        accessToken: accessToken\n      });\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromResult\",\n    value: function credentialFromResult(userCredential) {\n      return GoogleAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromError\",\n    value: function credentialFromError(error) {\n      return GoogleAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n  }, {\n    key: \"credentialFromTaggedObject\",\n    value: function credentialFromTaggedObject(_ref15) {\n      var tokenResponse = _ref15._tokenResponse;\n      if (!tokenResponse) {\n        return null;\n      }\n      var oauthIdToken = tokenResponse.oauthIdToken,\n        oauthAccessToken = tokenResponse.oauthAccessToken;\n      if (!oauthIdToken && !oauthAccessToken) {\n        // This could be an oauth 1 credential or a phone credential\n        return null;\n      }\n      try {\n        return GoogleAuthProvider.credential(oauthIdToken, oauthAccessToken);\n      } catch (_a) {\n        return null;\n      }\n    }\n  }]);\n}(BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.GOOGLE. */\nGoogleAuthProvider.GOOGLE_SIGN_IN_METHOD = \"google.com\" /* SignInMethod.GOOGLE */;\n/** Always set to {@link ProviderId}.GOOGLE. */\nGoogleAuthProvider.PROVIDER_ID = \"google.com\" /* ProviderId.GOOGLE */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.GITHUB.\r\n *\r\n * @remarks\r\n * GitHub requires an OAuth 2.0 redirect, so you can either handle the redirect directly, or use\r\n * the {@link signInWithPopup} handler:\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new GithubAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * provider.addScope('repo');\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a GitHub Access Token.\r\n *   const credential = GithubAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new GithubAuthProvider();\r\n * provider.addScope('repo');\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a GitHub Access Token.\r\n * const credential = GithubAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * ```\r\n * @public\r\n */\nvar GithubAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider4) {\n  function GithubAuthProvider() {\n    _classCallCheck(this, GithubAuthProvider);\n    return _callSuper(this, GithubAuthProvider, [\"github.com\" /* ProviderId.GITHUB */]);\n  }\n  /**\r\n   * Creates a credential for GitHub.\r\n   *\r\n   * @param accessToken - GitHub access token.\r\n   */\n  _inherits(GithubAuthProvider, _BaseOAuthProvider4);\n  return _createClass(GithubAuthProvider, null, [{\n    key: \"credential\",\n    value: function credential(accessToken) {\n      return OAuthCredential._fromParams({\n        providerId: GithubAuthProvider.PROVIDER_ID,\n        signInMethod: GithubAuthProvider.GITHUB_SIGN_IN_METHOD,\n        accessToken: accessToken\n      });\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromResult\",\n    value: function credentialFromResult(userCredential) {\n      return GithubAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromError\",\n    value: function credentialFromError(error) {\n      return GithubAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n  }, {\n    key: \"credentialFromTaggedObject\",\n    value: function credentialFromTaggedObject(_ref16) {\n      var tokenResponse = _ref16._tokenResponse;\n      if (!tokenResponse || !('oauthAccessToken' in tokenResponse)) {\n        return null;\n      }\n      if (!tokenResponse.oauthAccessToken) {\n        return null;\n      }\n      try {\n        return GithubAuthProvider.credential(tokenResponse.oauthAccessToken);\n      } catch (_a) {\n        return null;\n      }\n    }\n  }]);\n}(BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.GITHUB. */\nGithubAuthProvider.GITHUB_SIGN_IN_METHOD = \"github.com\" /* SignInMethod.GITHUB */;\n/** Always set to {@link ProviderId}.GITHUB. */\nGithubAuthProvider.PROVIDER_ID = \"github.com\" /* ProviderId.GITHUB */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar IDP_REQUEST_URI = 'http://localhost';\n/**\r\n * @public\r\n */\nvar SAMLAuthCredential = /*#__PURE__*/function (_AuthCredential4) {\n  /** @internal */\n  function SAMLAuthCredential(providerId, pendingToken) {\n    var _this18;\n    _classCallCheck(this, SAMLAuthCredential);\n    _this18 = _callSuper(this, SAMLAuthCredential, [providerId, providerId]);\n    _this18.pendingToken = pendingToken;\n    return _this18;\n  }\n  /** @internal */\n  _inherits(SAMLAuthCredential, _AuthCredential4);\n  return _createClass(SAMLAuthCredential, [{\n    key: \"_getIdTokenResponse\",\n    value: function _getIdTokenResponse(auth) {\n      var request = this.buildRequest();\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n  }, {\n    key: \"_linkToIdToken\",\n    value: function _linkToIdToken(auth, idToken) {\n      var request = this.buildRequest();\n      request.idToken = idToken;\n      return signInWithIdp(auth, request);\n    }\n    /** @internal */\n  }, {\n    key: \"_getReauthenticationResolver\",\n    value: function _getReauthenticationResolver(auth) {\n      var request = this.buildRequest();\n      request.autoCreate = false;\n      return signInWithIdp(auth, request);\n    }\n    /** {@inheritdoc AuthCredential.toJSON}  */\n  }, {\n    key: \"toJSON\",\n    value: function toJSON() {\n      return {\n        signInMethod: this.signInMethod,\n        providerId: this.providerId,\n        pendingToken: this.pendingToken\n      };\n    }\n    /**\r\n     * Static method to deserialize a JSON representation of an object into an\r\n     * {@link  AuthCredential}.\r\n     *\r\n     * @param json - Input can be either Object or the stringified representation of the object.\r\n     * When string is provided, JSON.parse would be called first.\r\n     *\r\n     * @returns If the JSON input does not represent an {@link  AuthCredential}, null is returned.\r\n     */\n  }, {\n    key: \"buildRequest\",\n    value: function buildRequest() {\n      return {\n        requestUri: IDP_REQUEST_URI,\n        returnSecureToken: true,\n        pendingToken: this.pendingToken\n      };\n    }\n  }], [{\n    key: \"fromJSON\",\n    value: function fromJSON(json) {\n      var obj = typeof json === 'string' ? JSON.parse(json) : json;\n      var providerId = obj.providerId,\n        signInMethod = obj.signInMethod,\n        pendingToken = obj.pendingToken;\n      if (!providerId || !signInMethod || !pendingToken || providerId !== signInMethod) {\n        return null;\n      }\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n    /**\r\n     * Helper static method to avoid exposing the constructor to end users.\r\n     *\r\n     * @internal\r\n     */\n  }, {\n    key: \"_create\",\n    value: function _create(providerId, pendingToken) {\n      return new SAMLAuthCredential(providerId, pendingToken);\n    }\n  }]);\n}(AuthCredential);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar SAML_PROVIDER_PREFIX = 'saml.';\n/**\r\n * An {@link AuthProvider} for SAML.\r\n *\r\n * @public\r\n */\nvar SAMLAuthProvider = /*#__PURE__*/function (_FederatedAuthProvide2) {\n  /**\r\n   * Constructor. The providerId must start with \"saml.\"\r\n   * @param providerId - SAML provider ID.\r\n   */\n  function SAMLAuthProvider(providerId) {\n    _classCallCheck(this, SAMLAuthProvider);\n    _assert(providerId.startsWith(SAML_PROVIDER_PREFIX), \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n    return _callSuper(this, SAMLAuthProvider, [providerId]);\n  }\n  /**\r\n   * Generates an {@link AuthCredential} from a {@link UserCredential} after a\r\n   * successful SAML flow completes.\r\n   *\r\n   * @remarks\r\n   *\r\n   * For example, to get an {@link AuthCredential}, you could write the\r\n   * following code:\r\n   *\r\n   * ```js\r\n   * const userCredential = await signInWithPopup(auth, samlProvider);\r\n   * const credential = SAMLAuthProvider.credentialFromResult(userCredential);\r\n   * ```\r\n   *\r\n   * @param userCredential - The user credential.\r\n   */\n  _inherits(SAMLAuthProvider, _FederatedAuthProvide2);\n  return _createClass(SAMLAuthProvider, null, [{\n    key: \"credentialFromResult\",\n    value: function credentialFromResult(userCredential) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(userCredential);\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromError\",\n    value: function credentialFromError(error) {\n      return SAMLAuthProvider.samlCredentialFromTaggedObject(error.customData || {});\n    }\n    /**\r\n     * Creates an {@link AuthCredential} from a JSON string or a plain object.\r\n     * @param json - A plain object or a JSON string\r\n     */\n  }, {\n    key: \"credentialFromJSON\",\n    value: function credentialFromJSON(json) {\n      var credential = SAMLAuthCredential.fromJSON(json);\n      _assert(credential, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n      return credential;\n    }\n  }, {\n    key: \"samlCredentialFromTaggedObject\",\n    value: function samlCredentialFromTaggedObject(_ref17) {\n      var tokenResponse = _ref17._tokenResponse;\n      if (!tokenResponse) {\n        return null;\n      }\n      var pendingToken = tokenResponse.pendingToken,\n        providerId = tokenResponse.providerId;\n      if (!pendingToken || !providerId) {\n        return null;\n      }\n      try {\n        return SAMLAuthCredential._create(providerId, pendingToken);\n      } catch (e) {\n        return null;\n      }\n    }\n  }]);\n}(FederatedAuthProvider);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Provider for generating an {@link OAuthCredential} for {@link ProviderId}.TWITTER.\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a redirect.\r\n * const provider = new TwitterAuthProvider();\r\n * // Start a sign in process for an unauthenticated user.\r\n * await signInWithRedirect(auth, provider);\r\n * // This will trigger a full page redirect away from your app\r\n *\r\n * // After returning from the redirect when your app initializes you can obtain the result\r\n * const result = await getRedirectResult(auth);\r\n * if (result) {\r\n *   // This is the signed-in user\r\n *   const user = result.user;\r\n *   // This gives you a Twitter Access Token and Secret.\r\n *   const credential = TwitterAuthProvider.credentialFromResult(result);\r\n *   const token = credential.accessToken;\r\n *   const secret = credential.secret;\r\n * }\r\n * ```\r\n *\r\n * @example\r\n * ```javascript\r\n * // Sign in using a popup.\r\n * const provider = new TwitterAuthProvider();\r\n * const result = await signInWithPopup(auth, provider);\r\n *\r\n * // The signed-in user info.\r\n * const user = result.user;\r\n * // This gives you a Twitter Access Token and Secret.\r\n * const credential = TwitterAuthProvider.credentialFromResult(result);\r\n * const token = credential.accessToken;\r\n * const secret = credential.secret;\r\n * ```\r\n *\r\n * @public\r\n */\nvar TwitterAuthProvider = /*#__PURE__*/function (_BaseOAuthProvider5) {\n  function TwitterAuthProvider() {\n    _classCallCheck(this, TwitterAuthProvider);\n    return _callSuper(this, TwitterAuthProvider, [\"twitter.com\" /* ProviderId.TWITTER */]);\n  }\n  /**\r\n   * Creates a credential for Twitter.\r\n   *\r\n   * @param token - Twitter access token.\r\n   * @param secret - Twitter secret.\r\n   */\n  _inherits(TwitterAuthProvider, _BaseOAuthProvider5);\n  return _createClass(TwitterAuthProvider, null, [{\n    key: \"credential\",\n    value: function credential(token, secret) {\n      return OAuthCredential._fromParams({\n        providerId: TwitterAuthProvider.PROVIDER_ID,\n        signInMethod: TwitterAuthProvider.TWITTER_SIGN_IN_METHOD,\n        oauthToken: token,\n        oauthTokenSecret: secret\n      });\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link UserCredential}.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromResult\",\n    value: function credentialFromResult(userCredential) {\n      return TwitterAuthProvider.credentialFromTaggedObject(userCredential);\n    }\n    /**\r\n     * Used to extract the underlying {@link OAuthCredential} from a {@link AuthError} which was\r\n     * thrown during a sign-in, link, or reauthenticate operation.\r\n     *\r\n     * @param userCredential - The user credential.\r\n     */\n  }, {\n    key: \"credentialFromError\",\n    value: function credentialFromError(error) {\n      return TwitterAuthProvider.credentialFromTaggedObject(error.customData || {});\n    }\n  }, {\n    key: \"credentialFromTaggedObject\",\n    value: function credentialFromTaggedObject(_ref18) {\n      var tokenResponse = _ref18._tokenResponse;\n      if (!tokenResponse) {\n        return null;\n      }\n      var oauthAccessToken = tokenResponse.oauthAccessToken,\n        oauthTokenSecret = tokenResponse.oauthTokenSecret;\n      if (!oauthAccessToken || !oauthTokenSecret) {\n        return null;\n      }\n      try {\n        return TwitterAuthProvider.credential(oauthAccessToken, oauthTokenSecret);\n      } catch (_a) {\n        return null;\n      }\n    }\n  }]);\n}(BaseOAuthProvider);\n/** Always set to {@link SignInMethod}.TWITTER. */\nTwitterAuthProvider.TWITTER_SIGN_IN_METHOD = \"twitter.com\" /* SignInMethod.TWITTER */;\n/** Always set to {@link ProviderId}.TWITTER. */\nTwitterAuthProvider.PROVIDER_ID = \"twitter.com\" /* ProviderId.TWITTER */;\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction signUp(_x110, _x111) {\n  return _signUp.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _signUp() {\n  _signUp = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee99(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee99$(_context99) {\n      while (1) switch (_context99.prev = _context99.next) {\n        case 0:\n          return _context99.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signUp\" /* Endpoint.SIGN_UP */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context99.stop();\n      }\n    }, _callee99);\n  }));\n  return _signUp.apply(this, arguments);\n}\nvar UserCredentialImpl = /*#__PURE__*/function () {\n  function UserCredentialImpl(params) {\n    _classCallCheck(this, UserCredentialImpl);\n    this.user = params.user;\n    this.providerId = params.providerId;\n    this._tokenResponse = params._tokenResponse;\n    this.operationType = params.operationType;\n  }\n  return _createClass(UserCredentialImpl, null, [{\n    key: \"_fromIdTokenResponse\",\n    value: function () {\n      var _fromIdTokenResponse3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee50(auth, operationType, idTokenResponse) {\n        var isAnonymous,\n          user,\n          providerId,\n          userCred,\n          _args50 = arguments;\n        return _regeneratorRuntime().wrap(function _callee50$(_context50) {\n          while (1) switch (_context50.prev = _context50.next) {\n            case 0:\n              isAnonymous = _args50.length > 3 && _args50[3] !== undefined ? _args50[3] : false;\n              _context50.next = 3;\n              return UserImpl._fromIdTokenResponse(auth, idTokenResponse, isAnonymous);\n            case 3:\n              user = _context50.sent;\n              providerId = providerIdForResponse(idTokenResponse);\n              userCred = new UserCredentialImpl({\n                user: user,\n                providerId: providerId,\n                _tokenResponse: idTokenResponse,\n                operationType: operationType\n              });\n              return _context50.abrupt(\"return\", userCred);\n            case 7:\n            case \"end\":\n              return _context50.stop();\n          }\n        }, _callee50);\n      }));\n      function _fromIdTokenResponse(_x112, _x113, _x114) {\n        return _fromIdTokenResponse3.apply(this, arguments);\n      }\n      return _fromIdTokenResponse;\n    }()\n  }, {\n    key: \"_forOperation\",\n    value: function () {\n      var _forOperation2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee51(user, operationType, response) {\n        var providerId;\n        return _regeneratorRuntime().wrap(function _callee51$(_context51) {\n          while (1) switch (_context51.prev = _context51.next) {\n            case 0:\n              _context51.next = 2;\n              return user._updateTokensIfNecessary(response, /* reload */true);\n            case 2:\n              providerId = providerIdForResponse(response);\n              return _context51.abrupt(\"return\", new UserCredentialImpl({\n                user: user,\n                providerId: providerId,\n                _tokenResponse: response,\n                operationType: operationType\n              }));\n            case 4:\n            case \"end\":\n              return _context51.stop();\n          }\n        }, _callee51);\n      }));\n      function _forOperation(_x115, _x116, _x117) {\n        return _forOperation2.apply(this, arguments);\n      }\n      return _forOperation;\n    }()\n  }]);\n}();\nfunction providerIdForResponse(response) {\n  if (response.providerId) {\n    return response.providerId;\n  }\n  if ('phoneNumber' in response) {\n    return \"phone\" /* ProviderId.PHONE */;\n  }\n  return null;\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Asynchronously signs in as an anonymous user.\r\n *\r\n * @remarks\r\n * If there is already an anonymous user signed in, that user will be returned; otherwise, a\r\n * new anonymous user identity will be created and returned.\r\n *\r\n * This method is not supported by {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\nfunction signInAnonymously(_x118) {\n  return _signInAnonymously.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _signInAnonymously() {\n  _signInAnonymously = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee100(auth) {\n    var _a, authInternal, response, userCredential;\n    return _regeneratorRuntime().wrap(function _callee100$(_context100) {\n      while (1) switch (_context100.prev = _context100.next) {\n        case 0:\n          if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(auth.app)) {\n            _context100.next = 2;\n            break;\n          }\n          return _context100.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth)));\n        case 2:\n          authInternal = _castAuth(auth);\n          _context100.next = 5;\n          return authInternal._initializationPromise;\n        case 5:\n          if (!((_a = authInternal.currentUser) === null || _a === void 0 ? void 0 : _a.isAnonymous)) {\n            _context100.next = 7;\n            break;\n          }\n          return _context100.abrupt(\"return\", new UserCredentialImpl({\n            user: authInternal.currentUser,\n            providerId: null,\n            operationType: \"signIn\" /* OperationType.SIGN_IN */\n          }));\n        case 7:\n          _context100.next = 9;\n          return signUp(authInternal, {\n            returnSecureToken: true\n          });\n        case 9:\n          response = _context100.sent;\n          _context100.next = 12;\n          return UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response, true);\n        case 12:\n          userCredential = _context100.sent;\n          _context100.next = 15;\n          return authInternal._updateCurrentUser(userCredential.user);\n        case 15:\n          return _context100.abrupt(\"return\", userCredential);\n        case 16:\n        case \"end\":\n          return _context100.stop();\n      }\n    }, _callee100);\n  }));\n  return _signInAnonymously.apply(this, arguments);\n}\nvar MultiFactorError = /*#__PURE__*/function (_FirebaseError) {\n  function MultiFactorError(auth, error, operationType, user) {\n    var _this19;\n    _classCallCheck(this, MultiFactorError);\n    var _a;\n    _this19 = _callSuper(this, MultiFactorError, [error.code, error.message]);\n    _this19.operationType = operationType;\n    _this19.user = user;\n    // https://github.com/Microsoft/TypeScript-wiki/blob/master/Breaking-Changes.md#extending-built-ins-like-error-array-and-map-may-no-longer-work\n    Object.setPrototypeOf(_this19, MultiFactorError.prototype);\n    _this19.customData = {\n      appName: auth.name,\n      tenantId: (_a = auth.tenantId) !== null && _a !== void 0 ? _a : undefined,\n      _serverResponse: error.customData._serverResponse,\n      operationType: operationType\n    };\n    return _this19;\n  }\n  _inherits(MultiFactorError, _FirebaseError);\n  return _createClass(MultiFactorError, null, [{\n    key: \"_fromErrorAndOperation\",\n    value: function _fromErrorAndOperation(auth, error, operationType, user) {\n      return new MultiFactorError(auth, error, operationType, user);\n    }\n  }]);\n}(_firebase_util__WEBPACK_IMPORTED_MODULE_1__.FirebaseError);\nfunction _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user) {\n  var idTokenProvider = operationType === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? credential._getReauthenticationResolver(auth) : credential._getIdTokenResponse(auth);\n  return idTokenProvider[\"catch\"](function (error) {\n    if (error.code === \"auth/\".concat(\"multi-factor-auth-required\" /* AuthErrorCode.MFA_REQUIRED */)) {\n      throw MultiFactorError._fromErrorAndOperation(auth, error, operationType, user);\n    }\n    throw error;\n  });\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Takes a set of UserInfo provider data and converts it to a set of names\r\n */\nfunction providerDataAsNames(providerData) {\n  return new Set(providerData.map(function (_ref19) {\n    var providerId = _ref19.providerId;\n    return providerId;\n  }).filter(function (pid) {\n    return !!pid;\n  }));\n}\n\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Unlinks a provider from a user account.\r\n *\r\n * @param user - The user.\r\n * @param providerId - The provider to unlink.\r\n *\r\n * @public\r\n */\nfunction unlink(_x119, _x120) {\n  return _unlink.apply(this, arguments);\n}\nfunction _unlink() {\n  _unlink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee101(user, providerId) {\n    var userInternal, _yield$deleteLinkedAc, providerUserInfo, providersLeft;\n    return _regeneratorRuntime().wrap(function _callee101$(_context101) {\n      while (1) switch (_context101.prev = _context101.next) {\n        case 0:\n          userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n          _context101.next = 3;\n          return _assertLinkedStatus(true, userInternal, providerId);\n        case 3:\n          _context101.t0 = deleteLinkedAccounts;\n          _context101.t1 = userInternal.auth;\n          _context101.next = 7;\n          return userInternal.getIdToken();\n        case 7:\n          _context101.t2 = _context101.sent;\n          _context101.t3 = [providerId];\n          _context101.t4 = {\n            idToken: _context101.t2,\n            deleteProvider: _context101.t3\n          };\n          _context101.next = 12;\n          return (0, _context101.t0)(_context101.t1, _context101.t4);\n        case 12:\n          _yield$deleteLinkedAc = _context101.sent;\n          providerUserInfo = _yield$deleteLinkedAc.providerUserInfo;\n          providersLeft = providerDataAsNames(providerUserInfo || []);\n          userInternal.providerData = userInternal.providerData.filter(function (pd) {\n            return providersLeft.has(pd.providerId);\n          });\n          if (!providersLeft.has(\"phone\" /* ProviderId.PHONE */)) {\n            userInternal.phoneNumber = null;\n          }\n          _context101.next = 19;\n          return userInternal.auth._persistUserIfCurrent(userInternal);\n        case 19:\n          return _context101.abrupt(\"return\", userInternal);\n        case 20:\n        case \"end\":\n          return _context101.stop();\n      }\n    }, _callee101);\n  }));\n  return _unlink.apply(this, arguments);\n}\nfunction _link(_x121, _x122) {\n  return _link2.apply(this, arguments);\n}\nfunction _link2() {\n  _link2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee102(user, credential) {\n    var bypassAuthState,\n      response,\n      _args102 = arguments;\n    return _regeneratorRuntime().wrap(function _callee102$(_context102) {\n      while (1) switch (_context102.prev = _context102.next) {\n        case 0:\n          bypassAuthState = _args102.length > 2 && _args102[2] !== undefined ? _args102[2] : false;\n          _context102.t0 = _logoutIfInvalidated;\n          _context102.t1 = user;\n          _context102.t2 = credential;\n          _context102.t3 = user.auth;\n          _context102.next = 7;\n          return user.getIdToken();\n        case 7:\n          _context102.t4 = _context102.sent;\n          _context102.t5 = _context102.t2._linkToIdToken.call(_context102.t2, _context102.t3, _context102.t4);\n          _context102.t6 = bypassAuthState;\n          _context102.next = 12;\n          return (0, _context102.t0)(_context102.t1, _context102.t5, _context102.t6);\n        case 12:\n          response = _context102.sent;\n          return _context102.abrupt(\"return\", UserCredentialImpl._forOperation(user, \"link\" /* OperationType.LINK */, response));\n        case 14:\n        case \"end\":\n          return _context102.stop();\n      }\n    }, _callee102);\n  }));\n  return _link2.apply(this, arguments);\n}\nfunction _assertLinkedStatus(_x123, _x124, _x125) {\n  return _assertLinkedStatus2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _assertLinkedStatus2() {\n  _assertLinkedStatus2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee103(expected, user, provider) {\n    var providerIds, code;\n    return _regeneratorRuntime().wrap(function _callee103$(_context103) {\n      while (1) switch (_context103.prev = _context103.next) {\n        case 0:\n          _context103.next = 2;\n          return _reloadWithoutSaving(user);\n        case 2:\n          providerIds = providerDataAsNames(user.providerData);\n          code = expected === false ? \"provider-already-linked\" /* AuthErrorCode.PROVIDER_ALREADY_LINKED */ : \"no-such-provider\";\n          _assert(providerIds.has(provider) === expected, user.auth, code);\n        case 5:\n        case \"end\":\n          return _context103.stop();\n      }\n    }, _callee103);\n  }));\n  return _assertLinkedStatus2.apply(this, arguments);\n}\nfunction _reauthenticate(_x126, _x127) {\n  return _reauthenticate2.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _reauthenticate2() {\n  _reauthenticate2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee104(user, credential) {\n    var bypassAuthState,\n      auth,\n      operationType,\n      response,\n      parsed,\n      localId,\n      _args104 = arguments;\n    return _regeneratorRuntime().wrap(function _callee104$(_context104) {\n      while (1) switch (_context104.prev = _context104.next) {\n        case 0:\n          bypassAuthState = _args104.length > 2 && _args104[2] !== undefined ? _args104[2] : false;\n          auth = user.auth;\n          if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(auth.app)) {\n            _context104.next = 4;\n            break;\n          }\n          return _context104.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth)));\n        case 4:\n          operationType = \"reauthenticate\";\n          _context104.prev = 5;\n          _context104.next = 8;\n          return _logoutIfInvalidated(user, _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential, user), bypassAuthState);\n        case 8:\n          response = _context104.sent;\n          _assert(response.idToken, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          parsed = _parseToken(response.idToken);\n          _assert(parsed, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          localId = parsed.sub;\n          _assert(user.uid === localId, auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n          return _context104.abrupt(\"return\", UserCredentialImpl._forOperation(user, operationType, response));\n        case 17:\n          _context104.prev = 17;\n          _context104.t0 = _context104[\"catch\"](5);\n          // Convert user deleted error into user mismatch\n          if ((_context104.t0 === null || _context104.t0 === void 0 ? void 0 : _context104.t0.code) === \"auth/\".concat(\"user-not-found\" /* AuthErrorCode.USER_DELETED */)) {\n            _fail(auth, \"user-mismatch\" /* AuthErrorCode.USER_MISMATCH */);\n          }\n          throw _context104.t0;\n        case 21:\n        case \"end\":\n          return _context104.stop();\n      }\n    }, _callee104, null, [[5, 17]]);\n  }));\n  return _reauthenticate2.apply(this, arguments);\n}\nfunction _signInWithCredential(_x128, _x129) {\n  return _signInWithCredential2.apply(this, arguments);\n}\n/**\r\n * Asynchronously signs in with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * This method is not supported by {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\nfunction _signInWithCredential2() {\n  _signInWithCredential2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee105(auth, credential) {\n    var bypassAuthState,\n      operationType,\n      response,\n      userCredential,\n      _args105 = arguments;\n    return _regeneratorRuntime().wrap(function _callee105$(_context105) {\n      while (1) switch (_context105.prev = _context105.next) {\n        case 0:\n          bypassAuthState = _args105.length > 2 && _args105[2] !== undefined ? _args105[2] : false;\n          if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(auth.app)) {\n            _context105.next = 3;\n            break;\n          }\n          return _context105.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth)));\n        case 3:\n          operationType = \"signIn\";\n          _context105.next = 6;\n          return _processCredentialSavingMfaContextIfNecessary(auth, operationType, credential);\n        case 6:\n          response = _context105.sent;\n          _context105.next = 9;\n          return UserCredentialImpl._fromIdTokenResponse(auth, operationType, response);\n        case 9:\n          userCredential = _context105.sent;\n          if (bypassAuthState) {\n            _context105.next = 13;\n            break;\n          }\n          _context105.next = 13;\n          return auth._updateCurrentUser(userCredential.user);\n        case 13:\n          return _context105.abrupt(\"return\", userCredential);\n        case 14:\n        case \"end\":\n          return _context105.stop();\n      }\n    }, _callee105);\n  }));\n  return _signInWithCredential2.apply(this, arguments);\n}\nfunction signInWithCredential(_x130, _x131) {\n  return _signInWithCredential3.apply(this, arguments);\n}\n/**\r\n * Links the user account with the given credentials.\r\n *\r\n * @remarks\r\n * An {@link AuthProvider} can be used to generate the credential.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\nfunction _signInWithCredential3() {\n  _signInWithCredential3 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee106(auth, credential) {\n    return _regeneratorRuntime().wrap(function _callee106$(_context106) {\n      while (1) switch (_context106.prev = _context106.next) {\n        case 0:\n          return _context106.abrupt(\"return\", _signInWithCredential(_castAuth(auth), credential));\n        case 1:\n        case \"end\":\n          return _context106.stop();\n      }\n    }, _callee106);\n  }));\n  return _signInWithCredential3.apply(this, arguments);\n}\nfunction linkWithCredential(_x132, _x133) {\n  return _linkWithCredential.apply(this, arguments);\n}\n/**\r\n * Re-authenticates a user using a fresh credential.\r\n *\r\n * @remarks\r\n * Use before operations such as {@link updatePassword} that require tokens from recent sign-in\r\n * attempts. This method can be used to recover from a `CREDENTIAL_TOO_OLD_LOGIN_AGAIN` error\r\n * or a `TOKEN_EXPIRED` error.\r\n *\r\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\r\n * created with a {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * @param user - The user.\r\n * @param credential - The auth credential.\r\n *\r\n * @public\r\n */\nfunction _linkWithCredential() {\n  _linkWithCredential = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee107(user, credential) {\n    var userInternal;\n    return _regeneratorRuntime().wrap(function _callee107$(_context107) {\n      while (1) switch (_context107.prev = _context107.next) {\n        case 0:\n          userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n          _context107.next = 3;\n          return _assertLinkedStatus(false, userInternal, credential.providerId);\n        case 3:\n          return _context107.abrupt(\"return\", _link(userInternal, credential));\n        case 4:\n        case \"end\":\n          return _context107.stop();\n      }\n    }, _callee107);\n  }));\n  return _linkWithCredential.apply(this, arguments);\n}\nfunction reauthenticateWithCredential(_x134, _x135) {\n  return _reauthenticateWithCredential.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _reauthenticateWithCredential() {\n  _reauthenticateWithCredential = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee108(user, credential) {\n    return _regeneratorRuntime().wrap(function _callee108$(_context108) {\n      while (1) switch (_context108.prev = _context108.next) {\n        case 0:\n          return _context108.abrupt(\"return\", _reauthenticate((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user), credential));\n        case 1:\n        case \"end\":\n          return _context108.stop();\n      }\n    }, _callee108);\n  }));\n  return _reauthenticateWithCredential.apply(this, arguments);\n}\nfunction signInWithCustomToken$1(_x136, _x137) {\n  return _signInWithCustomToken$.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Asynchronously signs in using a custom token.\r\n *\r\n * @remarks\r\n * Custom tokens are used to integrate Firebase Auth with existing auth systems, and must\r\n * be generated by an auth backend using the\r\n * {@link https://firebase.google.com/docs/reference/admin/node/admin.auth.Auth#createcustomtoken | createCustomToken}\r\n * method in the {@link https://firebase.google.com/docs/auth/admin | Admin SDK} .\r\n *\r\n * Fails with an error if the token is invalid, expired, or not accepted by the Firebase Auth service.\r\n *\r\n * This method is not supported by {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param customToken - The custom token to sign in with.\r\n *\r\n * @public\r\n */\nfunction _signInWithCustomToken$() {\n  _signInWithCustomToken$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee109(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee109$(_context109) {\n      while (1) switch (_context109.prev = _context109.next) {\n        case 0:\n          return _context109.abrupt(\"return\", _performSignInRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:signInWithCustomToken\" /* Endpoint.SIGN_IN_WITH_CUSTOM_TOKEN */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context109.stop();\n      }\n    }, _callee109);\n  }));\n  return _signInWithCustomToken$.apply(this, arguments);\n}\nfunction signInWithCustomToken(_x138, _x139) {\n  return _signInWithCustomToken.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _signInWithCustomToken() {\n  _signInWithCustomToken = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee110(auth, customToken) {\n    var authInternal, response, cred;\n    return _regeneratorRuntime().wrap(function _callee110$(_context110) {\n      while (1) switch (_context110.prev = _context110.next) {\n        case 0:\n          if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(auth.app)) {\n            _context110.next = 2;\n            break;\n          }\n          return _context110.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth)));\n        case 2:\n          authInternal = _castAuth(auth);\n          _context110.next = 5;\n          return signInWithCustomToken$1(authInternal, {\n            token: customToken,\n            returnSecureToken: true\n          });\n        case 5:\n          response = _context110.sent;\n          _context110.next = 8;\n          return UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n        case 8:\n          cred = _context110.sent;\n          _context110.next = 11;\n          return authInternal._updateCurrentUser(cred.user);\n        case 11:\n          return _context110.abrupt(\"return\", cred);\n        case 12:\n        case \"end\":\n          return _context110.stop();\n      }\n    }, _callee110);\n  }));\n  return _signInWithCustomToken.apply(this, arguments);\n}\nvar MultiFactorInfoImpl = /*#__PURE__*/function () {\n  function MultiFactorInfoImpl(factorId, response) {\n    _classCallCheck(this, MultiFactorInfoImpl);\n    this.factorId = factorId;\n    this.uid = response.mfaEnrollmentId;\n    this.enrollmentTime = new Date(response.enrolledAt).toUTCString();\n    this.displayName = response.displayName;\n  }\n  return _createClass(MultiFactorInfoImpl, null, [{\n    key: \"_fromServerResponse\",\n    value: function _fromServerResponse(auth, enrollment) {\n      if ('phoneInfo' in enrollment) {\n        return PhoneMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      } else if ('totpInfo' in enrollment) {\n        return TotpMultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      }\n      return _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n    }\n  }]);\n}();\nvar PhoneMultiFactorInfoImpl = /*#__PURE__*/function (_MultiFactorInfoImpl) {\n  function PhoneMultiFactorInfoImpl(response) {\n    var _this20;\n    _classCallCheck(this, PhoneMultiFactorInfoImpl);\n    _this20 = _callSuper(this, PhoneMultiFactorInfoImpl, [\"phone\" /* FactorId.PHONE */, response]);\n    _this20.phoneNumber = response.phoneInfo;\n    return _this20;\n  }\n  _inherits(PhoneMultiFactorInfoImpl, _MultiFactorInfoImpl);\n  return _createClass(PhoneMultiFactorInfoImpl, null, [{\n    key: \"_fromServerResponse\",\n    value: function _fromServerResponse(_auth, enrollment) {\n      return new PhoneMultiFactorInfoImpl(enrollment);\n    }\n  }]);\n}(MultiFactorInfoImpl);\nvar TotpMultiFactorInfoImpl = /*#__PURE__*/function (_MultiFactorInfoImpl2) {\n  function TotpMultiFactorInfoImpl(response) {\n    _classCallCheck(this, TotpMultiFactorInfoImpl);\n    return _callSuper(this, TotpMultiFactorInfoImpl, [\"totp\" /* FactorId.TOTP */, response]);\n  }\n  _inherits(TotpMultiFactorInfoImpl, _MultiFactorInfoImpl2);\n  return _createClass(TotpMultiFactorInfoImpl, null, [{\n    key: \"_fromServerResponse\",\n    value: function _fromServerResponse(_auth, enrollment) {\n      return new TotpMultiFactorInfoImpl(enrollment);\n    }\n  }]);\n}(MultiFactorInfoImpl);\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _setActionCodeSettingsOnRequest(auth, request, actionCodeSettings) {\n  var _a;\n  _assert(((_a = actionCodeSettings.url) === null || _a === void 0 ? void 0 : _a.length) > 0, auth, \"invalid-continue-uri\" /* AuthErrorCode.INVALID_CONTINUE_URI */);\n  _assert(typeof actionCodeSettings.dynamicLinkDomain === 'undefined' || actionCodeSettings.dynamicLinkDomain.length > 0, auth, \"invalid-dynamic-link-domain\" /* AuthErrorCode.INVALID_DYNAMIC_LINK_DOMAIN */);\n  request.continueUrl = actionCodeSettings.url;\n  request.dynamicLinkDomain = actionCodeSettings.dynamicLinkDomain;\n  request.canHandleCodeInApp = actionCodeSettings.handleCodeInApp;\n  if (actionCodeSettings.iOS) {\n    _assert(actionCodeSettings.iOS.bundleId.length > 0, auth, \"missing-ios-bundle-id\" /* AuthErrorCode.MISSING_IOS_BUNDLE_ID */);\n    request.iOSBundleId = actionCodeSettings.iOS.bundleId;\n  }\n  if (actionCodeSettings.android) {\n    _assert(actionCodeSettings.android.packageName.length > 0, auth, \"missing-android-pkg-name\" /* AuthErrorCode.MISSING_ANDROID_PACKAGE_NAME */);\n    request.androidInstallApp = actionCodeSettings.android.installApp;\n    request.androidMinimumVersionCode = actionCodeSettings.android.minimumVersion;\n    request.androidPackageName = actionCodeSettings.android.packageName;\n  }\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Updates the password policy cached in the {@link Auth} instance if a policy is already\r\n * cached for the project or tenant.\r\n *\r\n * @remarks\r\n * We only fetch the password policy if the password did not meet policy requirements and\r\n * there is an existing policy cached. A developer must call validatePassword at least\r\n * once for the cache to be automatically updated.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @private\r\n */\nfunction recachePasswordPolicy(_x140) {\n  return _recachePasswordPolicy.apply(this, arguments);\n}\n/**\r\n * Sends a password reset email to the given email address. This method does not throw an error when\r\n * there's no user account with the given email address and\r\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\r\n * is enabled.\r\n *\r\n * @remarks\r\n * To complete the password reset, call {@link confirmPasswordReset} with the code supplied in\r\n * the email sent to the user, along with the new password specified by the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendPasswordResetEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain code from user.\r\n * await confirmPasswordReset('user@example.com', code);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction _recachePasswordPolicy() {\n  _recachePasswordPolicy = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee111(auth) {\n    var authInternal;\n    return _regeneratorRuntime().wrap(function _callee111$(_context111) {\n      while (1) switch (_context111.prev = _context111.next) {\n        case 0:\n          authInternal = _castAuth(auth);\n          if (!authInternal._getPasswordPolicyInternal()) {\n            _context111.next = 4;\n            break;\n          }\n          _context111.next = 4;\n          return authInternal._updatePasswordPolicy();\n        case 4:\n        case \"end\":\n          return _context111.stop();\n      }\n    }, _callee111);\n  }));\n  return _recachePasswordPolicy.apply(this, arguments);\n}\nfunction sendPasswordResetEmail(_x141, _x142, _x143) {\n  return _sendPasswordResetEmail.apply(this, arguments);\n}\n/**\r\n * Completes the password reset process, given a confirmation code and new password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A confirmation code sent to the user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\nfunction _sendPasswordResetEmail() {\n  _sendPasswordResetEmail = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee112(auth, email, actionCodeSettings) {\n    var authInternal, request;\n    return _regeneratorRuntime().wrap(function _callee112$(_context112) {\n      while (1) switch (_context112.prev = _context112.next) {\n        case 0:\n          authInternal = _castAuth(auth);\n          request = {\n            requestType: \"PASSWORD_RESET\" /* ActionCodeOperation.PASSWORD_RESET */,\n            email: email,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n          }\n          _context112.next = 5;\n          return handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendPasswordResetEmail$1);\n        case 5:\n        case \"end\":\n          return _context112.stop();\n      }\n    }, _callee112);\n  }));\n  return _sendPasswordResetEmail.apply(this, arguments);\n}\nfunction confirmPasswordReset(_x144, _x145, _x146) {\n  return _confirmPasswordReset.apply(this, arguments);\n}\n/**\r\n * Applies a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\nfunction _confirmPasswordReset() {\n  _confirmPasswordReset = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee114(auth, oobCode, newPassword) {\n    return _regeneratorRuntime().wrap(function _callee114$(_context114) {\n      while (1) switch (_context114.prev = _context114.next) {\n        case 0:\n          _context114.next = 2;\n          return resetPassword((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth), {\n            oobCode: oobCode,\n            newPassword: newPassword\n          })[\"catch\"](/*#__PURE__*/function () {\n            var _ref29 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee113(error) {\n              return _regeneratorRuntime().wrap(function _callee113$(_context113) {\n                while (1) switch (_context113.prev = _context113.next) {\n                  case 0:\n                    if (error.code === \"auth/\".concat(\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */)) {\n                      void recachePasswordPolicy(auth);\n                    }\n                    throw error;\n                  case 2:\n                  case \"end\":\n                    return _context113.stop();\n                }\n              }, _callee113);\n            }));\n            return function (_x195) {\n              return _ref29.apply(this, arguments);\n            };\n          }());\n        case 2:\n        case \"end\":\n          return _context114.stop();\n      }\n    }, _callee114);\n  }));\n  return _confirmPasswordReset.apply(this, arguments);\n}\nfunction applyActionCode(_x147, _x148) {\n  return _applyActionCode.apply(this, arguments);\n}\n/**\r\n * Checks a verification code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns metadata about the code.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param oobCode - A verification code sent to the user.\r\n *\r\n * @public\r\n */\nfunction _applyActionCode() {\n  _applyActionCode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee115(auth, oobCode) {\n    return _regeneratorRuntime().wrap(function _callee115$(_context115) {\n      while (1) switch (_context115.prev = _context115.next) {\n        case 0:\n          _context115.next = 2;\n          return applyActionCode$1((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth), {\n            oobCode: oobCode\n          });\n        case 2:\n        case \"end\":\n          return _context115.stop();\n      }\n    }, _callee115);\n  }));\n  return _applyActionCode.apply(this, arguments);\n}\nfunction checkActionCode(_x149, _x150) {\n  return _checkActionCode.apply(this, arguments);\n}\n/**\r\n * Checks a password reset code sent to the user by email or other out-of-band mechanism.\r\n *\r\n * @returns the user's email address if valid.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param code - A verification code sent to the user.\r\n *\r\n * @public\r\n */\nfunction _checkActionCode() {\n  _checkActionCode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee116(auth, oobCode) {\n    var authModular, response, operation, multiFactorInfo;\n    return _regeneratorRuntime().wrap(function _callee116$(_context116) {\n      while (1) switch (_context116.prev = _context116.next) {\n        case 0:\n          authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth);\n          _context116.next = 3;\n          return resetPassword(authModular, {\n            oobCode: oobCode\n          });\n        case 3:\n          response = _context116.sent;\n          // Email could be empty only if the request type is EMAIL_SIGNIN or\n          // VERIFY_AND_CHANGE_EMAIL.\n          // New email should not be empty if the request type is\n          // VERIFY_AND_CHANGE_EMAIL.\n          // Multi-factor info could not be empty if the request type is\n          // REVERT_SECOND_FACTOR_ADDITION.\n          operation = response.requestType;\n          _assert(operation, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          _context116.t0 = operation;\n          _context116.next = _context116.t0 === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */ ? 9 : _context116.t0 === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? 10 : _context116.t0 === \"REVERT_SECOND_FACTOR_ADDITION\" /* ActionCodeOperation.REVERT_SECOND_FACTOR_ADDITION */ ? 12 : 13;\n          break;\n        case 9:\n          return _context116.abrupt(\"break\", 14);\n        case 10:\n          _assert(response.newEmail, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n          return _context116.abrupt(\"break\", 14);\n        case 12:\n          _assert(response.mfaInfo, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        case 13:\n          _assert(response.email, authModular, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n        case 14:\n          // The multi-factor info for revert second factor addition\n          multiFactorInfo = null;\n          if (response.mfaInfo) {\n            multiFactorInfo = MultiFactorInfoImpl._fromServerResponse(_castAuth(authModular), response.mfaInfo);\n          }\n          return _context116.abrupt(\"return\", {\n            data: {\n              email: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.newEmail : response.email) || null,\n              previousEmail: (response.requestType === \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */ ? response.email : response.newEmail) || null,\n              multiFactorInfo: multiFactorInfo\n            },\n            operation: operation\n          });\n        case 17:\n        case \"end\":\n          return _context116.stop();\n      }\n    }, _callee116);\n  }));\n  return _checkActionCode.apply(this, arguments);\n}\nfunction verifyPasswordResetCode(_x151, _x152) {\n  return _verifyPasswordResetCode.apply(this, arguments);\n}\n/**\r\n * Creates a new user account associated with the specified email address and password.\r\n *\r\n * @remarks\r\n * On successful creation of the user account, this user will also be signed in to your application.\r\n *\r\n * User account creation can fail if the account already exists or the password is invalid.\r\n *\r\n * This method is not supported on {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * Note: The email address acts as a unique identifier for the user and enables an email-based\r\n * password reset. This function will create a new user account and set the initial user password.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param password - The user's chosen password.\r\n *\r\n * @public\r\n */\nfunction _verifyPasswordResetCode() {\n  _verifyPasswordResetCode = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee117(auth, code) {\n    var _yield$checkActionCod, data;\n    return _regeneratorRuntime().wrap(function _callee117$(_context117) {\n      while (1) switch (_context117.prev = _context117.next) {\n        case 0:\n          _context117.next = 2;\n          return checkActionCode((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth), code);\n        case 2:\n          _yield$checkActionCod = _context117.sent;\n          data = _yield$checkActionCod.data;\n          return _context117.abrupt(\"return\", data.email);\n        case 5:\n        case \"end\":\n          return _context117.stop();\n      }\n    }, _callee117);\n  }));\n  return _verifyPasswordResetCode.apply(this, arguments);\n}\nfunction createUserWithEmailAndPassword(_x153, _x154, _x155) {\n  return _createUserWithEmailAndPassword.apply(this, arguments);\n}\n/**\r\n * Asynchronously signs in using an email and password.\r\n *\r\n * @remarks\r\n * Fails with an error if the email address and password do not match. When\r\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\r\n * is enabled, this method fails with \"auth/invalid-credential\" in case of an invalid\r\n * email/password.\r\n *\r\n * This method is not supported on {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * Note: The user's password is NOT the password used to access the user's email account. The\r\n * email address serves as a unique identifier for the user, and the password is used to access\r\n * the user's account in your Firebase project. See also: {@link createUserWithEmailAndPassword}.\r\n *\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The users email address.\r\n * @param password - The users password.\r\n *\r\n * @public\r\n */\nfunction _createUserWithEmailAndPassword() {\n  _createUserWithEmailAndPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee118(auth, email, password) {\n    var authInternal, request, signUpResponse, response, userCredential;\n    return _regeneratorRuntime().wrap(function _callee118$(_context118) {\n      while (1) switch (_context118.prev = _context118.next) {\n        case 0:\n          if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(auth.app)) {\n            _context118.next = 2;\n            break;\n          }\n          return _context118.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth)));\n        case 2:\n          authInternal = _castAuth(auth);\n          request = {\n            returnSecureToken: true,\n            email: email,\n            password: password,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          signUpResponse = handleRecaptchaFlow(authInternal, request, \"signUpPassword\" /* RecaptchaActionName.SIGN_UP_PASSWORD */, signUp);\n          _context118.next = 7;\n          return signUpResponse[\"catch\"](function (error) {\n            if (error.code === \"auth/\".concat(\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */)) {\n              void recachePasswordPolicy(auth);\n            }\n            throw error;\n          });\n        case 7:\n          response = _context118.sent;\n          _context118.next = 10;\n          return UserCredentialImpl._fromIdTokenResponse(authInternal, \"signIn\" /* OperationType.SIGN_IN */, response);\n        case 10:\n          userCredential = _context118.sent;\n          _context118.next = 13;\n          return authInternal._updateCurrentUser(userCredential.user);\n        case 13:\n          return _context118.abrupt(\"return\", userCredential);\n        case 14:\n        case \"end\":\n          return _context118.stop();\n      }\n    }, _callee118);\n  }));\n  return _createUserWithEmailAndPassword.apply(this, arguments);\n}\nfunction signInWithEmailAndPassword(auth, email, password) {\n  if ((0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth));\n  }\n  return signInWithCredential((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth), EmailAuthProvider.credential(email, password))[\"catch\"](/*#__PURE__*/function () {\n    var _ref20 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee52(error) {\n      return _regeneratorRuntime().wrap(function _callee52$(_context52) {\n        while (1) switch (_context52.prev = _context52.next) {\n          case 0:\n            if (error.code === \"auth/\".concat(\"password-does-not-meet-requirements\" /* AuthErrorCode.PASSWORD_DOES_NOT_MEET_REQUIREMENTS */)) {\n              void recachePasswordPolicy(auth);\n            }\n            throw error;\n          case 2:\n          case \"end\":\n            return _context52.stop();\n        }\n      }, _callee52);\n    }));\n    return function (_x156) {\n      return _ref20.apply(this, arguments);\n    };\n  }());\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Sends a sign-in email link to the user with the specified email.\r\n *\r\n * @remarks\r\n * The sign-in operation has to always be completed in the app unlike other out of band email\r\n * actions (password reset and email verifications). This is because, at the end of the flow,\r\n * the user is expected to be signed in and their Auth state persisted within the app.\r\n *\r\n * To complete sign in with the email link, call {@link signInWithEmailLink} with the email\r\n * address and the email link supplied in the email sent to the user.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n * @param authInternal - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction sendSignInLinkToEmail(_x157, _x158, _x159) {\n  return _sendSignInLinkToEmail.apply(this, arguments);\n}\n/**\r\n * Checks if an incoming link is a sign-in with email link suitable for {@link signInWithEmailLink}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\nfunction _sendSignInLinkToEmail() {\n  _sendSignInLinkToEmail = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee119(auth, email, actionCodeSettings) {\n    var authInternal, request, setActionCodeSettings;\n    return _regeneratorRuntime().wrap(function _callee119$(_context119) {\n      while (1) switch (_context119.prev = _context119.next) {\n        case 0:\n          setActionCodeSettings = function _setActionCodeSetting(request, actionCodeSettings) {\n            _assert(actionCodeSettings.handleCodeInApp, authInternal, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n            if (actionCodeSettings) {\n              _setActionCodeSettingsOnRequest(authInternal, request, actionCodeSettings);\n            }\n          };\n          authInternal = _castAuth(auth);\n          request = {\n            requestType: \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */,\n            email: email,\n            clientType: \"CLIENT_TYPE_WEB\" /* RecaptchaClientType.WEB */\n          };\n          setActionCodeSettings(request, actionCodeSettings);\n          _context119.next = 6;\n          return handleRecaptchaFlow(authInternal, request, \"getOobCode\" /* RecaptchaActionName.GET_OOB_CODE */, sendSignInLinkToEmail$1);\n        case 6:\n        case \"end\":\n          return _context119.stop();\n      }\n    }, _callee119);\n  }));\n  return _sendSignInLinkToEmail.apply(this, arguments);\n}\nfunction isSignInWithEmailLink(auth, emailLink) {\n  var actionCodeUrl = ActionCodeURL.parseLink(emailLink);\n  return (actionCodeUrl === null || actionCodeUrl === void 0 ? void 0 : actionCodeUrl.operation) === \"EMAIL_SIGNIN\" /* ActionCodeOperation.EMAIL_SIGNIN */;\n}\n/**\r\n * Asynchronously signs in using an email and sign-in email link.\r\n *\r\n * @remarks\r\n * If no link is passed, the link is inferred from the current URL.\r\n *\r\n * Fails with an error if the email address is invalid or OTP in email link expires.\r\n *\r\n * This method is not supported by {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * Note: Confirm the link is a sign-in email link before calling this method firebase.auth.Auth.isSignInWithEmailLink.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendSignInLinkToEmail(auth, 'user@example.com', actionCodeSettings);\r\n * // Obtain emailLink from the user.\r\n * if(isSignInWithEmailLink(auth, emailLink)) {\r\n *   await signInWithEmailLink(auth, 'user@example.com', emailLink);\r\n * }\r\n * ```\r\n *\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n * @param emailLink - The link sent to the user's email address.\r\n *\r\n * @public\r\n */\nfunction signInWithEmailLink(_x160, _x161, _x162) {\n  return _signInWithEmailLink.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _signInWithEmailLink() {\n  _signInWithEmailLink = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee120(auth, email, emailLink) {\n    var authModular, credential;\n    return _regeneratorRuntime().wrap(function _callee120$(_context120) {\n      while (1) switch (_context120.prev = _context120.next) {\n        case 0:\n          if (!(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(auth.app)) {\n            _context120.next = 2;\n            break;\n          }\n          return _context120.abrupt(\"return\", Promise.reject(_serverAppCurrentUserOperationNotSupportedError(auth)));\n        case 2:\n          authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth);\n          credential = EmailAuthProvider.credentialWithLink(email, emailLink || _getCurrentUrl()); // Check if the tenant ID in the email link matches the tenant ID on Auth\n          // instance.\n          _assert(credential._tenantId === (authModular.tenantId || null), authModular, \"tenant-id-mismatch\" /* AuthErrorCode.TENANT_ID_MISMATCH */);\n          return _context120.abrupt(\"return\", signInWithCredential(authModular, credential));\n        case 6:\n        case \"end\":\n          return _context120.stop();\n      }\n    }, _callee120);\n  }));\n  return _signInWithEmailLink.apply(this, arguments);\n}\nfunction createAuthUri(_x163, _x164) {\n  return _createAuthUri.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Gets the list of possible sign in methods for the given email address. This method returns an\r\n * empty list when\r\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\r\n * is enabled, irrespective of the number of authentication methods available for the given email.\r\n *\r\n * @remarks\r\n * This is useful to differentiate methods of sign-in for the same provider, eg.\r\n * {@link EmailAuthProvider} which has 2 methods of sign-in,\r\n * {@link SignInMethod}.EMAIL_PASSWORD and\r\n * {@link SignInMethod}.EMAIL_LINK.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param email - The user's email address.\r\n *\r\n * Deprecated. Migrating off of this method is recommended as a security best-practice.\r\n * Learn more in the Identity Platform documentation for\r\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}.\r\n * @public\r\n */\nfunction _createAuthUri() {\n  _createAuthUri = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee121(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee121$(_context121) {\n      while (1) switch (_context121.prev = _context121.next) {\n        case 0:\n          return _context121.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:createAuthUri\" /* Endpoint.CREATE_AUTH_URI */, _addTidIfNecessary(auth, request)));\n        case 1:\n        case \"end\":\n          return _context121.stop();\n      }\n    }, _callee121);\n  }));\n  return _createAuthUri.apply(this, arguments);\n}\nfunction fetchSignInMethodsForEmail(_x165, _x166) {\n  return _fetchSignInMethodsForEmail.apply(this, arguments);\n}\n/**\r\n * Sends a verification email to a user.\r\n *\r\n * @remarks\r\n * The verification process is completed by calling {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await sendEmailVerification(user, actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction _fetchSignInMethodsForEmail() {\n  _fetchSignInMethodsForEmail = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee122(auth, email) {\n    var continueUri, request, _yield$createAuthUri, signinMethods;\n    return _regeneratorRuntime().wrap(function _callee122$(_context122) {\n      while (1) switch (_context122.prev = _context122.next) {\n        case 0:\n          // createAuthUri returns an error if continue URI is not http or https.\n          // For environments like Cordova, Chrome extensions, native frameworks, file\n          // systems, etc, use http://localhost as continue URL.\n          continueUri = _isHttpOrHttps() ? _getCurrentUrl() : 'http://localhost';\n          request = {\n            identifier: email,\n            continueUri: continueUri\n          };\n          _context122.next = 4;\n          return createAuthUri((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth), request);\n        case 4:\n          _yield$createAuthUri = _context122.sent;\n          signinMethods = _yield$createAuthUri.signinMethods;\n          return _context122.abrupt(\"return\", signinMethods || []);\n        case 7:\n        case \"end\":\n          return _context122.stop();\n      }\n    }, _callee122);\n  }));\n  return _fetchSignInMethodsForEmail.apply(this, arguments);\n}\nfunction sendEmailVerification(_x167, _x168) {\n  return _sendEmailVerification.apply(this, arguments);\n}\n/**\r\n * Sends a verification email to a new email address.\r\n *\r\n * @remarks\r\n * The user's email will be updated to the new one after being verified.\r\n *\r\n * If you have a custom email action handler, you can complete the verification process by calling\r\n * {@link applyActionCode}.\r\n *\r\n * @example\r\n * ```javascript\r\n * const actionCodeSettings = {\r\n *   url: 'https://www.example.com/?email=user@example.com',\r\n *   iOS: {\r\n *      bundleId: 'com.example.ios'\r\n *   },\r\n *   android: {\r\n *     packageName: 'com.example.android',\r\n *     installApp: true,\r\n *     minimumVersion: '12'\r\n *   },\r\n *   handleCodeInApp: true\r\n * };\r\n * await verifyBeforeUpdateEmail(user, 'newemail@example.com', actionCodeSettings);\r\n * // Obtain code from the user.\r\n * await applyActionCode(auth, code);\r\n * ```\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address to be verified before update.\r\n * @param actionCodeSettings - The {@link ActionCodeSettings}.\r\n *\r\n * @public\r\n */\nfunction _sendEmailVerification() {\n  _sendEmailVerification = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee123(user, actionCodeSettings) {\n    var userInternal, idToken, request, _yield$sendEmailVerif, email;\n    return _regeneratorRuntime().wrap(function _callee123$(_context123) {\n      while (1) switch (_context123.prev = _context123.next) {\n        case 0:\n          userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n          _context123.next = 3;\n          return user.getIdToken();\n        case 3:\n          idToken = _context123.sent;\n          request = {\n            requestType: \"VERIFY_EMAIL\" /* ActionCodeOperation.VERIFY_EMAIL */,\n            idToken: idToken\n          };\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n          }\n          _context123.next = 8;\n          return sendEmailVerification$1(userInternal.auth, request);\n        case 8:\n          _yield$sendEmailVerif = _context123.sent;\n          email = _yield$sendEmailVerif.email;\n          if (!(email !== user.email)) {\n            _context123.next = 13;\n            break;\n          }\n          _context123.next = 13;\n          return user.reload();\n        case 13:\n        case \"end\":\n          return _context123.stop();\n      }\n    }, _callee123);\n  }));\n  return _sendEmailVerification.apply(this, arguments);\n}\nfunction verifyBeforeUpdateEmail(_x169, _x170, _x171) {\n  return _verifyBeforeUpdateEmail.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _verifyBeforeUpdateEmail() {\n  _verifyBeforeUpdateEmail = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee124(user, newEmail, actionCodeSettings) {\n    var userInternal, idToken, request, _yield$verifyAndChang, email;\n    return _regeneratorRuntime().wrap(function _callee124$(_context124) {\n      while (1) switch (_context124.prev = _context124.next) {\n        case 0:\n          userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n          _context124.next = 3;\n          return user.getIdToken();\n        case 3:\n          idToken = _context124.sent;\n          request = {\n            requestType: \"VERIFY_AND_CHANGE_EMAIL\" /* ActionCodeOperation.VERIFY_AND_CHANGE_EMAIL */,\n            idToken: idToken,\n            newEmail: newEmail\n          };\n          if (actionCodeSettings) {\n            _setActionCodeSettingsOnRequest(userInternal.auth, request, actionCodeSettings);\n          }\n          _context124.next = 8;\n          return verifyAndChangeEmail(userInternal.auth, request);\n        case 8:\n          _yield$verifyAndChang = _context124.sent;\n          email = _yield$verifyAndChang.email;\n          if (!(email !== user.email)) {\n            _context124.next = 13;\n            break;\n          }\n          _context124.next = 13;\n          return user.reload();\n        case 13:\n        case \"end\":\n          return _context124.stop();\n      }\n    }, _callee124);\n  }));\n  return _verifyBeforeUpdateEmail.apply(this, arguments);\n}\nfunction updateProfile$1(_x172, _x173) {\n  return _updateProfile$.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Updates a user's profile data.\r\n *\r\n * @param user - The user.\r\n * @param profile - The profile's `displayName` and `photoURL` to update.\r\n *\r\n * @public\r\n */\nfunction _updateProfile$() {\n  _updateProfile$ = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee125(auth, request) {\n    return _regeneratorRuntime().wrap(function _callee125$(_context125) {\n      while (1) switch (_context125.prev = _context125.next) {\n        case 0:\n          return _context125.abrupt(\"return\", _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v1/accounts:update\" /* Endpoint.SET_ACCOUNT_INFO */, request));\n        case 1:\n        case \"end\":\n          return _context125.stop();\n      }\n    }, _callee125);\n  }));\n  return _updateProfile$.apply(this, arguments);\n}\nfunction updateProfile(_x174, _x175) {\n  return _updateProfile.apply(this, arguments);\n}\n/**\r\n * Updates the user's email address.\r\n *\r\n * @remarks\r\n * An email will be sent to the original email address (if it was set) that allows to revoke the\r\n * email address change, in order to protect them from account hijacking.\r\n *\r\n * This method is not supported on any {@link User} signed in by {@link Auth} instances\r\n * created with a {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newEmail - The new email address.\r\n *\r\n * Throws \"auth/operation-not-allowed\" error when\r\n * {@link https://cloud.google.com/identity-platform/docs/admin/email-enumeration-protection | Email Enumeration Protection}\r\n * is enabled.\r\n * Deprecated - Use {@link verifyBeforeUpdateEmail} instead.\r\n *\r\n * @public\r\n */\nfunction _updateProfile() {\n  _updateProfile = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee126(user, _ref21) {\n    var displayName, photoUrl, userInternal, idToken, profileRequest, response, passwordProvider;\n    return _regeneratorRuntime().wrap(function _callee126$(_context126) {\n      while (1) switch (_context126.prev = _context126.next) {\n        case 0:\n          displayName = _ref21.displayName, photoUrl = _ref21.photoURL;\n          if (!(displayName === undefined && photoUrl === undefined)) {\n            _context126.next = 3;\n            break;\n          }\n          return _context126.abrupt(\"return\");\n        case 3:\n          userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n          _context126.next = 6;\n          return userInternal.getIdToken();\n        case 6:\n          idToken = _context126.sent;\n          profileRequest = {\n            idToken: idToken,\n            displayName: displayName,\n            photoUrl: photoUrl,\n            returnSecureToken: true\n          };\n          _context126.next = 10;\n          return _logoutIfInvalidated(userInternal, updateProfile$1(userInternal.auth, profileRequest));\n        case 10:\n          response = _context126.sent;\n          userInternal.displayName = response.displayName || null;\n          userInternal.photoURL = response.photoUrl || null;\n          // Update the password provider as well\n          passwordProvider = userInternal.providerData.find(function (_ref30) {\n            var providerId = _ref30.providerId;\n            return providerId === \"password\";\n          } /* ProviderId.PASSWORD */);\n          if (passwordProvider) {\n            passwordProvider.displayName = userInternal.displayName;\n            passwordProvider.photoURL = userInternal.photoURL;\n          }\n          _context126.next = 17;\n          return userInternal._updateTokensIfNecessary(response);\n        case 17:\n        case \"end\":\n          return _context126.stop();\n      }\n    }, _callee126);\n  }));\n  return _updateProfile.apply(this, arguments);\n}\nfunction updateEmail(user, newEmail) {\n  var userInternal = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n  if ((0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp)(userInternal.auth.app)) {\n    return Promise.reject(_serverAppCurrentUserOperationNotSupportedError(userInternal.auth));\n  }\n  return updateEmailOrPassword(userInternal, newEmail, null);\n}\n/**\r\n * Updates the user's password.\r\n *\r\n * @remarks\r\n * Important: this is a security sensitive operation that requires the user to have recently signed\r\n * in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n * @param newPassword - The new password.\r\n *\r\n * @public\r\n */\nfunction updatePassword(user, newPassword) {\n  return updateEmailOrPassword((0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user), null, newPassword);\n}\nfunction updateEmailOrPassword(_x176, _x177, _x178) {\n  return _updateEmailOrPassword.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2019 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n/**\r\n * Parse the `AdditionalUserInfo` from the ID token response.\r\n *\r\n */\nfunction _updateEmailOrPassword() {\n  _updateEmailOrPassword = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee127(user, email, password) {\n    var auth, idToken, request, response;\n    return _regeneratorRuntime().wrap(function _callee127$(_context127) {\n      while (1) switch (_context127.prev = _context127.next) {\n        case 0:\n          auth = user.auth;\n          _context127.next = 3;\n          return user.getIdToken();\n        case 3:\n          idToken = _context127.sent;\n          request = {\n            idToken: idToken,\n            returnSecureToken: true\n          };\n          if (email) {\n            request.email = email;\n          }\n          if (password) {\n            request.password = password;\n          }\n          _context127.next = 9;\n          return _logoutIfInvalidated(user, updateEmailPassword(auth, request));\n        case 9:\n          response = _context127.sent;\n          _context127.next = 12;\n          return user._updateTokensIfNecessary(response, /* reload */true);\n        case 12:\n        case \"end\":\n          return _context127.stop();\n      }\n    }, _callee127);\n  }));\n  return _updateEmailOrPassword.apply(this, arguments);\n}\nfunction _fromIdTokenResponse(idTokenResponse) {\n  var _a, _b;\n  if (!idTokenResponse) {\n    return null;\n  }\n  var providerId = idTokenResponse.providerId;\n  var profile = idTokenResponse.rawUserInfo ? JSON.parse(idTokenResponse.rawUserInfo) : {};\n  var isNewUser = idTokenResponse.isNewUser || idTokenResponse.kind === \"identitytoolkit#SignupNewUserResponse\" /* IdTokenResponseKind.SignupNewUser */;\n  if (!providerId && (idTokenResponse === null || idTokenResponse === void 0 ? void 0 : idTokenResponse.idToken)) {\n    var signInProvider = (_b = (_a = _parseToken(idTokenResponse.idToken)) === null || _a === void 0 ? void 0 : _a.firebase) === null || _b === void 0 ? void 0 : _b['sign_in_provider'];\n    if (signInProvider) {\n      var filteredProviderId = signInProvider !== \"anonymous\" /* ProviderId.ANONYMOUS */ && signInProvider !== \"custom\" /* ProviderId.CUSTOM */ ? signInProvider : null;\n      // Uses generic class in accordance with the legacy SDK.\n      return new GenericAdditionalUserInfo(isNewUser, filteredProviderId);\n    }\n  }\n  if (!providerId) {\n    return null;\n  }\n  switch (providerId) {\n    case \"facebook.com\" /* ProviderId.FACEBOOK */:\n      return new FacebookAdditionalUserInfo(isNewUser, profile);\n    case \"github.com\" /* ProviderId.GITHUB */:\n      return new GithubAdditionalUserInfo(isNewUser, profile);\n    case \"google.com\" /* ProviderId.GOOGLE */:\n      return new GoogleAdditionalUserInfo(isNewUser, profile);\n    case \"twitter.com\" /* ProviderId.TWITTER */:\n      return new TwitterAdditionalUserInfo(isNewUser, profile, idTokenResponse.screenName || null);\n    case \"custom\" /* ProviderId.CUSTOM */:\n    case \"anonymous\" /* ProviderId.ANONYMOUS */:\n      return new GenericAdditionalUserInfo(isNewUser, null);\n    default:\n      return new GenericAdditionalUserInfo(isNewUser, providerId, profile);\n  }\n}\nvar GenericAdditionalUserInfo = /*#__PURE__*/_createClass(function GenericAdditionalUserInfo(isNewUser, providerId) {\n  var profile = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n  _classCallCheck(this, GenericAdditionalUserInfo);\n  this.isNewUser = isNewUser;\n  this.providerId = providerId;\n  this.profile = profile;\n});\nvar FederatedAdditionalUserInfoWithUsername = /*#__PURE__*/function (_GenericAdditionalUse) {\n  function FederatedAdditionalUserInfoWithUsername(isNewUser, providerId, profile, username) {\n    var _this21;\n    _classCallCheck(this, FederatedAdditionalUserInfoWithUsername);\n    _this21 = _callSuper(this, FederatedAdditionalUserInfoWithUsername, [isNewUser, providerId, profile]);\n    _this21.username = username;\n    return _this21;\n  }\n  _inherits(FederatedAdditionalUserInfoWithUsername, _GenericAdditionalUse);\n  return _createClass(FederatedAdditionalUserInfoWithUsername);\n}(GenericAdditionalUserInfo);\nvar FacebookAdditionalUserInfo = /*#__PURE__*/function (_GenericAdditionalUse2) {\n  function FacebookAdditionalUserInfo(isNewUser, profile) {\n    _classCallCheck(this, FacebookAdditionalUserInfo);\n    return _callSuper(this, FacebookAdditionalUserInfo, [isNewUser, \"facebook.com\" /* ProviderId.FACEBOOK */, profile]);\n  }\n  _inherits(FacebookAdditionalUserInfo, _GenericAdditionalUse2);\n  return _createClass(FacebookAdditionalUserInfo);\n}(GenericAdditionalUserInfo);\nvar GithubAdditionalUserInfo = /*#__PURE__*/function (_FederatedAdditionalU) {\n  function GithubAdditionalUserInfo(isNewUser, profile) {\n    _classCallCheck(this, GithubAdditionalUserInfo);\n    return _callSuper(this, GithubAdditionalUserInfo, [isNewUser, \"github.com\" /* ProviderId.GITHUB */, profile, typeof (profile === null || profile === void 0 ? void 0 : profile.login) === 'string' ? profile === null || profile === void 0 ? void 0 : profile.login : null]);\n  }\n  _inherits(GithubAdditionalUserInfo, _FederatedAdditionalU);\n  return _createClass(GithubAdditionalUserInfo);\n}(FederatedAdditionalUserInfoWithUsername);\nvar GoogleAdditionalUserInfo = /*#__PURE__*/function (_GenericAdditionalUse3) {\n  function GoogleAdditionalUserInfo(isNewUser, profile) {\n    _classCallCheck(this, GoogleAdditionalUserInfo);\n    return _callSuper(this, GoogleAdditionalUserInfo, [isNewUser, \"google.com\" /* ProviderId.GOOGLE */, profile]);\n  }\n  _inherits(GoogleAdditionalUserInfo, _GenericAdditionalUse3);\n  return _createClass(GoogleAdditionalUserInfo);\n}(GenericAdditionalUserInfo);\nvar TwitterAdditionalUserInfo = /*#__PURE__*/function (_FederatedAdditionalU2) {\n  function TwitterAdditionalUserInfo(isNewUser, profile, screenName) {\n    _classCallCheck(this, TwitterAdditionalUserInfo);\n    return _callSuper(this, TwitterAdditionalUserInfo, [isNewUser, \"twitter.com\" /* ProviderId.TWITTER */, profile, screenName]);\n  }\n  _inherits(TwitterAdditionalUserInfo, _FederatedAdditionalU2);\n  return _createClass(TwitterAdditionalUserInfo);\n}(FederatedAdditionalUserInfoWithUsername);\n/**\r\n * Extracts provider specific {@link AdditionalUserInfo} for the given credential.\r\n *\r\n * @param userCredential - The user credential.\r\n *\r\n * @public\r\n */\nfunction getAdditionalUserInfo(userCredential) {\n  var user = userCredential.user,\n    _tokenResponse = userCredential._tokenResponse;\n  if (user.isAnonymous && !_tokenResponse) {\n    // Handle the special case where signInAnonymously() gets called twice.\n    // No network call is made so there's nothing to actually fill this in\n    return {\n      providerId: null,\n      isNewUser: false,\n      profile: null\n    };\n  }\n  return _fromIdTokenResponse(_tokenResponse);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Non-optional auth methods.\n/**\r\n * Changes the type of persistence on the {@link Auth} instance for the currently saved\r\n * `Auth` session and applies this type of persistence for future sign-in requests, including\r\n * sign-in with redirect requests.\r\n *\r\n * @remarks\r\n * This makes it easy for a user signing in to specify whether their session should be\r\n * remembered or not. It also makes it easier to never persist the `Auth` state for applications\r\n * that are shared by other users or have sensitive data.\r\n *\r\n * This method does not work in a Node.js environment or with {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * @example\r\n * ```javascript\r\n * setPersistence(auth, browserSessionPersistence);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param persistence - The {@link Persistence} to use.\r\n * @returns A `Promise` that resolves once the persistence change has completed\r\n *\r\n * @public\r\n */\nfunction setPersistence(auth, persistence) {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth).setPersistence(persistence);\n}\n/**\r\n * Loads the reCAPTCHA configuration into the `Auth` instance.\r\n *\r\n * @remarks\r\n * This will load the reCAPTCHA config, which indicates whether the reCAPTCHA\r\n * verification flow should be triggered for each auth provider, into the\r\n * current Auth session.\r\n *\r\n * If initializeRecaptchaConfig() is not invoked, the auth flow will always start\r\n * without reCAPTCHA verification. If the provider is configured to require reCAPTCHA\r\n * verification, the SDK will transparently load the reCAPTCHA config and restart the\r\n * auth flows.\r\n *\r\n * Thus, by calling this optional method, you will reduce the latency of future auth flows.\r\n * Loading the reCAPTCHA config early will also enhance the signal collected by reCAPTCHA.\r\n *\r\n * This method does not work in a Node.js environment.\r\n *\r\n * @example\r\n * ```javascript\r\n * initializeRecaptchaConfig(auth);\r\n * ```\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\nfunction initializeRecaptchaConfig(auth) {\n  return _initializeRecaptchaConfig(auth);\n}\n/**\r\n * Validates the password against the password policy configured for the project or tenant.\r\n *\r\n * @remarks\r\n * If no tenant ID is set on the `Auth` instance, then this method will use the password\r\n * policy configured for the project. Otherwise, this method will use the policy configured\r\n * for the tenant. If a password policy has not been configured, then the default policy\r\n * configured for all projects will be used.\r\n *\r\n * If an auth flow fails because a submitted password does not meet the password policy\r\n * requirements and this method has previously been called, then this method will use the\r\n * most recent policy available when called again.\r\n *\r\n * @example\r\n * ```javascript\r\n * validatePassword(auth, 'some-password');\r\n * ```\r\n *\r\n * @param auth The {@link Auth} instance.\r\n * @param password The password to validate.\r\n *\r\n * @public\r\n */\nfunction validatePassword(_x179, _x180) {\n  return _validatePassword2.apply(this, arguments);\n}\n/**\r\n * Adds an observer for changes to the signed-in user's ID token.\r\n *\r\n * @remarks\r\n * This includes sign-in, sign-out, and token refresh events.\r\n * This will not be triggered automatically upon ID token expiration. Use {@link User.getIdToken} to refresh the ID token.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\nfunction _validatePassword2() {\n  _validatePassword2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee128(auth, password) {\n    var authInternal;\n    return _regeneratorRuntime().wrap(function _callee128$(_context128) {\n      while (1) switch (_context128.prev = _context128.next) {\n        case 0:\n          authInternal = _castAuth(auth);\n          return _context128.abrupt(\"return\", authInternal.validatePassword(password));\n        case 2:\n        case \"end\":\n          return _context128.stop();\n      }\n    }, _callee128);\n  }));\n  return _validatePassword2.apply(this, arguments);\n}\nfunction onIdTokenChanged(auth, nextOrObserver, error, completed) {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth).onIdTokenChanged(nextOrObserver, error, completed);\n}\n/**\r\n * Adds a blocking callback that runs before an auth state change\r\n * sets a new user.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param callback - callback triggered before new user value is set.\r\n *   If this throws, it blocks the user from being set.\r\n * @param onAbort - callback triggered if a later `beforeAuthStateChanged()`\r\n *   callback throws, allowing you to undo any side effects.\r\n */\nfunction beforeAuthStateChanged(auth, callback, onAbort) {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth).beforeAuthStateChanged(callback, onAbort);\n}\n/**\r\n * Adds an observer for changes to the user's sign-in state.\r\n *\r\n * @remarks\r\n * To keep the old behavior, see {@link onIdTokenChanged}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param nextOrObserver - callback triggered on change.\r\n * @param error - Deprecated. This callback is never triggered. Errors\r\n * on signing in/out can be caught in promises returned from\r\n * sign-in/sign-out functions.\r\n * @param completed - Deprecated. This callback is never triggered.\r\n *\r\n * @public\r\n */\nfunction onAuthStateChanged(auth, nextOrObserver, error, completed) {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth).onAuthStateChanged(nextOrObserver, error, completed);\n}\n/**\r\n * Sets the current language to the default device/browser preference.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\nfunction useDeviceLanguage(auth) {\n  (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth).useDeviceLanguage();\n}\n/**\r\n * Asynchronously sets the provided user as {@link Auth.currentUser} on the\r\n * {@link Auth} instance.\r\n *\r\n * @remarks\r\n * A new instance copy of the user provided will be made and set as currentUser.\r\n *\r\n * This will trigger {@link onAuthStateChanged} and {@link onIdTokenChanged} listeners\r\n * like other sign in methods.\r\n *\r\n * The operation fails with an error if the user to be updated belongs to a different Firebase\r\n * project.\r\n *\r\n * This method is not supported by {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param user - The new {@link User}.\r\n *\r\n * @public\r\n */\nfunction updateCurrentUser(auth, user) {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth).updateCurrentUser(user);\n}\n/**\r\n * Signs out the current user.\r\n *\r\n * @remarks\r\n * This method is not supported by {@link Auth} instances created with a\r\n * {@link @firebase/app#FirebaseServerApp}.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n *\r\n * @public\r\n */\nfunction signOut(auth) {\n  return (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth).signOut();\n}\n/**\r\n * Revokes the given access token. Currently only supports Apple OAuth access tokens.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param token - The Apple OAuth access token.\r\n *\r\n * @public\r\n */\nfunction revokeAccessToken(auth, token) {\n  var authInternal = _castAuth(auth);\n  return authInternal.revokeAccessToken(token);\n}\n/**\r\n * Deletes and signs out the user.\r\n *\r\n * @remarks\r\n * Important: this is a security-sensitive operation that requires the user to have recently\r\n * signed in. If this requirement isn't met, ask the user to authenticate again and then call\r\n * {@link reauthenticateWithCredential}.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\nfunction deleteUser(_x181) {\n  return _deleteUser.apply(this, arguments);\n}\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction _deleteUser() {\n  _deleteUser = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee129(user) {\n    return _regeneratorRuntime().wrap(function _callee129$(_context129) {\n      while (1) switch (_context129.prev = _context129.next) {\n        case 0:\n          return _context129.abrupt(\"return\", (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user)[\"delete\"]());\n        case 1:\n        case \"end\":\n          return _context129.stop();\n      }\n    }, _callee129);\n  }));\n  return _deleteUser.apply(this, arguments);\n}\nvar MultiFactorSessionImpl = /*#__PURE__*/function () {\n  function MultiFactorSessionImpl(type, credential, user) {\n    _classCallCheck(this, MultiFactorSessionImpl);\n    this.type = type;\n    this.credential = credential;\n    this.user = user;\n  }\n  return _createClass(MultiFactorSessionImpl, [{\n    key: \"toJSON\",\n    value: function toJSON() {\n      var key = this.type === \"enroll\" /* MultiFactorSessionType.ENROLL */ ? 'idToken' : 'pendingCredential';\n      return {\n        multiFactorSession: _defineProperty({}, key, this.credential)\n      };\n    }\n  }], [{\n    key: \"_fromIdtoken\",\n    value: function _fromIdtoken(idToken, user) {\n      return new MultiFactorSessionImpl(\"enroll\" /* MultiFactorSessionType.ENROLL */, idToken, user);\n    }\n  }, {\n    key: \"_fromMfaPendingCredential\",\n    value: function _fromMfaPendingCredential(mfaPendingCredential) {\n      return new MultiFactorSessionImpl(\"signin\" /* MultiFactorSessionType.SIGN_IN */, mfaPendingCredential);\n    }\n  }, {\n    key: \"fromJSON\",\n    value: function fromJSON(obj) {\n      var _a, _b;\n      if (obj === null || obj === void 0 ? void 0 : obj.multiFactorSession) {\n        if ((_a = obj.multiFactorSession) === null || _a === void 0 ? void 0 : _a.pendingCredential) {\n          return MultiFactorSessionImpl._fromMfaPendingCredential(obj.multiFactorSession.pendingCredential);\n        } else if ((_b = obj.multiFactorSession) === null || _b === void 0 ? void 0 : _b.idToken) {\n          return MultiFactorSessionImpl._fromIdtoken(obj.multiFactorSession.idToken);\n        }\n      }\n      return null;\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar MultiFactorResolverImpl = /*#__PURE__*/function () {\n  function MultiFactorResolverImpl(session, hints, signInResolver) {\n    _classCallCheck(this, MultiFactorResolverImpl);\n    this.session = session;\n    this.hints = hints;\n    this.signInResolver = signInResolver;\n  }\n  /** @internal */\n  return _createClass(MultiFactorResolverImpl, [{\n    key: \"resolveSignIn\",\n    value: function () {\n      var _resolveSignIn = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee53(assertionExtern) {\n        var assertion;\n        return _regeneratorRuntime().wrap(function _callee53$(_context53) {\n          while (1) switch (_context53.prev = _context53.next) {\n            case 0:\n              assertion = assertionExtern;\n              return _context53.abrupt(\"return\", this.signInResolver(assertion));\n            case 2:\n            case \"end\":\n              return _context53.stop();\n          }\n        }, _callee53, this);\n      }));\n      function resolveSignIn(_x182) {\n        return _resolveSignIn.apply(this, arguments);\n      }\n      return resolveSignIn;\n    }()\n  }], [{\n    key: \"_fromError\",\n    value: function _fromError(authExtern, error) {\n      var auth = _castAuth(authExtern);\n      var serverResponse = error.customData._serverResponse;\n      var hints = (serverResponse.mfaInfo || []).map(function (enrollment) {\n        return MultiFactorInfoImpl._fromServerResponse(auth, enrollment);\n      });\n      _assert(serverResponse.mfaPendingCredential, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n      var session = MultiFactorSessionImpl._fromMfaPendingCredential(serverResponse.mfaPendingCredential);\n      return new MultiFactorResolverImpl(session, hints, /*#__PURE__*/function () {\n        var _ref22 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee54(assertion) {\n          var mfaResponse, idTokenResponse, userCredential;\n          return _regeneratorRuntime().wrap(function _callee54$(_context54) {\n            while (1) switch (_context54.prev = _context54.next) {\n              case 0:\n                _context54.next = 2;\n                return assertion._process(auth, session);\n              case 2:\n                mfaResponse = _context54.sent;\n                // Clear out the unneeded fields from the old login response\n                delete serverResponse.mfaInfo;\n                delete serverResponse.mfaPendingCredential;\n                // Use in the new token & refresh token in the old response\n                idTokenResponse = Object.assign(Object.assign({}, serverResponse), {\n                  idToken: mfaResponse.idToken,\n                  refreshToken: mfaResponse.refreshToken\n                }); // TODO: we should collapse this switch statement into UserCredentialImpl._forOperation and have it support the SIGN_IN case\n                _context54.t0 = error.operationType;\n                _context54.next = _context54.t0 === \"signIn\" /* OperationType.SIGN_IN */ ? 9 : _context54.t0 === \"reauthenticate\" /* OperationType.REAUTHENTICATE */ ? 15 : 17;\n                break;\n              case 9:\n                _context54.next = 11;\n                return UserCredentialImpl._fromIdTokenResponse(auth, error.operationType, idTokenResponse);\n              case 11:\n                userCredential = _context54.sent;\n                _context54.next = 14;\n                return auth._updateCurrentUser(userCredential.user);\n              case 14:\n                return _context54.abrupt(\"return\", userCredential);\n              case 15:\n                _assert(error.user, auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n                return _context54.abrupt(\"return\", UserCredentialImpl._forOperation(error.user, error.operationType, idTokenResponse));\n              case 17:\n                _fail(auth, \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n              case 18:\n              case \"end\":\n                return _context54.stop();\n            }\n          }, _callee54);\n        }));\n        return function (_x183) {\n          return _ref22.apply(this, arguments);\n        };\n      }());\n    }\n  }]);\n}();\n/**\r\n * Provides a {@link MultiFactorResolver} suitable for completion of a\r\n * multi-factor flow.\r\n *\r\n * @param auth - The {@link Auth} instance.\r\n * @param error - The {@link MultiFactorError} raised during a sign-in, or\r\n * reauthentication operation.\r\n *\r\n * @public\r\n */\nfunction getMultiFactorResolver(auth, error) {\n  var _a;\n  var authModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(auth);\n  var errorInternal = error;\n  _assert(error.customData.operationType, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  _assert((_a = errorInternal.customData._serverResponse) === null || _a === void 0 ? void 0 : _a.mfaPendingCredential, authModular, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n  return MultiFactorResolverImpl._fromError(authModular, errorInternal);\n}\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction startEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:start\" /* Endpoint.START_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction finalizeEnrollTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:finalize\" /* Endpoint.FINALIZE_MFA_ENROLLMENT */, _addTidIfNecessary(auth, request));\n}\nfunction withdrawMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaEnrollment:withdraw\" /* Endpoint.WITHDRAW_MFA */, _addTidIfNecessary(auth, request));\n}\nvar MultiFactorUserImpl = /*#__PURE__*/function () {\n  function MultiFactorUserImpl(user) {\n    var _this22 = this;\n    _classCallCheck(this, MultiFactorUserImpl);\n    this.user = user;\n    this.enrolledFactors = [];\n    user._onReload(function (userInfo) {\n      if (userInfo.mfaInfo) {\n        _this22.enrolledFactors = userInfo.mfaInfo.map(function (enrollment) {\n          return MultiFactorInfoImpl._fromServerResponse(user.auth, enrollment);\n        });\n      }\n    });\n  }\n  return _createClass(MultiFactorUserImpl, [{\n    key: \"getSession\",\n    value: function () {\n      var _getSession = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee55() {\n        return _regeneratorRuntime().wrap(function _callee55$(_context55) {\n          while (1) switch (_context55.prev = _context55.next) {\n            case 0:\n              _context55.t0 = MultiFactorSessionImpl;\n              _context55.next = 3;\n              return this.user.getIdToken();\n            case 3:\n              _context55.t1 = _context55.sent;\n              _context55.t2 = this.user;\n              return _context55.abrupt(\"return\", _context55.t0._fromIdtoken.call(_context55.t0, _context55.t1, _context55.t2));\n            case 6:\n            case \"end\":\n              return _context55.stop();\n          }\n        }, _callee55, this);\n      }));\n      function getSession() {\n        return _getSession.apply(this, arguments);\n      }\n      return getSession;\n    }()\n  }, {\n    key: \"enroll\",\n    value: function () {\n      var _enroll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee56(assertionExtern, displayName) {\n        var assertion, session, finalizeMfaResponse;\n        return _regeneratorRuntime().wrap(function _callee56$(_context56) {\n          while (1) switch (_context56.prev = _context56.next) {\n            case 0:\n              assertion = assertionExtern;\n              _context56.next = 3;\n              return this.getSession();\n            case 3:\n              session = _context56.sent;\n              _context56.next = 6;\n              return _logoutIfInvalidated(this.user, assertion._process(this.user.auth, session, displayName));\n            case 6:\n              finalizeMfaResponse = _context56.sent;\n              _context56.next = 9;\n              return this.user._updateTokensIfNecessary(finalizeMfaResponse);\n            case 9:\n              return _context56.abrupt(\"return\", this.user.reload());\n            case 10:\n            case \"end\":\n              return _context56.stop();\n          }\n        }, _callee56, this);\n      }));\n      function enroll(_x184, _x185) {\n        return _enroll.apply(this, arguments);\n      }\n      return enroll;\n    }()\n  }, {\n    key: \"unenroll\",\n    value: function () {\n      var _unenroll = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee57(infoOrUid) {\n        var mfaEnrollmentId, idToken, idTokenResponse;\n        return _regeneratorRuntime().wrap(function _callee57$(_context57) {\n          while (1) switch (_context57.prev = _context57.next) {\n            case 0:\n              mfaEnrollmentId = typeof infoOrUid === 'string' ? infoOrUid : infoOrUid.uid;\n              _context57.next = 3;\n              return this.user.getIdToken();\n            case 3:\n              idToken = _context57.sent;\n              _context57.prev = 4;\n              _context57.next = 7;\n              return _logoutIfInvalidated(this.user, withdrawMfa(this.user.auth, {\n                idToken: idToken,\n                mfaEnrollmentId: mfaEnrollmentId\n              }));\n            case 7:\n              idTokenResponse = _context57.sent;\n              // Remove the second factor from the user's list.\n              this.enrolledFactors = this.enrolledFactors.filter(function (_ref23) {\n                var uid = _ref23.uid;\n                return uid !== mfaEnrollmentId;\n              });\n              // Depending on whether the backend decided to revoke the user's session,\n              // the tokenResponse may be empty. If the tokens were not updated (and they\n              // are now invalid), reloading the user will discover this and invalidate\n              // the user's state accordingly.\n              _context57.next = 11;\n              return this.user._updateTokensIfNecessary(idTokenResponse);\n            case 11:\n              _context57.next = 13;\n              return this.user.reload();\n            case 13:\n              _context57.next = 18;\n              break;\n            case 15:\n              _context57.prev = 15;\n              _context57.t0 = _context57[\"catch\"](4);\n              throw _context57.t0;\n            case 18:\n            case \"end\":\n              return _context57.stop();\n          }\n        }, _callee57, this, [[4, 15]]);\n      }));\n      function unenroll(_x186) {\n        return _unenroll.apply(this, arguments);\n      }\n      return unenroll;\n    }()\n  }], [{\n    key: \"_fromUser\",\n    value: function _fromUser(user) {\n      return new MultiFactorUserImpl(user);\n    }\n  }]);\n}();\nvar multiFactorUserCache = new WeakMap();\n/**\r\n * The {@link MultiFactorUser} corresponding to the user.\r\n *\r\n * @remarks\r\n * This is used to access all multi-factor properties and operations related to the user.\r\n *\r\n * @param user - The user.\r\n *\r\n * @public\r\n */\nfunction multiFactor(user) {\n  var userModular = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getModularInstance)(user);\n  if (!multiFactorUserCache.has(userModular)) {\n    multiFactorUserCache.set(userModular, MultiFactorUserImpl._fromUser(userModular));\n  }\n  return multiFactorUserCache.get(userModular);\n}\nvar name = \"@firebase/auth\";\nvar version = \"1.7.9\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nvar AuthInterop = /*#__PURE__*/function () {\n  function AuthInterop(auth) {\n    _classCallCheck(this, AuthInterop);\n    this.auth = auth;\n    this.internalListeners = new Map();\n  }\n  return _createClass(AuthInterop, [{\n    key: \"getUid\",\n    value: function getUid() {\n      var _a;\n      this.assertAuthConfigured();\n      return ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.uid) || null;\n    }\n  }, {\n    key: \"getToken\",\n    value: function () {\n      var _getToken2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee58(forceRefresh) {\n        var accessToken;\n        return _regeneratorRuntime().wrap(function _callee58$(_context58) {\n          while (1) switch (_context58.prev = _context58.next) {\n            case 0:\n              this.assertAuthConfigured();\n              _context58.next = 3;\n              return this.auth._initializationPromise;\n            case 3:\n              if (this.auth.currentUser) {\n                _context58.next = 5;\n                break;\n              }\n              return _context58.abrupt(\"return\", null);\n            case 5:\n              _context58.next = 7;\n              return this.auth.currentUser.getIdToken(forceRefresh);\n            case 7:\n              accessToken = _context58.sent;\n              return _context58.abrupt(\"return\", {\n                accessToken: accessToken\n              });\n            case 9:\n            case \"end\":\n              return _context58.stop();\n          }\n        }, _callee58, this);\n      }));\n      function getToken(_x187) {\n        return _getToken2.apply(this, arguments);\n      }\n      return getToken;\n    }()\n  }, {\n    key: \"addAuthTokenListener\",\n    value: function addAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      if (this.internalListeners.has(listener)) {\n        return;\n      }\n      var unsubscribe = this.auth.onIdTokenChanged(function (user) {\n        listener((user === null || user === void 0 ? void 0 : user.stsTokenManager.accessToken) || null);\n      });\n      this.internalListeners.set(listener, unsubscribe);\n      this.updateProactiveRefresh();\n    }\n  }, {\n    key: \"removeAuthTokenListener\",\n    value: function removeAuthTokenListener(listener) {\n      this.assertAuthConfigured();\n      var unsubscribe = this.internalListeners.get(listener);\n      if (!unsubscribe) {\n        return;\n      }\n      this.internalListeners[\"delete\"](listener);\n      unsubscribe();\n      this.updateProactiveRefresh();\n    }\n  }, {\n    key: \"assertAuthConfigured\",\n    value: function assertAuthConfigured() {\n      _assert(this.auth._initializationPromise, \"dependent-sdk-initialized-before-auth\" /* AuthErrorCode.DEPENDENT_SDK_INIT_BEFORE_AUTH */);\n    }\n  }, {\n    key: \"updateProactiveRefresh\",\n    value: function updateProactiveRefresh() {\n      if (this.internalListeners.size > 0) {\n        this.auth._startProactiveRefresh();\n      } else {\n        this.auth._stopProactiveRefresh();\n      }\n    }\n  }]);\n}();\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction getVersionForPlatform(clientPlatform) {\n  switch (clientPlatform) {\n    case \"Node\" /* ClientPlatform.NODE */:\n      return 'node';\n    case \"ReactNative\" /* ClientPlatform.REACT_NATIVE */:\n      return 'rn';\n    case \"Worker\" /* ClientPlatform.WORKER */:\n      return 'webworker';\n    case \"Cordova\" /* ClientPlatform.CORDOVA */:\n      return 'cordova';\n    case \"WebExtension\" /* ClientPlatform.WEB_EXTENSION */:\n      return 'web-extension';\n    default:\n      return undefined;\n  }\n}\n/** @internal */\nfunction registerAuth(clientPlatform) {\n  (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_2__.Component(\"auth\" /* _ComponentName.AUTH */, function (container, _ref24) {\n    var deps = _ref24.options;\n    var app = container.getProvider('app').getImmediate();\n    var heartbeatServiceProvider = container.getProvider('heartbeat');\n    var appCheckServiceProvider = container.getProvider('app-check-internal');\n    var _app$options = app.options,\n      apiKey = _app$options.apiKey,\n      authDomain = _app$options.authDomain;\n    _assert(apiKey && !apiKey.includes(':'), \"invalid-api-key\" /* AuthErrorCode.INVALID_API_KEY */, {\n      appName: app.name\n    });\n    var config = {\n      apiKey: apiKey,\n      authDomain: authDomain,\n      clientPlatform: clientPlatform,\n      apiHost: \"identitytoolkit.googleapis.com\" /* DefaultConfig.API_HOST */,\n      tokenApiHost: \"securetoken.googleapis.com\" /* DefaultConfig.TOKEN_API_HOST */,\n      apiScheme: \"https\" /* DefaultConfig.API_SCHEME */,\n      sdkClientVersion: _getClientVersion(clientPlatform)\n    };\n    var authInstance = new AuthImpl(app, heartbeatServiceProvider, appCheckServiceProvider, config);\n    _initializeAuthInstance(authInstance, deps);\n    return authInstance;\n  }, \"PUBLIC\" /* ComponentType.PUBLIC */)\n  /**\r\n   * Auth can only be initialized by explicitly calling getAuth() or initializeAuth()\r\n   * For why we do this, See go/firebase-next-auth-init\r\n   */.setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */)\n  /**\r\n   * Because all firebase products that depend on auth depend on auth-internal directly,\r\n   * we need to initialize auth-internal after auth is initialized to make it available to other firebase products.\r\n   */.setInstanceCreatedCallback(function (container, _instanceIdentifier, _instance) {\n    var authInternalProvider = container.getProvider(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */);\n    authInternalProvider.initialize();\n  }));\n  (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent)(new _firebase_component__WEBPACK_IMPORTED_MODULE_2__.Component(\"auth-internal\" /* _ComponentName.AUTH_INTERNAL */, function (container) {\n    var auth = _castAuth(container.getProvider(\"auth\" /* _ComponentName.AUTH */).getImmediate());\n    return function (auth) {\n      return new AuthInterop(auth);\n    }(auth);\n  }, \"PRIVATE\" /* ComponentType.PRIVATE */).setInstantiationMode(\"EXPLICIT\" /* InstantiationMode.EXPLICIT */));\n  (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, getVersionForPlatform(clientPlatform));\n  // BUILD_TARGET will be replaced by values like esm5, esm2017, cjs5, etc during the compilation\n  (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'esm2017');\n}\n\n/**\r\n * @license\r\n * Copyright 2021 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\n// Initialize the fetch polyfill, the types are slightly off so just cast and hope for the best\nFetchProvider.initialize(undici__WEBPACK_IMPORTED_MODULE_3__.fetch, undici__WEBPACK_IMPORTED_MODULE_3__.Headers, undici__WEBPACK_IMPORTED_MODULE_3__.Response);\n// First, we set up the various platform-specific features for Node (register\n// the version and declare the Node getAuth function)\nfunction getAuth() {\n  var app = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp)();\n  var provider = (0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider)(app, 'auth');\n  if (provider.isInitialized()) {\n    return provider.getImmediate();\n  }\n  var auth = initializeAuth(app);\n  var authEmulatorHost = (0,_firebase_util__WEBPACK_IMPORTED_MODULE_1__.getDefaultEmulatorHost)('auth');\n  if (authEmulatorHost) {\n    connectAuthEmulator(auth, \"http://\".concat(authEmulatorHost));\n  }\n  return auth;\n}\nregisterAuth(\"Node\" /* ClientPlatform.NODE */);\n// The rest of this file contains no-ops and errors for browser-specific\n// methods. We keep the browser and Node entry points the same, but features\n// that only work in browsers are set to either do nothing (setPersistence) or\n// to reject with an auth/operation-not-supported-in-this-environment error.\n// The below exports are pulled into the main entry point by a rollup alias\n// plugin (overwriting the default browser imports).\n/** auth/operation-not-supported-in-this-environment */\nvar NOT_AVAILABLE_ERROR = _createError(\"operation-not-supported-in-this-environment\" /* AuthErrorCode.OPERATION_NOT_SUPPORTED */);\n/** Reject with auth/operation-not-supported-in-this-environment */\nfunction fail() {\n  return _fail2.apply(this, arguments);\n}\n/**\r\n * A class which will throw with\r\n * auth/operation-not-supported-in-this-environment if instantiated\r\n */\nfunction _fail2() {\n  _fail2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee130() {\n    return _regeneratorRuntime().wrap(function _callee130$(_context130) {\n      while (1) switch (_context130.prev = _context130.next) {\n        case 0:\n          throw NOT_AVAILABLE_ERROR;\n        case 1:\n        case \"end\":\n          return _context130.stop();\n      }\n    }, _callee130);\n  }));\n  return _fail2.apply(this, arguments);\n}\nvar FailClass = /*#__PURE__*/_createClass(function FailClass() {\n  _classCallCheck(this, FailClass);\n  throw NOT_AVAILABLE_ERROR;\n});\nvar browserLocalPersistence = inMemoryPersistence;\nvar browserSessionPersistence = inMemoryPersistence;\nvar indexedDBLocalPersistence = inMemoryPersistence;\nvar browserPopupRedirectResolver = NOT_AVAILABLE_ERROR;\nvar PhoneAuthProvider = FailClass;\nvar signInWithPhoneNumber = fail;\nvar linkWithPhoneNumber = fail;\nvar reauthenticateWithPhoneNumber = fail;\nvar updatePhoneNumber = fail;\nvar signInWithPopup = fail;\nvar linkWithPopup = fail;\nvar reauthenticateWithPopup = fail;\nvar signInWithRedirect = fail;\nvar linkWithRedirect = fail;\nvar reauthenticateWithRedirect = fail;\nvar getRedirectResult = fail;\nvar RecaptchaVerifier = FailClass;\nvar PhoneMultiFactorGenerator = /*#__PURE__*/function () {\n  function PhoneMultiFactorGenerator() {\n    _classCallCheck(this, PhoneMultiFactorGenerator);\n  }\n  return _createClass(PhoneMultiFactorGenerator, null, [{\n    key: \"assertion\",\n    value: function assertion() {\n      throw NOT_AVAILABLE_ERROR;\n    }\n  }]);\n}(); // Set persistence should no-op instead of fail. Changing the prototype will\n// make sure both setPersistence(auth, persistence) and\n// auth.setPersistence(persistence) are covered.\nAuthImpl.prototype.setPersistence = /*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee59() {\n  return _regeneratorRuntime().wrap(function _callee59$(_context59) {\n    while (1) switch (_context59.prev = _context59.next) {\n      case 0:\n      case \"end\":\n        return _context59.stop();\n    }\n  }, _callee59);\n}));\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\nfunction finalizeSignInTotpMfa(auth, request) {\n  return _performApiRequest(auth, \"POST\" /* HttpMethod.POST */, \"/v2/accounts/mfaSignIn:finalize\" /* Endpoint.FINALIZE_MFA_SIGN_IN */, _addTidIfNecessary(auth, request));\n}\nvar MultiFactorAssertionImpl = /*#__PURE__*/function () {\n  function MultiFactorAssertionImpl(factorId) {\n    _classCallCheck(this, MultiFactorAssertionImpl);\n    this.factorId = factorId;\n  }\n  return _createClass(MultiFactorAssertionImpl, [{\n    key: \"_process\",\n    value: function _process(auth, session, displayName) {\n      switch (session.type) {\n        case \"enroll\" /* MultiFactorSessionType.ENROLL */:\n          return this._finalizeEnroll(auth, session.credential, displayName);\n        case \"signin\" /* MultiFactorSessionType.SIGN_IN */:\n          return this._finalizeSignIn(auth, session.credential);\n        default:\n          return debugFail('unexpected MultiFactorSessionType');\n      }\n    }\n  }]);\n}();\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * @public\r\n */\nvar TotpMultiFactorGenerator = /*#__PURE__*/function () {\n  function TotpMultiFactorGenerator() {\n    _classCallCheck(this, TotpMultiFactorGenerator);\n  }\n  return _createClass(TotpMultiFactorGenerator, null, [{\n    key: \"assertionForEnrollment\",\n    value:\n    /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of\r\n     * the TOTP (time-based one-time password) second factor.\r\n     * This assertion is used to complete enrollment in TOTP second factor.\r\n     *\r\n     * @param secret A {@link TotpSecret} containing the shared secret key and other TOTP parameters.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorUser.enroll}.\r\n     */\n    function assertionForEnrollment(secret, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromSecret(secret, oneTimePassword);\n    }\n    /**\r\n     * Provides a {@link TotpMultiFactorAssertion} to confirm ownership of the TOTP second factor.\r\n     * This assertion is used to complete signIn with TOTP as the second factor.\r\n     *\r\n     * @param enrollmentId identifies the enrolled TOTP second factor.\r\n     * @param oneTimePassword One-time password from TOTP App.\r\n     * @returns A {@link TotpMultiFactorAssertion} which can be used with\r\n     * {@link MultiFactorResolver.resolveSignIn}.\r\n     */\n  }, {\n    key: \"assertionForSignIn\",\n    value: function assertionForSignIn(enrollmentId, oneTimePassword) {\n      return TotpMultiFactorAssertionImpl._fromEnrollmentId(enrollmentId, oneTimePassword);\n    }\n    /**\r\n     * Returns a promise to {@link TotpSecret} which contains the TOTP shared secret key and other parameters.\r\n     * Creates a TOTP secret as part of enrolling a TOTP second factor.\r\n     * Used for generating a QR code URL or inputting into a TOTP app.\r\n     * This method uses the auth instance corresponding to the user in the multiFactorSession.\r\n     *\r\n     * @param session The {@link MultiFactorSession} that the user is part of.\r\n     * @returns A promise to {@link TotpSecret}.\r\n     */\n  }, {\n    key: \"generateSecret\",\n    value: (function () {\n      var _generateSecret = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee60(session) {\n        var _a, mfaSession, response;\n        return _regeneratorRuntime().wrap(function _callee60$(_context60) {\n          while (1) switch (_context60.prev = _context60.next) {\n            case 0:\n              mfaSession = session;\n              _assert(typeof ((_a = mfaSession.user) === null || _a === void 0 ? void 0 : _a.auth) !== 'undefined', \"internal-error\" /* AuthErrorCode.INTERNAL_ERROR */);\n              _context60.next = 4;\n              return startEnrollTotpMfa(mfaSession.user.auth, {\n                idToken: mfaSession.credential,\n                totpEnrollmentInfo: {}\n              });\n            case 4:\n              response = _context60.sent;\n              return _context60.abrupt(\"return\", TotpSecret._fromStartTotpMfaEnrollmentResponse(response, mfaSession.user.auth));\n            case 6:\n            case \"end\":\n              return _context60.stop();\n          }\n        }, _callee60);\n      }));\n      function generateSecret(_x188) {\n        return _generateSecret.apply(this, arguments);\n      }\n      return generateSecret;\n    }())\n  }]);\n}();\n/**\r\n * The identifier of the TOTP second factor: `totp`.\r\n */\nTotpMultiFactorGenerator.FACTOR_ID = \"totp\" /* FactorId.TOTP */;\nvar TotpMultiFactorAssertionImpl = /*#__PURE__*/function (_MultiFactorAssertion) {\n  function TotpMultiFactorAssertionImpl(otp, enrollmentId, secret) {\n    var _this23;\n    _classCallCheck(this, TotpMultiFactorAssertionImpl);\n    _this23 = _callSuper(this, TotpMultiFactorAssertionImpl, [\"totp\" /* FactorId.TOTP */]);\n    _this23.otp = otp;\n    _this23.enrollmentId = enrollmentId;\n    _this23.secret = secret;\n    return _this23;\n  }\n  /** @internal */\n  _inherits(TotpMultiFactorAssertionImpl, _MultiFactorAssertion);\n  return _createClass(TotpMultiFactorAssertionImpl, [{\n    key: \"_finalizeEnroll\",\n    value: (/** @internal */function () {\n      var _finalizeEnroll2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee61(auth, idToken, displayName) {\n        return _regeneratorRuntime().wrap(function _callee61$(_context61) {\n          while (1) switch (_context61.prev = _context61.next) {\n            case 0:\n              _assert(typeof this.secret !== 'undefined', auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              return _context61.abrupt(\"return\", finalizeEnrollTotpMfa(auth, {\n                idToken: idToken,\n                displayName: displayName,\n                totpVerificationInfo: this.secret._makeTotpVerificationInfo(this.otp)\n              }));\n            case 2:\n            case \"end\":\n              return _context61.stop();\n          }\n        }, _callee61, this);\n      }));\n      function _finalizeEnroll(_x189, _x190, _x191) {\n        return _finalizeEnroll2.apply(this, arguments);\n      }\n      return _finalizeEnroll;\n    }() /** @internal */)\n  }, {\n    key: \"_finalizeSignIn\",\n    value: (function () {\n      var _finalizeSignIn2 = _asyncToGenerator(/*#__PURE__*/_regeneratorRuntime().mark(function _callee62(auth, mfaPendingCredential) {\n        var totpVerificationInfo;\n        return _regeneratorRuntime().wrap(function _callee62$(_context62) {\n          while (1) switch (_context62.prev = _context62.next) {\n            case 0:\n              _assert(this.enrollmentId !== undefined && this.otp !== undefined, auth, \"argument-error\" /* AuthErrorCode.ARGUMENT_ERROR */);\n              totpVerificationInfo = {\n                verificationCode: this.otp\n              };\n              return _context62.abrupt(\"return\", finalizeSignInTotpMfa(auth, {\n                mfaPendingCredential: mfaPendingCredential,\n                mfaEnrollmentId: this.enrollmentId,\n                totpVerificationInfo: totpVerificationInfo\n              }));\n            case 3:\n            case \"end\":\n              return _context62.stop();\n          }\n        }, _callee62, this);\n      }));\n      function _finalizeSignIn(_x192, _x193) {\n        return _finalizeSignIn2.apply(this, arguments);\n      }\n      return _finalizeSignIn;\n    }())\n  }], [{\n    key: \"_fromSecret\",\n    value: function _fromSecret(secret, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, undefined, secret);\n    }\n    /** @internal */\n  }, {\n    key: \"_fromEnrollmentId\",\n    value: function _fromEnrollmentId(enrollmentId, otp) {\n      return new TotpMultiFactorAssertionImpl(otp, enrollmentId);\n    }\n  }]);\n}(MultiFactorAssertionImpl);\n/**\r\n * Provider for generating a {@link TotpMultiFactorAssertion}.\r\n *\r\n * Stores the shared secret key and other parameters to generate time-based OTPs.\r\n * Implements methods to retrieve the shared secret key and generate a QR code URL.\r\n * @public\r\n */\nvar TotpSecret = /*#__PURE__*/function () {\n  // The public members are declared outside the constructor so the docs can be generated.\n  function TotpSecret(secretKey, hashingAlgorithm, codeLength, codeIntervalSeconds, enrollmentCompletionDeadline, sessionInfo, auth) {\n    _classCallCheck(this, TotpSecret);\n    this.sessionInfo = sessionInfo;\n    this.auth = auth;\n    this.secretKey = secretKey;\n    this.hashingAlgorithm = hashingAlgorithm;\n    this.codeLength = codeLength;\n    this.codeIntervalSeconds = codeIntervalSeconds;\n    this.enrollmentCompletionDeadline = enrollmentCompletionDeadline;\n  }\n  /** @internal */\n  return _createClass(TotpSecret, [{\n    key: \"_makeTotpVerificationInfo\",\n    value: /** @internal */\n    function _makeTotpVerificationInfo(otp) {\n      return {\n        sessionInfo: this.sessionInfo,\n        verificationCode: otp\n      };\n    }\n    /**\r\n     * Returns a QR code URL as described in\r\n     * https://github.com/google/google-authenticator/wiki/Key-Uri-Format\r\n     * This can be displayed to the user as a QR code to be scanned into a TOTP app like Google Authenticator.\r\n     * If the optional parameters are unspecified, an accountName of <userEmail> and issuer of <firebaseAppName> are used.\r\n     *\r\n     * @param accountName the name of the account/app along with a user identifier.\r\n     * @param issuer issuer of the TOTP (likely the app name).\r\n     * @returns A QR code URL string.\r\n     */\n  }, {\n    key: \"generateQrCodeUrl\",\n    value: function generateQrCodeUrl(accountName, issuer) {\n      var _a;\n      var useDefaults = false;\n      if (_isEmptyString(accountName) || _isEmptyString(issuer)) {\n        useDefaults = true;\n      }\n      if (useDefaults) {\n        if (_isEmptyString(accountName)) {\n          accountName = ((_a = this.auth.currentUser) === null || _a === void 0 ? void 0 : _a.email) || 'unknownuser';\n        }\n        if (_isEmptyString(issuer)) {\n          issuer = this.auth.name;\n        }\n      }\n      return \"otpauth://totp/\".concat(issuer, \":\").concat(accountName, \"?secret=\").concat(this.secretKey, \"&issuer=\").concat(issuer, \"&algorithm=\").concat(this.hashingAlgorithm, \"&digits=\").concat(this.codeLength);\n    }\n  }], [{\n    key: \"_fromStartTotpMfaEnrollmentResponse\",\n    value: function _fromStartTotpMfaEnrollmentResponse(response, auth) {\n      return new TotpSecret(response.totpSessionInfo.sharedSecretKey, response.totpSessionInfo.hashingAlgorithm, response.totpSessionInfo.verificationCodeLength, response.totpSessionInfo.periodSec, new Date(response.totpSessionInfo.finalizeEnrollmentTime).toUTCString(), response.totpSessionInfo.sessionInfo, auth);\n    }\n  }]);\n}();\n/** @internal */\nfunction _isEmptyString(input) {\n  return typeof input === 'undefined' || (input === null || input === void 0 ? void 0 : input.length) === 0;\n}\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/firebase/node_modules/@firebase/auth/dist/node-esm/totp-219bb96f.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/firebase/app/dist/index.mjs":
/*!**************************************************!*\
  !*** ./node_modules/firebase/app/dist/index.mjs ***!
  \**************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   FirebaseError: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.FirebaseError),\n/* harmony export */   SDK_VERSION: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.SDK_VERSION),\n/* harmony export */   _DEFAULT_ENTRY_NAME: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._DEFAULT_ENTRY_NAME),\n/* harmony export */   _addComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addComponent),\n/* harmony export */   _addOrOverwriteComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._addOrOverwriteComponent),\n/* harmony export */   _apps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._apps),\n/* harmony export */   _clearComponents: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._clearComponents),\n/* harmony export */   _components: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._components),\n/* harmony export */   _getProvider: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._getProvider),\n/* harmony export */   _isFirebaseApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseApp),\n/* harmony export */   _isFirebaseServerApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._isFirebaseServerApp),\n/* harmony export */   _registerComponent: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._registerComponent),\n/* harmony export */   _removeServiceInstance: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._removeServiceInstance),\n/* harmony export */   _serverApps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__._serverApps),\n/* harmony export */   deleteApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.deleteApp),\n/* harmony export */   getApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApp),\n/* harmony export */   getApps: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.getApps),\n/* harmony export */   initializeApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeApp),\n/* harmony export */   initializeServerApp: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.initializeServerApp),\n/* harmony export */   onLog: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.onLog),\n/* harmony export */   registerVersion: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _firebase_app__WEBPACK_IMPORTED_MODULE_0__.setLogLevel)\n/* harmony export */ });\n/* harmony import */ var _firebase_app__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/app */ \"(ssr)/./node_modules/@firebase/app/dist/esm/index.esm2017.js\");\n\n\n\nvar name = \"firebase\";\nvar version = \"10.14.1\";\n\n/**\r\n * @license\r\n * Copyright 2020 Google LLC\r\n *\r\n * Licensed under the Apache License, Version 2.0 (the \"License\");\r\n * you may not use this file except in compliance with the License.\r\n * You may obtain a copy of the License at\r\n *\r\n *   http://www.apache.org/licenses/LICENSE-2.0\r\n *\r\n * Unless required by applicable law or agreed to in writing, software\r\n * distributed under the License is distributed on an \"AS IS\" BASIS,\r\n * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\r\n * See the License for the specific language governing permissions and\r\n * limitations under the License.\r\n */\r\n(0,_firebase_app__WEBPACK_IMPORTED_MODULE_0__.registerVersion)(name, version, 'app');\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXBwL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWdEO0FBQ2xCOztBQUU5QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsOERBQWU7QUFDZiIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9hcHAvZGlzdC9pbmRleC5tanM/YmFhMyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyByZWdpc3RlclZlcnNpb24gfSBmcm9tICdAZmlyZWJhc2UvYXBwJztcbmV4cG9ydCAqIGZyb20gJ0BmaXJlYmFzZS9hcHAnO1xuXG52YXIgbmFtZSA9IFwiZmlyZWJhc2VcIjtcbnZhciB2ZXJzaW9uID0gXCIxMC4xNC4xXCI7XG5cbi8qKlxyXG4gKiBAbGljZW5zZVxyXG4gKiBDb3B5cmlnaHQgMjAyMCBHb29nbGUgTExDXHJcbiAqXHJcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBBcGFjaGUgTGljZW5zZSwgVmVyc2lvbiAyLjAgKHRoZSBcIkxpY2Vuc2VcIik7XHJcbiAqIHlvdSBtYXkgbm90IHVzZSB0aGlzIGZpbGUgZXhjZXB0IGluIGNvbXBsaWFuY2Ugd2l0aCB0aGUgTGljZW5zZS5cclxuICogWW91IG1heSBvYnRhaW4gYSBjb3B5IG9mIHRoZSBMaWNlbnNlIGF0XHJcbiAqXHJcbiAqICAgaHR0cDovL3d3dy5hcGFjaGUub3JnL2xpY2Vuc2VzL0xJQ0VOU0UtMi4wXHJcbiAqXHJcbiAqIFVubGVzcyByZXF1aXJlZCBieSBhcHBsaWNhYmxlIGxhdyBvciBhZ3JlZWQgdG8gaW4gd3JpdGluZywgc29mdHdhcmVcclxuICogZGlzdHJpYnV0ZWQgdW5kZXIgdGhlIExpY2Vuc2UgaXMgZGlzdHJpYnV0ZWQgb24gYW4gXCJBUyBJU1wiIEJBU0lTLFxyXG4gKiBXSVRIT1VUIFdBUlJBTlRJRVMgT1IgQ09ORElUSU9OUyBPRiBBTlkgS0lORCwgZWl0aGVyIGV4cHJlc3Mgb3IgaW1wbGllZC5cclxuICogU2VlIHRoZSBMaWNlbnNlIGZvciB0aGUgc3BlY2lmaWMgbGFuZ3VhZ2UgZ292ZXJuaW5nIHBlcm1pc3Npb25zIGFuZFxyXG4gKiBsaW1pdGF0aW9ucyB1bmRlciB0aGUgTGljZW5zZS5cclxuICovXHJcbnJlZ2lzdGVyVmVyc2lvbihuYW1lLCB2ZXJzaW9uLCAnYXBwJyk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/firebase/app/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/firebase/auth/dist/index.mjs":
/*!***************************************************!*\
  !*** ./node_modules/firebase/auth/dist/index.mjs ***!
  \***************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   ActionCodeOperation: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.ActionCodeOperation),\n/* harmony export */   ActionCodeURL: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.ActionCodeURL),\n/* harmony export */   AuthCredential: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.AuthCredential),\n/* harmony export */   AuthErrorCodes: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.AuthErrorCodes),\n/* harmony export */   EmailAuthCredential: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthCredential),\n/* harmony export */   EmailAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.EmailAuthProvider),\n/* harmony export */   FacebookAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.FacebookAuthProvider),\n/* harmony export */   FactorId: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.FactorId),\n/* harmony export */   GithubAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.GithubAuthProvider),\n/* harmony export */   GoogleAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.GoogleAuthProvider),\n/* harmony export */   OAuthCredential: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.OAuthCredential),\n/* harmony export */   OAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.OAuthProvider),\n/* harmony export */   OperationType: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.OperationType),\n/* harmony export */   PhoneAuthCredential: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.PhoneAuthCredential),\n/* harmony export */   PhoneAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.PhoneAuthProvider),\n/* harmony export */   PhoneMultiFactorGenerator: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.PhoneMultiFactorGenerator),\n/* harmony export */   ProviderId: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.ProviderId),\n/* harmony export */   RecaptchaVerifier: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.RecaptchaVerifier),\n/* harmony export */   SAMLAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.SAMLAuthProvider),\n/* harmony export */   SignInMethod: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.SignInMethod),\n/* harmony export */   TotpMultiFactorGenerator: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.TotpMultiFactorGenerator),\n/* harmony export */   TotpSecret: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.TotpSecret),\n/* harmony export */   TwitterAuthProvider: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.TwitterAuthProvider),\n/* harmony export */   applyActionCode: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.applyActionCode),\n/* harmony export */   beforeAuthStateChanged: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.beforeAuthStateChanged),\n/* harmony export */   browserLocalPersistence: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.browserLocalPersistence),\n/* harmony export */   browserPopupRedirectResolver: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.browserPopupRedirectResolver),\n/* harmony export */   browserSessionPersistence: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.browserSessionPersistence),\n/* harmony export */   checkActionCode: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.checkActionCode),\n/* harmony export */   confirmPasswordReset: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.confirmPasswordReset),\n/* harmony export */   connectAuthEmulator: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.connectAuthEmulator),\n/* harmony export */   createUserWithEmailAndPassword: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.createUserWithEmailAndPassword),\n/* harmony export */   debugErrorMap: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.debugErrorMap),\n/* harmony export */   deleteUser: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.deleteUser),\n/* harmony export */   fetchSignInMethodsForEmail: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.fetchSignInMethodsForEmail),\n/* harmony export */   getAdditionalUserInfo: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getAdditionalUserInfo),\n/* harmony export */   getAuth: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getAuth),\n/* harmony export */   getIdToken: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getIdToken),\n/* harmony export */   getIdTokenResult: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getIdTokenResult),\n/* harmony export */   getMultiFactorResolver: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getMultiFactorResolver),\n/* harmony export */   getRedirectResult: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.getRedirectResult),\n/* harmony export */   inMemoryPersistence: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.inMemoryPersistence),\n/* harmony export */   indexedDBLocalPersistence: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.indexedDBLocalPersistence),\n/* harmony export */   initializeAuth: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.initializeAuth),\n/* harmony export */   initializeRecaptchaConfig: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.initializeRecaptchaConfig),\n/* harmony export */   isSignInWithEmailLink: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.isSignInWithEmailLink),\n/* harmony export */   linkWithCredential: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithCredential),\n/* harmony export */   linkWithPhoneNumber: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithPhoneNumber),\n/* harmony export */   linkWithPopup: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithPopup),\n/* harmony export */   linkWithRedirect: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.linkWithRedirect),\n/* harmony export */   multiFactor: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.multiFactor),\n/* harmony export */   onAuthStateChanged: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.onAuthStateChanged),\n/* harmony export */   onIdTokenChanged: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.onIdTokenChanged),\n/* harmony export */   parseActionCodeURL: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.parseActionCodeURL),\n/* harmony export */   prodErrorMap: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.prodErrorMap),\n/* harmony export */   reauthenticateWithCredential: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithCredential),\n/* harmony export */   reauthenticateWithPhoneNumber: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithPhoneNumber),\n/* harmony export */   reauthenticateWithPopup: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithPopup),\n/* harmony export */   reauthenticateWithRedirect: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reauthenticateWithRedirect),\n/* harmony export */   reload: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.reload),\n/* harmony export */   revokeAccessToken: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.revokeAccessToken),\n/* harmony export */   sendEmailVerification: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.sendEmailVerification),\n/* harmony export */   sendPasswordResetEmail: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.sendPasswordResetEmail),\n/* harmony export */   sendSignInLinkToEmail: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.sendSignInLinkToEmail),\n/* harmony export */   setPersistence: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.setPersistence),\n/* harmony export */   signInAnonymously: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInAnonymously),\n/* harmony export */   signInWithCredential: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithCredential),\n/* harmony export */   signInWithCustomToken: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithCustomToken),\n/* harmony export */   signInWithEmailAndPassword: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithEmailAndPassword),\n/* harmony export */   signInWithEmailLink: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithEmailLink),\n/* harmony export */   signInWithPhoneNumber: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPhoneNumber),\n/* harmony export */   signInWithPopup: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithPopup),\n/* harmony export */   signInWithRedirect: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signInWithRedirect),\n/* harmony export */   signOut: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.signOut),\n/* harmony export */   unlink: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.unlink),\n/* harmony export */   updateCurrentUser: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updateCurrentUser),\n/* harmony export */   updateEmail: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updateEmail),\n/* harmony export */   updatePassword: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updatePassword),\n/* harmony export */   updatePhoneNumber: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updatePhoneNumber),\n/* harmony export */   updateProfile: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.updateProfile),\n/* harmony export */   useDeviceLanguage: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.useDeviceLanguage),\n/* harmony export */   validatePassword: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.validatePassword),\n/* harmony export */   verifyBeforeUpdateEmail: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.verifyBeforeUpdateEmail),\n/* harmony export */   verifyPasswordResetCode: () => (/* reexport safe */ _firebase_auth__WEBPACK_IMPORTED_MODULE_0__.verifyPasswordResetCode)\n/* harmony export */ });\n/* harmony import */ var _firebase_auth__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/auth */ \"(ssr)/./node_modules/firebase/node_modules/@firebase/auth/dist/node-esm/index.js\");\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvYXV0aC9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQStCO0FBQy9CIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL2F1dGgvZGlzdC9pbmRleC5tanM/ODI4OSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICdAZmlyZWJhc2UvYXV0aCc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/firebase/auth/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/firebase/firestore/dist/index.mjs":
/*!********************************************************!*\
  !*** ./node_modules/firebase/firestore/dist/index.mjs ***!
  \********************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   AbstractUserDataWriter: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.AbstractUserDataWriter),\n/* harmony export */   AggregateField: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.AggregateField),\n/* harmony export */   AggregateQuerySnapshot: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.AggregateQuerySnapshot),\n/* harmony export */   Bytes: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Bytes),\n/* harmony export */   CACHE_SIZE_UNLIMITED: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.CACHE_SIZE_UNLIMITED),\n/* harmony export */   CollectionReference: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.CollectionReference),\n/* harmony export */   DocumentReference: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.DocumentReference),\n/* harmony export */   DocumentSnapshot: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.DocumentSnapshot),\n/* harmony export */   FieldPath: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.FieldPath),\n/* harmony export */   FieldValue: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.FieldValue),\n/* harmony export */   Firestore: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Firestore),\n/* harmony export */   FirestoreError: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.FirestoreError),\n/* harmony export */   GeoPoint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.GeoPoint),\n/* harmony export */   LoadBundleTask: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.LoadBundleTask),\n/* harmony export */   PersistentCacheIndexManager: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.PersistentCacheIndexManager),\n/* harmony export */   Query: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Query),\n/* harmony export */   QueryCompositeFilterConstraint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryCompositeFilterConstraint),\n/* harmony export */   QueryConstraint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryConstraint),\n/* harmony export */   QueryDocumentSnapshot: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryDocumentSnapshot),\n/* harmony export */   QueryEndAtConstraint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryEndAtConstraint),\n/* harmony export */   QueryFieldFilterConstraint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryFieldFilterConstraint),\n/* harmony export */   QueryLimitConstraint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryLimitConstraint),\n/* harmony export */   QueryOrderByConstraint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryOrderByConstraint),\n/* harmony export */   QuerySnapshot: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QuerySnapshot),\n/* harmony export */   QueryStartAtConstraint: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.QueryStartAtConstraint),\n/* harmony export */   SnapshotMetadata: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.SnapshotMetadata),\n/* harmony export */   Timestamp: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Timestamp),\n/* harmony export */   Transaction: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.Transaction),\n/* harmony export */   VectorValue: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.VectorValue),\n/* harmony export */   WriteBatch: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.WriteBatch),\n/* harmony export */   _AutoId: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._AutoId),\n/* harmony export */   _ByteString: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._ByteString),\n/* harmony export */   _DatabaseId: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._DatabaseId),\n/* harmony export */   _DocumentKey: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._DocumentKey),\n/* harmony export */   _EmptyAppCheckTokenProvider: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._EmptyAppCheckTokenProvider),\n/* harmony export */   _EmptyAuthCredentialsProvider: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._EmptyAuthCredentialsProvider),\n/* harmony export */   _FieldPath: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._FieldPath),\n/* harmony export */   _TestingHooks: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._TestingHooks),\n/* harmony export */   _cast: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._cast),\n/* harmony export */   _debugAssert: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._debugAssert),\n/* harmony export */   _internalAggregationQueryToProtoRunAggregationQueryRequest: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._internalAggregationQueryToProtoRunAggregationQueryRequest),\n/* harmony export */   _internalQueryToProtoQueryTarget: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._internalQueryToProtoQueryTarget),\n/* harmony export */   _isBase64Available: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._isBase64Available),\n/* harmony export */   _logWarn: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._logWarn),\n/* harmony export */   _validateIsNotUsedTogether: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__._validateIsNotUsedTogether),\n/* harmony export */   addDoc: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.addDoc),\n/* harmony export */   aggregateFieldEqual: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.aggregateFieldEqual),\n/* harmony export */   aggregateQuerySnapshotEqual: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.aggregateQuerySnapshotEqual),\n/* harmony export */   and: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.and),\n/* harmony export */   arrayRemove: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.arrayRemove),\n/* harmony export */   arrayUnion: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.arrayUnion),\n/* harmony export */   average: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.average),\n/* harmony export */   clearIndexedDbPersistence: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.clearIndexedDbPersistence),\n/* harmony export */   collection: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collection),\n/* harmony export */   collectionGroup: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.collectionGroup),\n/* harmony export */   connectFirestoreEmulator: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.connectFirestoreEmulator),\n/* harmony export */   count: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.count),\n/* harmony export */   deleteAllPersistentCacheIndexes: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteAllPersistentCacheIndexes),\n/* harmony export */   deleteDoc: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteDoc),\n/* harmony export */   deleteField: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.deleteField),\n/* harmony export */   disableNetwork: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.disableNetwork),\n/* harmony export */   disablePersistentCacheIndexAutoCreation: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.disablePersistentCacheIndexAutoCreation),\n/* harmony export */   doc: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.doc),\n/* harmony export */   documentId: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.documentId),\n/* harmony export */   enableIndexedDbPersistence: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.enableIndexedDbPersistence),\n/* harmony export */   enableMultiTabIndexedDbPersistence: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.enableMultiTabIndexedDbPersistence),\n/* harmony export */   enableNetwork: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.enableNetwork),\n/* harmony export */   enablePersistentCacheIndexAutoCreation: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.enablePersistentCacheIndexAutoCreation),\n/* harmony export */   endAt: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.endAt),\n/* harmony export */   endBefore: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.endBefore),\n/* harmony export */   ensureFirestoreConfigured: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.ensureFirestoreConfigured),\n/* harmony export */   executeWrite: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.executeWrite),\n/* harmony export */   getAggregateFromServer: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getAggregateFromServer),\n/* harmony export */   getCountFromServer: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getCountFromServer),\n/* harmony export */   getDoc: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDoc),\n/* harmony export */   getDocFromCache: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocFromCache),\n/* harmony export */   getDocFromServer: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocFromServer),\n/* harmony export */   getDocs: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocs),\n/* harmony export */   getDocsFromCache: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocsFromCache),\n/* harmony export */   getDocsFromServer: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getDocsFromServer),\n/* harmony export */   getFirestore: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getFirestore),\n/* harmony export */   getPersistentCacheIndexManager: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.getPersistentCacheIndexManager),\n/* harmony export */   increment: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.increment),\n/* harmony export */   initializeFirestore: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.initializeFirestore),\n/* harmony export */   limit: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limit),\n/* harmony export */   limitToLast: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.limitToLast),\n/* harmony export */   loadBundle: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.loadBundle),\n/* harmony export */   memoryEagerGarbageCollector: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.memoryEagerGarbageCollector),\n/* harmony export */   memoryLocalCache: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.memoryLocalCache),\n/* harmony export */   memoryLruGarbageCollector: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.memoryLruGarbageCollector),\n/* harmony export */   namedQuery: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.namedQuery),\n/* harmony export */   onSnapshot: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshot),\n/* harmony export */   onSnapshotsInSync: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.onSnapshotsInSync),\n/* harmony export */   or: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.or),\n/* harmony export */   orderBy: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.orderBy),\n/* harmony export */   persistentLocalCache: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.persistentLocalCache),\n/* harmony export */   persistentMultipleTabManager: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.persistentMultipleTabManager),\n/* harmony export */   persistentSingleTabManager: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.persistentSingleTabManager),\n/* harmony export */   query: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.query),\n/* harmony export */   queryEqual: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.queryEqual),\n/* harmony export */   refEqual: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.refEqual),\n/* harmony export */   runTransaction: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.runTransaction),\n/* harmony export */   serverTimestamp: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.serverTimestamp),\n/* harmony export */   setDoc: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setDoc),\n/* harmony export */   setIndexConfiguration: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setIndexConfiguration),\n/* harmony export */   setLogLevel: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.setLogLevel),\n/* harmony export */   snapshotEqual: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.snapshotEqual),\n/* harmony export */   startAfter: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.startAfter),\n/* harmony export */   startAt: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.startAt),\n/* harmony export */   sum: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.sum),\n/* harmony export */   terminate: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.terminate),\n/* harmony export */   updateDoc: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.updateDoc),\n/* harmony export */   vector: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.vector),\n/* harmony export */   waitForPendingWrites: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.waitForPendingWrites),\n/* harmony export */   where: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.where),\n/* harmony export */   writeBatch: () => (/* reexport safe */ _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__.writeBatch)\n/* harmony export */ });\n/* harmony import */ var _firebase_firestore__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/firestore */ \"(ssr)/./node_modules/@firebase/firestore/dist/index.node.mjs\");\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmlyZWJhc2UvZmlyZXN0b3JlL2Rpc3QvaW5kZXgubWpzIiwibWFwcGluZ3MiOiI7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFvQztBQUNwQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9maXJlYmFzZS9maXJlc3RvcmUvZGlzdC9pbmRleC5tanM/Nzk0NiJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICdAZmlyZWJhc2UvZmlyZXN0b3JlJztcbi8vIyBzb3VyY2VNYXBwaW5nVVJMPWluZGV4Lm1qcy5tYXBcbiJdLCJuYW1lcyI6W10sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/firebase/firestore/dist/index.mjs\n");

/***/ }),

/***/ "(ssr)/./node_modules/firebase/storage/dist/index.mjs":
/*!******************************************************!*\
  !*** ./node_modules/firebase/storage/dist/index.mjs ***!
  \******************************************************/
/***/ ((__unused_webpack___webpack_module__, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   StorageError: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.StorageError),\n/* harmony export */   StorageErrorCode: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.StorageErrorCode),\n/* harmony export */   StringFormat: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.StringFormat),\n/* harmony export */   _FbsBlob: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._FbsBlob),\n/* harmony export */   _Location: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._Location),\n/* harmony export */   _TaskEvent: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._TaskEvent),\n/* harmony export */   _TaskState: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._TaskState),\n/* harmony export */   _UploadTask: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._UploadTask),\n/* harmony export */   _dataFromString: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._dataFromString),\n/* harmony export */   _getChild: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._getChild),\n/* harmony export */   _invalidArgument: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._invalidArgument),\n/* harmony export */   _invalidRootOperation: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__._invalidRootOperation),\n/* harmony export */   connectStorageEmulator: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.connectStorageEmulator),\n/* harmony export */   deleteObject: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.deleteObject),\n/* harmony export */   getBlob: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getBlob),\n/* harmony export */   getBytes: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getBytes),\n/* harmony export */   getDownloadURL: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getDownloadURL),\n/* harmony export */   getMetadata: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getMetadata),\n/* harmony export */   getStorage: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStorage),\n/* harmony export */   getStream: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.getStream),\n/* harmony export */   list: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.list),\n/* harmony export */   listAll: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.listAll),\n/* harmony export */   ref: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.ref),\n/* harmony export */   updateMetadata: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.updateMetadata),\n/* harmony export */   uploadBytes: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadBytes),\n/* harmony export */   uploadBytesResumable: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadBytesResumable),\n/* harmony export */   uploadString: () => (/* reexport safe */ _firebase_storage__WEBPACK_IMPORTED_MODULE_0__.uploadString)\n/* harmony export */ });\n/* harmony import */ var _firebase_storage__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! @firebase/storage */ \"(ssr)/./node_modules/@firebase/storage/dist/node-esm/index.node.esm.js\");\n\n//# sourceMappingURL=index.mjs.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvZmlyZWJhc2Uvc3RvcmFnZS9kaXN0L2luZGV4Lm1qcyIsIm1hcHBpbmdzIjoiOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0FBQWtDO0FBQ2xDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL2ZpcmViYXNlL3N0b3JhZ2UvZGlzdC9pbmRleC5tanM/YTEyZSJdLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgKiBmcm9tICdAZmlyZWJhc2Uvc3RvcmFnZSc7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1pbmRleC5tanMubWFwXG4iXSwibmFtZXMiOltdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/firebase/storage/dist/index.mjs\n");

/***/ })

};
;