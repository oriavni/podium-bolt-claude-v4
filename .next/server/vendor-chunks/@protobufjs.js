"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@protobufjs";
exports.ids = ["vendor-chunks/@protobufjs"];
exports.modules = {

/***/ "(ssr)/./node_modules/@protobufjs/aspromise/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@protobufjs/aspromise/index.js ***!
  \*****************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = asPromise;\n\n/**\r\n * Callback as used by {@link util.asPromise}.\r\n * @typedef asPromiseCallback\r\n * @type {function}\r\n * @param {Error|null} error Error, if any\r\n * @param {...*} params Additional arguments\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Returns a promise from a node-style callback function.\r\n * @memberof util\r\n * @param {asPromiseCallback} fn Function to call\r\n * @param {*} ctx Function context\r\n * @param {...*} params Function arguments\r\n * @returns {Promise<*>} Promisified function\r\n */\nfunction asPromise(fn, ctx /*, varargs */) {\n  var params = new Array(arguments.length - 1),\n    offset = 0,\n    index = 2,\n    pending = true;\n  while (index < arguments.length) params[offset++] = arguments[index++];\n  return new Promise(function executor(resolve, reject) {\n    params[offset] = function callback(err /*, varargs */) {\n      if (pending) {\n        pending = false;\n        if (err) reject(err);else {\n          var params = new Array(arguments.length - 1),\n            offset = 0;\n          while (offset < params.length) params[offset++] = arguments[offset];\n          resolve.apply(null, params);\n        }\n      }\n    };\n    try {\n      fn.apply(ctx || null, params);\n    } catch (err) {\n      if (pending) {\n        pending = false;\n        reject(err);\n      }\n    }\n  });\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYXNwcm9taXNlL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsU0FBUzs7QUFFMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsU0FBU0EsQ0FBQ0MsRUFBRSxFQUFFQyxHQUFHLGlCQUFnQjtFQUN0QyxJQUFJQyxNQUFNLEdBQUksSUFBSUMsS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUM7SUFDekNDLE1BQU0sR0FBSSxDQUFDO0lBQ1hDLEtBQUssR0FBSyxDQUFDO0lBQ1hDLE9BQU8sR0FBRyxJQUFJO0VBQ2xCLE9BQU9ELEtBQUssR0FBR0gsU0FBUyxDQUFDQyxNQUFNLEVBQzNCSCxNQUFNLENBQUNJLE1BQU0sRUFBRSxDQUFDLEdBQUdGLFNBQVMsQ0FBQ0csS0FBSyxFQUFFLENBQUM7RUFDekMsT0FBTyxJQUFJRSxPQUFPLENBQUMsU0FBU0MsUUFBUUEsQ0FBQ0MsT0FBTyxFQUFFQyxNQUFNLEVBQUU7SUFDbERWLE1BQU0sQ0FBQ0ksTUFBTSxDQUFDLEdBQUcsU0FBU08sUUFBUUEsQ0FBQ0MsR0FBRyxpQkFBZ0I7TUFDbEQsSUFBSU4sT0FBTyxFQUFFO1FBQ1RBLE9BQU8sR0FBRyxLQUFLO1FBQ2YsSUFBSU0sR0FBRyxFQUNIRixNQUFNLENBQUNFLEdBQUcsQ0FBQyxDQUFDLEtBQ1g7VUFDRCxJQUFJWixNQUFNLEdBQUcsSUFBSUMsS0FBSyxDQUFDQyxTQUFTLENBQUNDLE1BQU0sR0FBRyxDQUFDLENBQUM7WUFDeENDLE1BQU0sR0FBRyxDQUFDO1VBQ2QsT0FBT0EsTUFBTSxHQUFHSixNQUFNLENBQUNHLE1BQU0sRUFDekJILE1BQU0sQ0FBQ0ksTUFBTSxFQUFFLENBQUMsR0FBR0YsU0FBUyxDQUFDRSxNQUFNLENBQUM7VUFDeENLLE9BQU8sQ0FBQ0ksS0FBSyxDQUFDLElBQUksRUFBRWIsTUFBTSxDQUFDO1FBQy9CO01BQ0o7SUFDSixDQUFDO0lBQ0QsSUFBSTtNQUNBRixFQUFFLENBQUNlLEtBQUssQ0FBQ2QsR0FBRyxJQUFJLElBQUksRUFBRUMsTUFBTSxDQUFDO0lBQ2pDLENBQUMsQ0FBQyxPQUFPWSxHQUFHLEVBQUU7TUFDVixJQUFJTixPQUFPLEVBQUU7UUFDVEEsT0FBTyxHQUFHLEtBQUs7UUFDZkksTUFBTSxDQUFDRSxHQUFHLENBQUM7TUFDZjtJQUNKO0VBQ0osQ0FBQyxDQUFDO0FBQ04iLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvYXNwcm9taXNlL2luZGV4LmpzPzQ2YjQiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcbm1vZHVsZS5leHBvcnRzID0gYXNQcm9taXNlO1xyXG5cclxuLyoqXHJcbiAqIENhbGxiYWNrIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwuYXNQcm9taXNlfS5cclxuICogQHR5cGVkZWYgYXNQcm9taXNlQ2FsbGJhY2tcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge0Vycm9yfG51bGx9IGVycm9yIEVycm9yLCBpZiBhbnlcclxuICogQHBhcmFtIHsuLi4qfSBwYXJhbXMgQWRkaXRpb25hbCBhcmd1bWVudHNcclxuICogQHJldHVybnMge3VuZGVmaW5lZH1cclxuICovXHJcblxyXG4vKipcclxuICogUmV0dXJucyBhIHByb21pc2UgZnJvbSBhIG5vZGUtc3R5bGUgY2FsbGJhY2sgZnVuY3Rpb24uXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7YXNQcm9taXNlQ2FsbGJhY2t9IGZuIEZ1bmN0aW9uIHRvIGNhbGxcclxuICogQHBhcmFtIHsqfSBjdHggRnVuY3Rpb24gY29udGV4dFxyXG4gKiBAcGFyYW0gey4uLip9IHBhcmFtcyBGdW5jdGlvbiBhcmd1bWVudHNcclxuICogQHJldHVybnMge1Byb21pc2U8Kj59IFByb21pc2lmaWVkIGZ1bmN0aW9uXHJcbiAqL1xyXG5mdW5jdGlvbiBhc1Byb21pc2UoZm4sIGN0eC8qLCB2YXJhcmdzICovKSB7XHJcbiAgICB2YXIgcGFyYW1zICA9IG5ldyBBcnJheShhcmd1bWVudHMubGVuZ3RoIC0gMSksXHJcbiAgICAgICAgb2Zmc2V0ICA9IDAsXHJcbiAgICAgICAgaW5kZXggICA9IDIsXHJcbiAgICAgICAgcGVuZGluZyA9IHRydWU7XHJcbiAgICB3aGlsZSAoaW5kZXggPCBhcmd1bWVudHMubGVuZ3RoKVxyXG4gICAgICAgIHBhcmFtc1tvZmZzZXQrK10gPSBhcmd1bWVudHNbaW5kZXgrK107XHJcbiAgICByZXR1cm4gbmV3IFByb21pc2UoZnVuY3Rpb24gZXhlY3V0b3IocmVzb2x2ZSwgcmVqZWN0KSB7XHJcbiAgICAgICAgcGFyYW1zW29mZnNldF0gPSBmdW5jdGlvbiBjYWxsYmFjayhlcnIvKiwgdmFyYXJncyAqLykge1xyXG4gICAgICAgICAgICBpZiAocGVuZGluZykge1xyXG4gICAgICAgICAgICAgICAgcGVuZGluZyA9IGZhbHNlO1xyXG4gICAgICAgICAgICAgICAgaWYgKGVycilcclxuICAgICAgICAgICAgICAgICAgICByZWplY3QoZXJyKTtcclxuICAgICAgICAgICAgICAgIGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgIHZhciBwYXJhbXMgPSBuZXcgQXJyYXkoYXJndW1lbnRzLmxlbmd0aCAtIDEpLFxyXG4gICAgICAgICAgICAgICAgICAgICAgICBvZmZzZXQgPSAwO1xyXG4gICAgICAgICAgICAgICAgICAgIHdoaWxlIChvZmZzZXQgPCBwYXJhbXMubGVuZ3RoKVxyXG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJhbXNbb2Zmc2V0KytdID0gYXJndW1lbnRzW29mZnNldF07XHJcbiAgICAgICAgICAgICAgICAgICAgcmVzb2x2ZS5hcHBseShudWxsLCBwYXJhbXMpO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfTtcclxuICAgICAgICB0cnkge1xyXG4gICAgICAgICAgICBmbi5hcHBseShjdHggfHwgbnVsbCwgcGFyYW1zKTtcclxuICAgICAgICB9IGNhdGNoIChlcnIpIHtcclxuICAgICAgICAgICAgaWYgKHBlbmRpbmcpIHtcclxuICAgICAgICAgICAgICAgIHBlbmRpbmcgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgIHJlamVjdChlcnIpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSk7XHJcbn1cclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJhc1Byb21pc2UiLCJmbiIsImN0eCIsInBhcmFtcyIsIkFycmF5IiwiYXJndW1lbnRzIiwibGVuZ3RoIiwib2Zmc2V0IiwiaW5kZXgiLCJwZW5kaW5nIiwiUHJvbWlzZSIsImV4ZWN1dG9yIiwicmVzb2x2ZSIsInJlamVjdCIsImNhbGxiYWNrIiwiZXJyIiwiYXBwbHkiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/aspromise/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/base64/index.js":
/*!**************************************************!*\
  !*** ./node_modules/@protobufjs/base64/index.js ***!
  \**************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/**\r\n * A minimal base64 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\nvar base64 = exports;\n\n/**\r\n * Calculates the byte length of a base64 encoded string.\r\n * @param {string} string Base64 encoded string\r\n * @returns {number} Byte length\r\n */\nbase64.length = function length(string) {\n  var p = string.length;\n  if (!p) return 0;\n  var n = 0;\n  while (--p % 4 > 1 && string.charAt(p) === \"=\") ++n;\n  return Math.ceil(string.length * 3) / 4 - n;\n};\n\n// Base64 encoding table\nvar b64 = new Array(64);\n\n// Base64 decoding table\nvar s64 = new Array(123);\n\n// 65..90, 97..122, 48..57, 43, 47\nfor (var i = 0; i < 64;) s64[b64[i] = i < 26 ? i + 65 : i < 52 ? i + 71 : i < 62 ? i - 4 : i - 59 | 43] = i++;\n\n/**\r\n * Encodes a buffer to a base64 encoded string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} Base64 encoded string\r\n */\nbase64.encode = function encode(buffer, start, end) {\n  var parts = null,\n    chunk = [];\n  var i = 0,\n    // output index\n    j = 0,\n    // goto index\n    t; // temporary\n  while (start < end) {\n    var b = buffer[start++];\n    switch (j) {\n      case 0:\n        chunk[i++] = b64[b >> 2];\n        t = (b & 3) << 4;\n        j = 1;\n        break;\n      case 1:\n        chunk[i++] = b64[t | b >> 4];\n        t = (b & 15) << 2;\n        j = 2;\n        break;\n      case 2:\n        chunk[i++] = b64[t | b >> 6];\n        chunk[i++] = b64[b & 63];\n        j = 0;\n        break;\n    }\n    if (i > 8191) {\n      (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n      i = 0;\n    }\n  }\n  if (j) {\n    chunk[i++] = b64[t];\n    chunk[i++] = 61;\n    if (j === 1) chunk[i++] = 61;\n  }\n  if (parts) {\n    if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n    return parts.join(\"\");\n  }\n  return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\nvar invalidEncoding = \"invalid encoding\";\n\n/**\r\n * Decodes a base64 encoded string to a buffer.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Number of bytes written\r\n * @throws {Error} If encoding is invalid\r\n */\nbase64.decode = function decode(string, buffer, offset) {\n  var start = offset;\n  var j = 0,\n    // goto index\n    t; // temporary\n  for (var i = 0; i < string.length;) {\n    var c = string.charCodeAt(i++);\n    if (c === 61 && j > 1) break;\n    if ((c = s64[c]) === undefined) throw Error(invalidEncoding);\n    switch (j) {\n      case 0:\n        t = c;\n        j = 1;\n        break;\n      case 1:\n        buffer[offset++] = t << 2 | (c & 48) >> 4;\n        t = c;\n        j = 2;\n        break;\n      case 2:\n        buffer[offset++] = (t & 15) << 4 | (c & 60) >> 2;\n        t = c;\n        j = 3;\n        break;\n      case 3:\n        buffer[offset++] = (t & 3) << 6 | c;\n        j = 0;\n        break;\n    }\n  }\n  if (j === 1) throw Error(invalidEncoding);\n  return offset - start;\n};\n\n/**\r\n * Tests if the specified string appears to be base64 encoded.\r\n * @param {string} string String to test\r\n * @returns {boolean} `true` if probably base64 encoded, otherwise false\r\n */\nbase64.test = function test(string) {\n  return /^(?:[A-Za-z0-9+/]{4})*(?:[A-Za-z0-9+/]{2}==|[A-Za-z0-9+/]{3}=)?$/.test(string);\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/base64/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/codegen/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/codegen/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = codegen;\n\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @param {string[]} functionParams Function parameter names\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n */\nfunction codegen(functionParams, functionName) {\n  /* istanbul ignore if */\n  if (typeof functionParams === \"string\") {\n    functionName = functionParams;\n    functionParams = undefined;\n  }\n  var body = [];\n\n  /**\r\n   * Appends code to the function's body or finishes generation.\r\n   * @typedef Codegen\r\n   * @type {function}\r\n   * @param {string|Object.<string,*>} [formatStringOrScope] Format string or, to finish the function, an object of additional scope variables, if any\r\n   * @param {...*} [formatParams] Format parameters\r\n   * @returns {Codegen|Function} Itself or the generated function if finished\r\n   * @throws {Error} If format parameter counts do not match\r\n   */\n\n  function Codegen(formatStringOrScope) {\n    // note that explicit array handling below makes this ~50% faster\n\n    // finish the function\n    if (typeof formatStringOrScope !== \"string\") {\n      var source = toString();\n      if (codegen.verbose) console.log(\"codegen: \" + source); // eslint-disable-line no-console\n      source = \"return \" + source;\n      if (formatStringOrScope) {\n        var scopeKeys = Object.keys(formatStringOrScope),\n          scopeParams = new Array(scopeKeys.length + 1),\n          scopeValues = new Array(scopeKeys.length),\n          scopeOffset = 0;\n        while (scopeOffset < scopeKeys.length) {\n          scopeParams[scopeOffset] = scopeKeys[scopeOffset];\n          scopeValues[scopeOffset] = formatStringOrScope[scopeKeys[scopeOffset++]];\n        }\n        scopeParams[scopeOffset] = source;\n        return Function.apply(null, scopeParams).apply(null, scopeValues); // eslint-disable-line no-new-func\n      }\n      return Function(source)(); // eslint-disable-line no-new-func\n    }\n\n    // otherwise append to body\n    var formatParams = new Array(arguments.length - 1),\n      formatOffset = 0;\n    while (formatOffset < formatParams.length) formatParams[formatOffset] = arguments[++formatOffset];\n    formatOffset = 0;\n    formatStringOrScope = formatStringOrScope.replace(/%([%dfijs])/g, function replace($0, $1) {\n      var value = formatParams[formatOffset++];\n      switch ($1) {\n        case \"d\":\n        case \"f\":\n          return String(Number(value));\n        case \"i\":\n          return String(Math.floor(value));\n        case \"j\":\n          return JSON.stringify(value);\n        case \"s\":\n          return String(value);\n      }\n      return \"%\";\n    });\n    if (formatOffset !== formatParams.length) throw Error(\"parameter count mismatch\");\n    body.push(formatStringOrScope);\n    return Codegen;\n  }\n  function toString(functionNameOverride) {\n    return \"function \" + (functionNameOverride || functionName || \"\") + \"(\" + (functionParams && functionParams.join(\",\") || \"\") + \"){\\n  \" + body.join(\"\\n  \") + \"\\n}\";\n  }\n  Codegen.toString = toString;\n  return Codegen;\n}\n\n/**\r\n * Begins generating a function.\r\n * @memberof util\r\n * @function codegen\r\n * @param {string} [functionName] Function name if not anonymous\r\n * @returns {Codegen} Appender that appends code to the function's body\r\n * @variation 2\r\n */\n\n/**\r\n * When set to `true`, codegen will log generated code to console. Useful for debugging.\r\n * @name util.codegen.verbose\r\n * @type {boolean}\r\n */\ncodegen.verbose = false;//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/codegen/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/eventemitter/index.js":
/*!********************************************************!*\
  !*** ./node_modules/@protobufjs/eventemitter/index.js ***!
  \********************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = EventEmitter;\n\n/**\r\n * Constructs a new event emitter instance.\r\n * @classdesc A minimal event emitter.\r\n * @memberof util\r\n * @constructor\r\n */\nfunction EventEmitter() {\n  /**\r\n   * Registered listeners.\r\n   * @type {Object.<string,*>}\r\n   * @private\r\n   */\n  this._listeners = {};\n}\n\n/**\r\n * Registers an event listener.\r\n * @param {string} evt Event name\r\n * @param {function} fn Listener\r\n * @param {*} [ctx] Listener context\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.on = function on(evt, fn, ctx) {\n  (this._listeners[evt] || (this._listeners[evt] = [])).push({\n    fn: fn,\n    ctx: ctx || this\n  });\n  return this;\n};\n\n/**\r\n * Removes an event listener or any matching listeners if arguments are omitted.\r\n * @param {string} [evt] Event name. Removes all listeners if omitted.\r\n * @param {function} [fn] Listener to remove. Removes all listeners of `evt` if omitted.\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.off = function off(evt, fn) {\n  if (evt === undefined) this._listeners = {};else {\n    if (fn === undefined) this._listeners[evt] = [];else {\n      var listeners = this._listeners[evt];\n      for (var i = 0; i < listeners.length;) if (listeners[i].fn === fn) listeners.splice(i, 1);else ++i;\n    }\n  }\n  return this;\n};\n\n/**\r\n * Emits an event by calling its listeners with the specified arguments.\r\n * @param {string} evt Event name\r\n * @param {...*} args Arguments\r\n * @returns {util.EventEmitter} `this`\r\n */\nEventEmitter.prototype.emit = function emit(evt) {\n  var listeners = this._listeners[evt];\n  if (listeners) {\n    var args = [],\n      i = 1;\n    for (; i < arguments.length;) args.push(arguments[i++]);\n    for (i = 0; i < listeners.length;) listeners[i].fn.apply(listeners[i++].ctx, args);\n  }\n  return this;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvZXZlbnRlbWl0dGVyL2luZGV4LmpzIiwibWFwcGluZ3MiOiJBQUFhOztBQUNiQSxNQUFNLENBQUNDLE9BQU8sR0FBR0MsWUFBWTs7QUFFN0I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0EsWUFBWUEsQ0FBQSxFQUFHO0VBRXBCO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7RUFDSSxJQUFJLENBQUNDLFVBQVUsR0FBRyxDQUFDLENBQUM7QUFDeEI7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQUQsWUFBWSxDQUFDRSxTQUFTLENBQUNDLEVBQUUsR0FBRyxTQUFTQSxFQUFFQSxDQUFDQyxHQUFHLEVBQUVDLEVBQUUsRUFBRUMsR0FBRyxFQUFFO0VBQ2xELENBQUMsSUFBSSxDQUFDTCxVQUFVLENBQUNHLEdBQUcsQ0FBQyxLQUFLLElBQUksQ0FBQ0gsVUFBVSxDQUFDRyxHQUFHLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRUcsSUFBSSxDQUFDO0lBQ3ZERixFQUFFLEVBQUlBLEVBQUU7SUFDUkMsR0FBRyxFQUFHQSxHQUFHLElBQUk7RUFDakIsQ0FBQyxDQUFDO0VBQ0YsT0FBTyxJQUFJO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQU4sWUFBWSxDQUFDRSxTQUFTLENBQUNNLEdBQUcsR0FBRyxTQUFTQSxHQUFHQSxDQUFDSixHQUFHLEVBQUVDLEVBQUUsRUFBRTtFQUMvQyxJQUFJRCxHQUFHLEtBQUtLLFNBQVMsRUFDakIsSUFBSSxDQUFDUixVQUFVLEdBQUcsQ0FBQyxDQUFDLENBQUMsS0FDcEI7SUFDRCxJQUFJSSxFQUFFLEtBQUtJLFNBQVMsRUFDaEIsSUFBSSxDQUFDUixVQUFVLENBQUNHLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUN6QjtNQUNELElBQUlNLFNBQVMsR0FBRyxJQUFJLENBQUNULFVBQVUsQ0FBQ0csR0FBRyxDQUFDO01BQ3BDLEtBQUssSUFBSU8sQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHRCxTQUFTLENBQUNFLE1BQU0sR0FDaEMsSUFBSUYsU0FBUyxDQUFDQyxDQUFDLENBQUMsQ0FBQ04sRUFBRSxLQUFLQSxFQUFFLEVBQ3RCSyxTQUFTLENBQUNHLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRXZCLEVBQUVBLENBQUM7SUFDZjtFQUNKO0VBQ0EsT0FBTyxJQUFJO0FBQ2YsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQVgsWUFBWSxDQUFDRSxTQUFTLENBQUNZLElBQUksR0FBRyxTQUFTQSxJQUFJQSxDQUFDVixHQUFHLEVBQUU7RUFDN0MsSUFBSU0sU0FBUyxHQUFHLElBQUksQ0FBQ1QsVUFBVSxDQUFDRyxHQUFHLENBQUM7RUFDcEMsSUFBSU0sU0FBUyxFQUFFO0lBQ1gsSUFBSUssSUFBSSxHQUFHLEVBQUU7TUFDVEosQ0FBQyxHQUFHLENBQUM7SUFDVCxPQUFPQSxDQUFDLEdBQUdLLFNBQVMsQ0FBQ0osTUFBTSxHQUN2QkcsSUFBSSxDQUFDUixJQUFJLENBQUNTLFNBQVMsQ0FBQ0wsQ0FBQyxFQUFFLENBQUMsQ0FBQztJQUM3QixLQUFLQSxDQUFDLEdBQUcsQ0FBQyxFQUFFQSxDQUFDLEdBQUdELFNBQVMsQ0FBQ0UsTUFBTSxHQUM1QkYsU0FBUyxDQUFDQyxDQUFDLENBQUMsQ0FBQ04sRUFBRSxDQUFDWSxLQUFLLENBQUNQLFNBQVMsQ0FBQ0MsQ0FBQyxFQUFFLENBQUMsQ0FBQ0wsR0FBRyxFQUFFUyxJQUFJLENBQUM7RUFDdkQ7RUFDQSxPQUFPLElBQUk7QUFDZixDQUFDIiwic291cmNlcyI6WyJ3ZWJwYWNrOi8vbmV4dGpzLy4vbm9kZV9tb2R1bGVzL0Bwcm90b2J1ZmpzL2V2ZW50ZW1pdHRlci9pbmRleC5qcz9jYzdiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IEV2ZW50RW1pdHRlcjtcclxuXHJcbi8qKlxyXG4gKiBDb25zdHJ1Y3RzIGEgbmV3IGV2ZW50IGVtaXR0ZXIgaW5zdGFuY2UuXHJcbiAqIEBjbGFzc2Rlc2MgQSBtaW5pbWFsIGV2ZW50IGVtaXR0ZXIuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBjb25zdHJ1Y3RvclxyXG4gKi9cclxuZnVuY3Rpb24gRXZlbnRFbWl0dGVyKCkge1xyXG5cclxuICAgIC8qKlxyXG4gICAgICogUmVnaXN0ZXJlZCBsaXN0ZW5lcnMuXHJcbiAgICAgKiBAdHlwZSB7T2JqZWN0LjxzdHJpbmcsKj59XHJcbiAgICAgKiBAcHJpdmF0ZVxyXG4gICAgICovXHJcbiAgICB0aGlzLl9saXN0ZW5lcnMgPSB7fTtcclxufVxyXG5cclxuLyoqXHJcbiAqIFJlZ2lzdGVycyBhbiBldmVudCBsaXN0ZW5lci5cclxuICogQHBhcmFtIHtzdHJpbmd9IGV2dCBFdmVudCBuYW1lXHJcbiAqIEBwYXJhbSB7ZnVuY3Rpb259IGZuIExpc3RlbmVyXHJcbiAqIEBwYXJhbSB7Kn0gW2N0eF0gTGlzdGVuZXIgY29udGV4dFxyXG4gKiBAcmV0dXJucyB7dXRpbC5FdmVudEVtaXR0ZXJ9IGB0aGlzYFxyXG4gKi9cclxuRXZlbnRFbWl0dGVyLnByb3RvdHlwZS5vbiA9IGZ1bmN0aW9uIG9uKGV2dCwgZm4sIGN0eCkge1xyXG4gICAgKHRoaXMuX2xpc3RlbmVyc1tldnRdIHx8ICh0aGlzLl9saXN0ZW5lcnNbZXZ0XSA9IFtdKSkucHVzaCh7XHJcbiAgICAgICAgZm4gIDogZm4sXHJcbiAgICAgICAgY3R4IDogY3R4IHx8IHRoaXNcclxuICAgIH0pO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogUmVtb3ZlcyBhbiBldmVudCBsaXN0ZW5lciBvciBhbnkgbWF0Y2hpbmcgbGlzdGVuZXJzIGlmIGFyZ3VtZW50cyBhcmUgb21pdHRlZC5cclxuICogQHBhcmFtIHtzdHJpbmd9IFtldnRdIEV2ZW50IG5hbWUuIFJlbW92ZXMgYWxsIGxpc3RlbmVycyBpZiBvbWl0dGVkLlxyXG4gKiBAcGFyYW0ge2Z1bmN0aW9ufSBbZm5dIExpc3RlbmVyIHRvIHJlbW92ZS4gUmVtb3ZlcyBhbGwgbGlzdGVuZXJzIG9mIGBldnRgIGlmIG9taXR0ZWQuXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLm9mZiA9IGZ1bmN0aW9uIG9mZihldnQsIGZuKSB7XHJcbiAgICBpZiAoZXZ0ID09PSB1bmRlZmluZWQpXHJcbiAgICAgICAgdGhpcy5fbGlzdGVuZXJzID0ge307XHJcbiAgICBlbHNlIHtcclxuICAgICAgICBpZiAoZm4gPT09IHVuZGVmaW5lZClcclxuICAgICAgICAgICAgdGhpcy5fbGlzdGVuZXJzW2V2dF0gPSBbXTtcclxuICAgICAgICBlbHNlIHtcclxuICAgICAgICAgICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgICAgICAgICBmb3IgKHZhciBpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICAgICAgaWYgKGxpc3RlbmVyc1tpXS5mbiA9PT0gZm4pXHJcbiAgICAgICAgICAgICAgICAgICAgbGlzdGVuZXJzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICAgICArK2k7XHJcbiAgICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG4vKipcclxuICogRW1pdHMgYW4gZXZlbnQgYnkgY2FsbGluZyBpdHMgbGlzdGVuZXJzIHdpdGggdGhlIHNwZWNpZmllZCBhcmd1bWVudHMuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBldnQgRXZlbnQgbmFtZVxyXG4gKiBAcGFyYW0gey4uLip9IGFyZ3MgQXJndW1lbnRzXHJcbiAqIEByZXR1cm5zIHt1dGlsLkV2ZW50RW1pdHRlcn0gYHRoaXNgXHJcbiAqL1xyXG5FdmVudEVtaXR0ZXIucHJvdG90eXBlLmVtaXQgPSBmdW5jdGlvbiBlbWl0KGV2dCkge1xyXG4gICAgdmFyIGxpc3RlbmVycyA9IHRoaXMuX2xpc3RlbmVyc1tldnRdO1xyXG4gICAgaWYgKGxpc3RlbmVycykge1xyXG4gICAgICAgIHZhciBhcmdzID0gW10sXHJcbiAgICAgICAgICAgIGkgPSAxO1xyXG4gICAgICAgIGZvciAoOyBpIDwgYXJndW1lbnRzLmxlbmd0aDspXHJcbiAgICAgICAgICAgIGFyZ3MucHVzaChhcmd1bWVudHNbaSsrXSk7XHJcbiAgICAgICAgZm9yIChpID0gMDsgaSA8IGxpc3RlbmVycy5sZW5ndGg7KVxyXG4gICAgICAgICAgICBsaXN0ZW5lcnNbaV0uZm4uYXBwbHkobGlzdGVuZXJzW2krK10uY3R4LCBhcmdzKTtcclxuICAgIH1cclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG4iXSwibmFtZXMiOlsibW9kdWxlIiwiZXhwb3J0cyIsIkV2ZW50RW1pdHRlciIsIl9saXN0ZW5lcnMiLCJwcm90b3R5cGUiLCJvbiIsImV2dCIsImZuIiwiY3R4IiwicHVzaCIsIm9mZiIsInVuZGVmaW5lZCIsImxpc3RlbmVycyIsImkiLCJsZW5ndGgiLCJzcGxpY2UiLCJlbWl0IiwiYXJncyIsImFyZ3VtZW50cyIsImFwcGx5Il0sInNvdXJjZVJvb3QiOiIifQ==\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/eventemitter/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/fetch/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/fetch/index.js ***!
  \*************************************************/
/***/ ((module, __unused_webpack_exports, __webpack_require__) => {

eval("\n\nmodule.exports = fetch;\nvar asPromise = __webpack_require__(/*! @protobufjs/aspromise */ \"(ssr)/./node_modules/@protobufjs/aspromise/index.js\"),\n  inquire = __webpack_require__(/*! @protobufjs/inquire */ \"(ssr)/./node_modules/@protobufjs/inquire/index.js\");\nvar fs = inquire(\"fs\");\n\n/**\r\n * Node-style callback as used by {@link util.fetch}.\r\n * @typedef FetchCallback\r\n * @type {function}\r\n * @param {?Error} error Error, if any, otherwise `null`\r\n * @param {string} [contents] File contents, if there hasn't been an error\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Options as used by {@link util.fetch}.\r\n * @typedef FetchOptions\r\n * @type {Object}\r\n * @property {boolean} [binary=false] Whether expecting a binary response\r\n * @property {boolean} [xhr=false] If `true`, forces the use of XMLHttpRequest\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @memberof util\r\n * @param {string} filename File path or url\r\n * @param {FetchOptions} options Fetch options\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n */\nfunction fetch(filename, options, callback) {\n  if (typeof options === \"function\") {\n    callback = options;\n    options = {};\n  } else if (!options) options = {};\n  if (!callback) return asPromise(fetch, this, filename, options); // eslint-disable-line no-invalid-this\n\n  // if a node-like filesystem is present, try it first but fall back to XHR if nothing is found.\n  if (!options.xhr && fs && fs.readFile) return fs.readFile(filename, function fetchReadFileCallback(err, contents) {\n    return err && typeof XMLHttpRequest !== \"undefined\" ? fetch.xhr(filename, options, callback) : err ? callback(err) : callback(null, options.binary ? contents : contents.toString(\"utf8\"));\n  });\n\n  // use the XHR version otherwise.\n  return fetch.xhr(filename, options, callback);\n}\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchCallback} callback Callback function\r\n * @returns {undefined}\r\n * @variation 2\r\n */\n\n/**\r\n * Fetches the contents of a file.\r\n * @name util.fetch\r\n * @function\r\n * @param {string} path File path or url\r\n * @param {FetchOptions} [options] Fetch options\r\n * @returns {Promise<string|Uint8Array>} Promise\r\n * @variation 3\r\n */\n\n/**/\nfetch.xhr = function fetch_xhr(filename, options, callback) {\n  var xhr = new XMLHttpRequest();\n  xhr.onreadystatechange /* works everywhere */ = function fetchOnReadyStateChange() {\n    if (xhr.readyState !== 4) return undefined;\n\n    // local cors security errors return status 0 / empty string, too. afaik this cannot be\n    // reliably distinguished from an actually empty file for security reasons. feel free\n    // to send a pull request if you are aware of a solution.\n    if (xhr.status !== 0 && xhr.status !== 200) return callback(Error(\"status \" + xhr.status));\n\n    // if binary data is expected, make sure that some sort of array is returned, even if\n    // ArrayBuffers are not supported. the binary string fallback, however, is unsafe.\n    if (options.binary) {\n      var buffer = xhr.response;\n      if (!buffer) {\n        buffer = [];\n        for (var i = 0; i < xhr.responseText.length; ++i) buffer.push(xhr.responseText.charCodeAt(i) & 255);\n      }\n      return callback(null, typeof Uint8Array !== \"undefined\" ? new Uint8Array(buffer) : buffer);\n    }\n    return callback(null, xhr.responseText);\n  };\n  if (options.binary) {\n    // ref: https://developer.mozilla.org/en-US/docs/Web/API/XMLHttpRequest/Sending_and_Receiving_Binary_Data#Receiving_binary_data_in_older_browsers\n    if (\"overrideMimeType\" in xhr) xhr.overrideMimeType(\"text/plain; charset=x-user-defined\");\n    xhr.responseType = \"arraybuffer\";\n  }\n  xhr.open(\"GET\", filename);\n  xhr.send();\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/fetch/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/float/index.js":
/*!*************************************************!*\
  !*** ./node_modules/@protobufjs/float/index.js ***!
  \*************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = factory(factory);\n\n/**\r\n * Reads / writes floats / doubles from / to buffers.\r\n * @name util.float\r\n * @namespace\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using little endian byte order.\r\n * @name util.float.writeFloatLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 32 bit float to a buffer using big endian byte order.\r\n * @name util.float.writeFloatBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using little endian byte order.\r\n * @name util.float.readFloatLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 32 bit float from a buffer using big endian byte order.\r\n * @name util.float.readFloatBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using little endian byte order.\r\n * @name util.float.writeDoubleLE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Writes a 64 bit double to a buffer using big endian byte order.\r\n * @name util.float.writeDoubleBE\r\n * @function\r\n * @param {number} val Value to write\r\n * @param {Uint8Array} buf Target buffer\r\n * @param {number} pos Target buffer offset\r\n * @returns {undefined}\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using little endian byte order.\r\n * @name util.float.readDoubleLE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n/**\r\n * Reads a 64 bit double from a buffer using big endian byte order.\r\n * @name util.float.readDoubleBE\r\n * @function\r\n * @param {Uint8Array} buf Source buffer\r\n * @param {number} pos Source buffer offset\r\n * @returns {number} Value read\r\n */\n\n// Factory function for the purpose of node-based testing in modified global environments\nfunction factory(exports) {\n  // float: typed array\n  if (typeof Float32Array !== \"undefined\") (function () {\n    var f32 = new Float32Array([-0]),\n      f8b = new Uint8Array(f32.buffer),\n      le = f8b[3] === 128;\n    function writeFloat_f32_cpy(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n    }\n    function writeFloat_f32_rev(val, buf, pos) {\n      f32[0] = val;\n      buf[pos] = f8b[3];\n      buf[pos + 1] = f8b[2];\n      buf[pos + 2] = f8b[1];\n      buf[pos + 3] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeFloatLE = le ? writeFloat_f32_cpy : writeFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.writeFloatBE = le ? writeFloat_f32_rev : writeFloat_f32_cpy;\n    function readFloat_f32_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      return f32[0];\n    }\n    function readFloat_f32_rev(buf, pos) {\n      f8b[3] = buf[pos];\n      f8b[2] = buf[pos + 1];\n      f8b[1] = buf[pos + 2];\n      f8b[0] = buf[pos + 3];\n      return f32[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readFloatLE = le ? readFloat_f32_cpy : readFloat_f32_rev;\n    /* istanbul ignore next */\n    exports.readFloatBE = le ? readFloat_f32_rev : readFloat_f32_cpy;\n\n    // float: ieee754\n  })();else (function () {\n    function writeFloat_ieee754(writeUint, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos);else if (isNaN(val)) writeUint(2143289344, buf, pos);else if (val > 3.4028234663852886e+38)\n        // +-Infinity\n        writeUint((sign << 31 | 2139095040) >>> 0, buf, pos);else if (val < 1.1754943508222875e-38)\n        // denormal\n        writeUint((sign << 31 | Math.round(val / 1.401298464324817e-45)) >>> 0, buf, pos);else {\n        var exponent = Math.floor(Math.log(val) / Math.LN2),\n          mantissa = Math.round(val * Math.pow(2, -exponent) * 8388608) & 8388607;\n        writeUint((sign << 31 | exponent + 127 << 23 | mantissa) >>> 0, buf, pos);\n      }\n    }\n    exports.writeFloatLE = writeFloat_ieee754.bind(null, writeUintLE);\n    exports.writeFloatBE = writeFloat_ieee754.bind(null, writeUintBE);\n    function readFloat_ieee754(readUint, buf, pos) {\n      var uint = readUint(buf, pos),\n        sign = (uint >> 31) * 2 + 1,\n        exponent = uint >>> 23 & 255,\n        mantissa = uint & 8388607;\n      return exponent === 255 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 1.401298464324817e-45 * mantissa : sign * Math.pow(2, exponent - 150) * (mantissa + 8388608);\n    }\n    exports.readFloatLE = readFloat_ieee754.bind(null, readUintLE);\n    exports.readFloatBE = readFloat_ieee754.bind(null, readUintBE);\n  })();\n\n  // double: typed array\n  if (typeof Float64Array !== \"undefined\") (function () {\n    var f64 = new Float64Array([-0]),\n      f8b = new Uint8Array(f64.buffer),\n      le = f8b[7] === 128;\n    function writeDouble_f64_cpy(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[0];\n      buf[pos + 1] = f8b[1];\n      buf[pos + 2] = f8b[2];\n      buf[pos + 3] = f8b[3];\n      buf[pos + 4] = f8b[4];\n      buf[pos + 5] = f8b[5];\n      buf[pos + 6] = f8b[6];\n      buf[pos + 7] = f8b[7];\n    }\n    function writeDouble_f64_rev(val, buf, pos) {\n      f64[0] = val;\n      buf[pos] = f8b[7];\n      buf[pos + 1] = f8b[6];\n      buf[pos + 2] = f8b[5];\n      buf[pos + 3] = f8b[4];\n      buf[pos + 4] = f8b[3];\n      buf[pos + 5] = f8b[2];\n      buf[pos + 6] = f8b[1];\n      buf[pos + 7] = f8b[0];\n    }\n\n    /* istanbul ignore next */\n    exports.writeDoubleLE = le ? writeDouble_f64_cpy : writeDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.writeDoubleBE = le ? writeDouble_f64_rev : writeDouble_f64_cpy;\n    function readDouble_f64_cpy(buf, pos) {\n      f8b[0] = buf[pos];\n      f8b[1] = buf[pos + 1];\n      f8b[2] = buf[pos + 2];\n      f8b[3] = buf[pos + 3];\n      f8b[4] = buf[pos + 4];\n      f8b[5] = buf[pos + 5];\n      f8b[6] = buf[pos + 6];\n      f8b[7] = buf[pos + 7];\n      return f64[0];\n    }\n    function readDouble_f64_rev(buf, pos) {\n      f8b[7] = buf[pos];\n      f8b[6] = buf[pos + 1];\n      f8b[5] = buf[pos + 2];\n      f8b[4] = buf[pos + 3];\n      f8b[3] = buf[pos + 4];\n      f8b[2] = buf[pos + 5];\n      f8b[1] = buf[pos + 6];\n      f8b[0] = buf[pos + 7];\n      return f64[0];\n    }\n\n    /* istanbul ignore next */\n    exports.readDoubleLE = le ? readDouble_f64_cpy : readDouble_f64_rev;\n    /* istanbul ignore next */\n    exports.readDoubleBE = le ? readDouble_f64_rev : readDouble_f64_cpy;\n\n    // double: ieee754\n  })();else (function () {\n    function writeDouble_ieee754(writeUint, off0, off1, val, buf, pos) {\n      var sign = val < 0 ? 1 : 0;\n      if (sign) val = -val;\n      if (val === 0) {\n        writeUint(0, buf, pos + off0);\n        writeUint(1 / val > 0 ? /* positive */0 : /* negative 0 */2147483648, buf, pos + off1);\n      } else if (isNaN(val)) {\n        writeUint(0, buf, pos + off0);\n        writeUint(2146959360, buf, pos + off1);\n      } else if (val > 1.7976931348623157e+308) {\n        // +-Infinity\n        writeUint(0, buf, pos + off0);\n        writeUint((sign << 31 | 2146435072) >>> 0, buf, pos + off1);\n      } else {\n        var mantissa;\n        if (val < 2.2250738585072014e-308) {\n          // denormal\n          mantissa = val / 5e-324;\n          writeUint(mantissa >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | mantissa / 4294967296) >>> 0, buf, pos + off1);\n        } else {\n          var exponent = Math.floor(Math.log(val) / Math.LN2);\n          if (exponent === 1024) exponent = 1023;\n          mantissa = val * Math.pow(2, -exponent);\n          writeUint(mantissa * 4503599627370496 >>> 0, buf, pos + off0);\n          writeUint((sign << 31 | exponent + 1023 << 20 | mantissa * 1048576 & 1048575) >>> 0, buf, pos + off1);\n        }\n      }\n    }\n    exports.writeDoubleLE = writeDouble_ieee754.bind(null, writeUintLE, 0, 4);\n    exports.writeDoubleBE = writeDouble_ieee754.bind(null, writeUintBE, 4, 0);\n    function readDouble_ieee754(readUint, off0, off1, buf, pos) {\n      var lo = readUint(buf, pos + off0),\n        hi = readUint(buf, pos + off1);\n      var sign = (hi >> 31) * 2 + 1,\n        exponent = hi >>> 20 & 2047,\n        mantissa = 4294967296 * (hi & 1048575) + lo;\n      return exponent === 2047 ? mantissa ? NaN : sign * Infinity : exponent === 0 // denormal\n      ? sign * 5e-324 * mantissa : sign * Math.pow(2, exponent - 1075) * (mantissa + 4503599627370496);\n    }\n    exports.readDoubleLE = readDouble_ieee754.bind(null, readUintLE, 0, 4);\n    exports.readDoubleBE = readDouble_ieee754.bind(null, readUintBE, 4, 0);\n  })();\n  return exports;\n}\n\n// uint helpers\n\nfunction writeUintLE(val, buf, pos) {\n  buf[pos] = val & 255;\n  buf[pos + 1] = val >>> 8 & 255;\n  buf[pos + 2] = val >>> 16 & 255;\n  buf[pos + 3] = val >>> 24;\n}\nfunction writeUintBE(val, buf, pos) {\n  buf[pos] = val >>> 24;\n  buf[pos + 1] = val >>> 16 & 255;\n  buf[pos + 2] = val >>> 8 & 255;\n  buf[pos + 3] = val & 255;\n}\nfunction readUintLE(buf, pos) {\n  return (buf[pos] | buf[pos + 1] << 8 | buf[pos + 2] << 16 | buf[pos + 3] << 24) >>> 0;\n}\nfunction readUintBE(buf, pos) {\n  return (buf[pos] << 24 | buf[pos + 1] << 16 | buf[pos + 2] << 8 | buf[pos + 3]) >>> 0;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/float/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/inquire/index.js":
/*!***************************************************!*\
  !*** ./node_modules/@protobufjs/inquire/index.js ***!
  \***************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = inquire;\n\n/**\r\n * Requires a module only if available.\r\n * @memberof util\r\n * @param {string} moduleName Module to require\r\n * @returns {?Object} Required module if available and not empty, otherwise `null`\r\n */\nfunction inquire(moduleName) {\n  try {\n    var mod = eval(\"quire\".replace(/^/, \"re\"))(moduleName); // eslint-disable-line no-eval\n    if (mod && (mod.length || Object.keys(mod).length)) return mod;\n  } catch (e) {} // eslint-disable-line no-empty\n  return null;\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvaW5xdWlyZS9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLE9BQU87O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVNBLE9BQU9BLENBQUNDLFVBQVUsRUFBRTtFQUN6QixJQUFJO0lBQ0EsSUFBSUMsR0FBRyxHQUFHQyxJQUFJLENBQUMsT0FBTyxDQUFDQyxPQUFPLENBQUMsR0FBRyxFQUFDLElBQUksQ0FBQyxDQUFDLENBQUNILFVBQVUsQ0FBQyxDQUFDLENBQUM7SUFDdkQsSUFBSUMsR0FBRyxLQUFLQSxHQUFHLENBQUNHLE1BQU0sSUFBSUMsTUFBTSxDQUFDQyxJQUFJLENBQUNMLEdBQUcsQ0FBQyxDQUFDRyxNQUFNLENBQUMsRUFDOUMsT0FBT0gsR0FBRztFQUNsQixDQUFDLENBQUMsT0FBT00sQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDO0VBQ2YsT0FBTyxJQUFJO0FBQ2YiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvaW5xdWlyZS9pbmRleC5qcz80N2JjIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IGlucXVpcmU7XHJcblxyXG4vKipcclxuICogUmVxdWlyZXMgYSBtb2R1bGUgb25seSBpZiBhdmFpbGFibGUuXHJcbiAqIEBtZW1iZXJvZiB1dGlsXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBtb2R1bGVOYW1lIE1vZHVsZSB0byByZXF1aXJlXHJcbiAqIEByZXR1cm5zIHs/T2JqZWN0fSBSZXF1aXJlZCBtb2R1bGUgaWYgYXZhaWxhYmxlIGFuZCBub3QgZW1wdHksIG90aGVyd2lzZSBgbnVsbGBcclxuICovXHJcbmZ1bmN0aW9uIGlucXVpcmUobW9kdWxlTmFtZSkge1xyXG4gICAgdHJ5IHtcclxuICAgICAgICB2YXIgbW9kID0gZXZhbChcInF1aXJlXCIucmVwbGFjZSgvXi8sXCJyZVwiKSkobW9kdWxlTmFtZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tZXZhbFxyXG4gICAgICAgIGlmIChtb2QgJiYgKG1vZC5sZW5ndGggfHwgT2JqZWN0LmtleXMobW9kKS5sZW5ndGgpKVxyXG4gICAgICAgICAgICByZXR1cm4gbW9kO1xyXG4gICAgfSBjYXRjaCAoZSkge30gLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1lbXB0eVxyXG4gICAgcmV0dXJuIG51bGw7XHJcbn1cclxuIl0sIm5hbWVzIjpbIm1vZHVsZSIsImV4cG9ydHMiLCJpbnF1aXJlIiwibW9kdWxlTmFtZSIsIm1vZCIsImV2YWwiLCJyZXBsYWNlIiwibGVuZ3RoIiwiT2JqZWN0Iiwia2V5cyIsImUiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/inquire/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/path/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/path/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/**\r\n * A minimal path module to resolve Unix, Windows and URL paths alike.\r\n * @memberof util\r\n * @namespace\r\n */\nvar path = exports;\nvar isAbsolute =\n/**\r\n * Tests if the specified path is absolute.\r\n * @param {string} path Path to test\r\n * @returns {boolean} `true` if path is absolute\r\n */\npath.isAbsolute = function isAbsolute(path) {\n  return /^(?:\\/|\\w+:)/.test(path);\n};\nvar normalize =\n/**\r\n * Normalizes the specified path.\r\n * @param {string} path Path to normalize\r\n * @returns {string} Normalized path\r\n */\npath.normalize = function normalize(path) {\n  path = path.replace(/\\\\/g, \"/\").replace(/\\/{2,}/g, \"/\");\n  var parts = path.split(\"/\"),\n    absolute = isAbsolute(path),\n    prefix = \"\";\n  if (absolute) prefix = parts.shift() + \"/\";\n  for (var i = 0; i < parts.length;) {\n    if (parts[i] === \"..\") {\n      if (i > 0 && parts[i - 1] !== \"..\") parts.splice(--i, 2);else if (absolute) parts.splice(i, 1);else ++i;\n    } else if (parts[i] === \".\") parts.splice(i, 1);else ++i;\n  }\n  return prefix + parts.join(\"/\");\n};\n\n/**\r\n * Resolves the specified include path against the specified origin path.\r\n * @param {string} originPath Path to the origin file\r\n * @param {string} includePath Include path relative to origin path\r\n * @param {boolean} [alreadyNormalized=false] `true` if both paths are already known to be normalized\r\n * @returns {string} Path to the include file\r\n */\npath.resolve = function resolve(originPath, includePath, alreadyNormalized) {\n  if (!alreadyNormalized) includePath = normalize(includePath);\n  if (isAbsolute(includePath)) return includePath;\n  if (!alreadyNormalized) originPath = normalize(originPath);\n  return (originPath = originPath.replace(/(?:\\/|^)[^/]+$/, \"\")).length ? normalize(originPath + \"/\" + includePath) : includePath;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcGF0aC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFFYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSUEsSUFBSSxHQUFHQyxPQUFPO0FBRWxCLElBQUlDLFVBQVU7QUFDZDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FGLElBQUksQ0FBQ0UsVUFBVSxHQUFHLFNBQVNBLFVBQVVBLENBQUNGLElBQUksRUFBRTtFQUN4QyxPQUFPLGNBQWMsQ0FBQ0csSUFBSSxDQUFDSCxJQUFJLENBQUM7QUFDcEMsQ0FBQztBQUVELElBQUlJLFNBQVM7QUFDYjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0FKLElBQUksQ0FBQ0ksU0FBUyxHQUFHLFNBQVNBLFNBQVNBLENBQUNKLElBQUksRUFBRTtFQUN0Q0EsSUFBSSxHQUFHQSxJQUFJLENBQUNLLE9BQU8sQ0FBQyxLQUFLLEVBQUUsR0FBRyxDQUFDLENBQ25CQSxPQUFPLENBQUMsU0FBUyxFQUFFLEdBQUcsQ0FBQztFQUNuQyxJQUFJQyxLQUFLLEdBQU1OLElBQUksQ0FBQ08sS0FBSyxDQUFDLEdBQUcsQ0FBQztJQUMxQkMsUUFBUSxHQUFHTixVQUFVLENBQUNGLElBQUksQ0FBQztJQUMzQlMsTUFBTSxHQUFLLEVBQUU7RUFDakIsSUFBSUQsUUFBUSxFQUNSQyxNQUFNLEdBQUdILEtBQUssQ0FBQ0ksS0FBSyxDQUFDLENBQUMsR0FBRyxHQUFHO0VBQ2hDLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHTCxLQUFLLENBQUNNLE1BQU0sR0FBRztJQUMvQixJQUFJTixLQUFLLENBQUNLLENBQUMsQ0FBQyxLQUFLLElBQUksRUFBRTtNQUNuQixJQUFJQSxDQUFDLEdBQUcsQ0FBQyxJQUFJTCxLQUFLLENBQUNLLENBQUMsR0FBRyxDQUFDLENBQUMsS0FBSyxJQUFJLEVBQzlCTCxLQUFLLENBQUNPLE1BQU0sQ0FBQyxFQUFFRixDQUFDLEVBQUUsQ0FBQyxDQUFDLENBQUMsS0FDcEIsSUFBSUgsUUFBUSxFQUNiRixLQUFLLENBQUNPLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRW5CLEVBQUVBLENBQUM7SUFDWCxDQUFDLE1BQU0sSUFBSUwsS0FBSyxDQUFDSyxDQUFDLENBQUMsS0FBSyxHQUFHLEVBQ3ZCTCxLQUFLLENBQUNPLE1BQU0sQ0FBQ0YsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLEtBRW5CLEVBQUVBLENBQUM7RUFDWDtFQUNBLE9BQU9GLE1BQU0sR0FBR0gsS0FBSyxDQUFDUSxJQUFJLENBQUMsR0FBRyxDQUFDO0FBQ25DLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQWQsSUFBSSxDQUFDZSxPQUFPLEdBQUcsU0FBU0EsT0FBT0EsQ0FBQ0MsVUFBVSxFQUFFQyxXQUFXLEVBQUVDLGlCQUFpQixFQUFFO0VBQ3hFLElBQUksQ0FBQ0EsaUJBQWlCLEVBQ2xCRCxXQUFXLEdBQUdiLFNBQVMsQ0FBQ2EsV0FBVyxDQUFDO0VBQ3hDLElBQUlmLFVBQVUsQ0FBQ2UsV0FBVyxDQUFDLEVBQ3ZCLE9BQU9BLFdBQVc7RUFDdEIsSUFBSSxDQUFDQyxpQkFBaUIsRUFDbEJGLFVBQVUsR0FBR1osU0FBUyxDQUFDWSxVQUFVLENBQUM7RUFDdEMsT0FBTyxDQUFDQSxVQUFVLEdBQUdBLFVBQVUsQ0FBQ1gsT0FBTyxDQUFDLGdCQUFnQixFQUFFLEVBQUUsQ0FBQyxFQUFFTyxNQUFNLEdBQUdSLFNBQVMsQ0FBQ1ksVUFBVSxHQUFHLEdBQUcsR0FBR0MsV0FBVyxDQUFDLEdBQUdBLFdBQVc7QUFDbkksQ0FBQyIsInNvdXJjZXMiOlsid2VicGFjazovL25leHRqcy8uL25vZGVfbW9kdWxlcy9AcHJvdG9idWZqcy9wYXRoL2luZGV4LmpzPzA5ZWUiXSwic291cmNlc0NvbnRlbnQiOlsiXCJ1c2Ugc3RyaWN0XCI7XHJcblxyXG4vKipcclxuICogQSBtaW5pbWFsIHBhdGggbW9kdWxlIHRvIHJlc29sdmUgVW5peCwgV2luZG93cyBhbmQgVVJMIHBhdGhzIGFsaWtlLlxyXG4gKiBAbWVtYmVyb2YgdXRpbFxyXG4gKiBAbmFtZXNwYWNlXHJcbiAqL1xyXG52YXIgcGF0aCA9IGV4cG9ydHM7XHJcblxyXG52YXIgaXNBYnNvbHV0ZSA9XHJcbi8qKlxyXG4gKiBUZXN0cyBpZiB0aGUgc3BlY2lmaWVkIHBhdGggaXMgYWJzb2x1dGUuXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gdGVzdFxyXG4gKiBAcmV0dXJucyB7Ym9vbGVhbn0gYHRydWVgIGlmIHBhdGggaXMgYWJzb2x1dGVcclxuICovXHJcbnBhdGguaXNBYnNvbHV0ZSA9IGZ1bmN0aW9uIGlzQWJzb2x1dGUocGF0aCkge1xyXG4gICAgcmV0dXJuIC9eKD86XFwvfFxcdys6KS8udGVzdChwYXRoKTtcclxufTtcclxuXHJcbnZhciBub3JtYWxpemUgPVxyXG4vKipcclxuICogTm9ybWFsaXplcyB0aGUgc3BlY2lmaWVkIHBhdGguXHJcbiAqIEBwYXJhbSB7c3RyaW5nfSBwYXRoIFBhdGggdG8gbm9ybWFsaXplXHJcbiAqIEByZXR1cm5zIHtzdHJpbmd9IE5vcm1hbGl6ZWQgcGF0aFxyXG4gKi9cclxucGF0aC5ub3JtYWxpemUgPSBmdW5jdGlvbiBub3JtYWxpemUocGF0aCkge1xyXG4gICAgcGF0aCA9IHBhdGgucmVwbGFjZSgvXFxcXC9nLCBcIi9cIilcclxuICAgICAgICAgICAgICAgLnJlcGxhY2UoL1xcL3syLH0vZywgXCIvXCIpO1xyXG4gICAgdmFyIHBhcnRzICAgID0gcGF0aC5zcGxpdChcIi9cIiksXHJcbiAgICAgICAgYWJzb2x1dGUgPSBpc0Fic29sdXRlKHBhdGgpLFxyXG4gICAgICAgIHByZWZpeCAgID0gXCJcIjtcclxuICAgIGlmIChhYnNvbHV0ZSlcclxuICAgICAgICBwcmVmaXggPSBwYXJ0cy5zaGlmdCgpICsgXCIvXCI7XHJcbiAgICBmb3IgKHZhciBpID0gMDsgaSA8IHBhcnRzLmxlbmd0aDspIHtcclxuICAgICAgICBpZiAocGFydHNbaV0gPT09IFwiLi5cIikge1xyXG4gICAgICAgICAgICBpZiAoaSA+IDAgJiYgcGFydHNbaSAtIDFdICE9PSBcIi4uXCIpXHJcbiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoLS1pLCAyKTtcclxuICAgICAgICAgICAgZWxzZSBpZiAoYWJzb2x1dGUpXHJcbiAgICAgICAgICAgICAgICBwYXJ0cy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIGVsc2VcclxuICAgICAgICAgICAgICAgICsraTtcclxuICAgICAgICB9IGVsc2UgaWYgKHBhcnRzW2ldID09PSBcIi5cIilcclxuICAgICAgICAgICAgcGFydHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgIGVsc2VcclxuICAgICAgICAgICAgKytpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHByZWZpeCArIHBhcnRzLmpvaW4oXCIvXCIpO1xyXG59O1xyXG5cclxuLyoqXHJcbiAqIFJlc29sdmVzIHRoZSBzcGVjaWZpZWQgaW5jbHVkZSBwYXRoIGFnYWluc3QgdGhlIHNwZWNpZmllZCBvcmlnaW4gcGF0aC5cclxuICogQHBhcmFtIHtzdHJpbmd9IG9yaWdpblBhdGggUGF0aCB0byB0aGUgb3JpZ2luIGZpbGVcclxuICogQHBhcmFtIHtzdHJpbmd9IGluY2x1ZGVQYXRoIEluY2x1ZGUgcGF0aCByZWxhdGl2ZSB0byBvcmlnaW4gcGF0aFxyXG4gKiBAcGFyYW0ge2Jvb2xlYW59IFthbHJlYWR5Tm9ybWFsaXplZD1mYWxzZV0gYHRydWVgIGlmIGJvdGggcGF0aHMgYXJlIGFscmVhZHkga25vd24gdG8gYmUgbm9ybWFsaXplZFxyXG4gKiBAcmV0dXJucyB7c3RyaW5nfSBQYXRoIHRvIHRoZSBpbmNsdWRlIGZpbGVcclxuICovXHJcbnBhdGgucmVzb2x2ZSA9IGZ1bmN0aW9uIHJlc29sdmUob3JpZ2luUGF0aCwgaW5jbHVkZVBhdGgsIGFscmVhZHlOb3JtYWxpemVkKSB7XHJcbiAgICBpZiAoIWFscmVhZHlOb3JtYWxpemVkKVxyXG4gICAgICAgIGluY2x1ZGVQYXRoID0gbm9ybWFsaXplKGluY2x1ZGVQYXRoKTtcclxuICAgIGlmIChpc0Fic29sdXRlKGluY2x1ZGVQYXRoKSlcclxuICAgICAgICByZXR1cm4gaW5jbHVkZVBhdGg7XHJcbiAgICBpZiAoIWFscmVhZHlOb3JtYWxpemVkKVxyXG4gICAgICAgIG9yaWdpblBhdGggPSBub3JtYWxpemUob3JpZ2luUGF0aCk7XHJcbiAgICByZXR1cm4gKG9yaWdpblBhdGggPSBvcmlnaW5QYXRoLnJlcGxhY2UoLyg/OlxcL3xeKVteL10rJC8sIFwiXCIpKS5sZW5ndGggPyBub3JtYWxpemUob3JpZ2luUGF0aCArIFwiL1wiICsgaW5jbHVkZVBhdGgpIDogaW5jbHVkZVBhdGg7XHJcbn07XHJcbiJdLCJuYW1lcyI6WyJwYXRoIiwiZXhwb3J0cyIsImlzQWJzb2x1dGUiLCJ0ZXN0Iiwibm9ybWFsaXplIiwicmVwbGFjZSIsInBhcnRzIiwic3BsaXQiLCJhYnNvbHV0ZSIsInByZWZpeCIsInNoaWZ0IiwiaSIsImxlbmd0aCIsInNwbGljZSIsImpvaW4iLCJyZXNvbHZlIiwib3JpZ2luUGF0aCIsImluY2x1ZGVQYXRoIiwiYWxyZWFkeU5vcm1hbGl6ZWQiXSwic291cmNlUm9vdCI6IiJ9\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/path/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/pool/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/pool/index.js ***!
  \************************************************/
/***/ ((module) => {

eval("\n\nmodule.exports = pool;\n\n/**\r\n * An allocator as used by {@link util.pool}.\r\n * @typedef PoolAllocator\r\n * @type {function}\r\n * @param {number} size Buffer size\r\n * @returns {Uint8Array} Buffer\r\n */\n\n/**\r\n * A slicer as used by {@link util.pool}.\r\n * @typedef PoolSlicer\r\n * @type {function}\r\n * @param {number} start Start offset\r\n * @param {number} end End offset\r\n * @returns {Uint8Array} Buffer slice\r\n * @this {Uint8Array}\r\n */\n\n/**\r\n * A general purpose buffer pool.\r\n * @memberof util\r\n * @function\r\n * @param {PoolAllocator} alloc Allocator\r\n * @param {PoolSlicer} slice Slicer\r\n * @param {number} [size=8192] Slab size\r\n * @returns {PoolAllocator} Pooled allocator\r\n */\nfunction pool(alloc, slice, size) {\n  var SIZE = size || 8192;\n  var MAX = SIZE >>> 1;\n  var slab = null;\n  var offset = SIZE;\n  return function pool_alloc(size) {\n    if (size < 1 || size > MAX) return alloc(size);\n    if (offset + size > SIZE) {\n      slab = alloc(SIZE);\n      offset = 0;\n    }\n    var buf = slice.call(slab, offset, offset += size);\n    if (offset & 7)\n      // align to 32 bit\n      offset = (offset | 7) + 1;\n    return buf;\n  };\n}//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiKHNzcikvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcG9vbC9pbmRleC5qcyIsIm1hcHBpbmdzIjoiQUFBYTs7QUFDYkEsTUFBTSxDQUFDQyxPQUFPLEdBQUdDLElBQUk7O0FBRXJCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTQSxJQUFJQSxDQUFDQyxLQUFLLEVBQUVDLEtBQUssRUFBRUMsSUFBSSxFQUFFO0VBQzlCLElBQUlDLElBQUksR0FBS0QsSUFBSSxJQUFJLElBQUk7RUFDekIsSUFBSUUsR0FBRyxHQUFNRCxJQUFJLEtBQUssQ0FBQztFQUN2QixJQUFJRSxJQUFJLEdBQUssSUFBSTtFQUNqQixJQUFJQyxNQUFNLEdBQUdILElBQUk7RUFDakIsT0FBTyxTQUFTSSxVQUFVQSxDQUFDTCxJQUFJLEVBQUU7SUFDN0IsSUFBSUEsSUFBSSxHQUFHLENBQUMsSUFBSUEsSUFBSSxHQUFHRSxHQUFHLEVBQ3RCLE9BQU9KLEtBQUssQ0FBQ0UsSUFBSSxDQUFDO0lBQ3RCLElBQUlJLE1BQU0sR0FBR0osSUFBSSxHQUFHQyxJQUFJLEVBQUU7TUFDdEJFLElBQUksR0FBR0wsS0FBSyxDQUFDRyxJQUFJLENBQUM7TUFDbEJHLE1BQU0sR0FBRyxDQUFDO0lBQ2Q7SUFDQSxJQUFJRSxHQUFHLEdBQUdQLEtBQUssQ0FBQ1EsSUFBSSxDQUFDSixJQUFJLEVBQUVDLE1BQU0sRUFBRUEsTUFBTSxJQUFJSixJQUFJLENBQUM7SUFDbEQsSUFBSUksTUFBTSxHQUFHLENBQUM7TUFBRTtNQUNaQSxNQUFNLEdBQUcsQ0FBQ0EsTUFBTSxHQUFHLENBQUMsSUFBSSxDQUFDO0lBQzdCLE9BQU9FLEdBQUc7RUFDZCxDQUFDO0FBQ0wiLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9uZXh0anMvLi9ub2RlX21vZHVsZXMvQHByb3RvYnVmanMvcG9vbC9pbmRleC5qcz8wZmFiIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xyXG5tb2R1bGUuZXhwb3J0cyA9IHBvb2w7XHJcblxyXG4vKipcclxuICogQW4gYWxsb2NhdG9yIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xBbGxvY2F0b3JcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc2l6ZSBCdWZmZXIgc2l6ZVxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyXHJcbiAqL1xyXG5cclxuLyoqXHJcbiAqIEEgc2xpY2VyIGFzIHVzZWQgYnkge0BsaW5rIHV0aWwucG9vbH0uXHJcbiAqIEB0eXBlZGVmIFBvb2xTbGljZXJcclxuICogQHR5cGUge2Z1bmN0aW9ufVxyXG4gKiBAcGFyYW0ge251bWJlcn0gc3RhcnQgU3RhcnQgb2Zmc2V0XHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBlbmQgRW5kIG9mZnNldFxyXG4gKiBAcmV0dXJucyB7VWludDhBcnJheX0gQnVmZmVyIHNsaWNlXHJcbiAqIEB0aGlzIHtVaW50OEFycmF5fVxyXG4gKi9cclxuXHJcbi8qKlxyXG4gKiBBIGdlbmVyYWwgcHVycG9zZSBidWZmZXIgcG9vbC5cclxuICogQG1lbWJlcm9mIHV0aWxcclxuICogQGZ1bmN0aW9uXHJcbiAqIEBwYXJhbSB7UG9vbEFsbG9jYXRvcn0gYWxsb2MgQWxsb2NhdG9yXHJcbiAqIEBwYXJhbSB7UG9vbFNsaWNlcn0gc2xpY2UgU2xpY2VyXHJcbiAqIEBwYXJhbSB7bnVtYmVyfSBbc2l6ZT04MTkyXSBTbGFiIHNpemVcclxuICogQHJldHVybnMge1Bvb2xBbGxvY2F0b3J9IFBvb2xlZCBhbGxvY2F0b3JcclxuICovXHJcbmZ1bmN0aW9uIHBvb2woYWxsb2MsIHNsaWNlLCBzaXplKSB7XHJcbiAgICB2YXIgU0laRSAgID0gc2l6ZSB8fCA4MTkyO1xyXG4gICAgdmFyIE1BWCAgICA9IFNJWkUgPj4+IDE7XHJcbiAgICB2YXIgc2xhYiAgID0gbnVsbDtcclxuICAgIHZhciBvZmZzZXQgPSBTSVpFO1xyXG4gICAgcmV0dXJuIGZ1bmN0aW9uIHBvb2xfYWxsb2Moc2l6ZSkge1xyXG4gICAgICAgIGlmIChzaXplIDwgMSB8fCBzaXplID4gTUFYKVxyXG4gICAgICAgICAgICByZXR1cm4gYWxsb2Moc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCArIHNpemUgPiBTSVpFKSB7XHJcbiAgICAgICAgICAgIHNsYWIgPSBhbGxvYyhTSVpFKTtcclxuICAgICAgICAgICAgb2Zmc2V0ID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgdmFyIGJ1ZiA9IHNsaWNlLmNhbGwoc2xhYiwgb2Zmc2V0LCBvZmZzZXQgKz0gc2l6ZSk7XHJcbiAgICAgICAgaWYgKG9mZnNldCAmIDcpIC8vIGFsaWduIHRvIDMyIGJpdFxyXG4gICAgICAgICAgICBvZmZzZXQgPSAob2Zmc2V0IHwgNykgKyAxO1xyXG4gICAgICAgIHJldHVybiBidWY7XHJcbiAgICB9O1xyXG59XHJcbiJdLCJuYW1lcyI6WyJtb2R1bGUiLCJleHBvcnRzIiwicG9vbCIsImFsbG9jIiwic2xpY2UiLCJzaXplIiwiU0laRSIsIk1BWCIsInNsYWIiLCJvZmZzZXQiLCJwb29sX2FsbG9jIiwiYnVmIiwiY2FsbCJdLCJzb3VyY2VSb290IjoiIn0=\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/pool/index.js\n");

/***/ }),

/***/ "(ssr)/./node_modules/@protobufjs/utf8/index.js":
/*!************************************************!*\
  !*** ./node_modules/@protobufjs/utf8/index.js ***!
  \************************************************/
/***/ ((__unused_webpack_module, exports) => {

eval("\n\n/**\r\n * A minimal UTF8 implementation for number arrays.\r\n * @memberof util\r\n * @namespace\r\n */\nvar utf8 = exports;\n\n/**\r\n * Calculates the UTF8 byte length of a string.\r\n * @param {string} string String\r\n * @returns {number} Byte length\r\n */\nutf8.length = function utf8_length(string) {\n  var len = 0,\n    c = 0;\n  for (var i = 0; i < string.length; ++i) {\n    c = string.charCodeAt(i);\n    if (c < 128) len += 1;else if (c < 2048) len += 2;else if ((c & 0xFC00) === 0xD800 && (string.charCodeAt(i + 1) & 0xFC00) === 0xDC00) {\n      ++i;\n      len += 4;\n    } else len += 3;\n  }\n  return len;\n};\n\n/**\r\n * Reads UTF8 bytes as a string.\r\n * @param {Uint8Array} buffer Source buffer\r\n * @param {number} start Source start\r\n * @param {number} end Source end\r\n * @returns {string} String read\r\n */\nutf8.read = function utf8_read(buffer, start, end) {\n  var len = end - start;\n  if (len < 1) return \"\";\n  var parts = null,\n    chunk = [],\n    i = 0,\n    // char offset\n    t; // temporary\n  while (start < end) {\n    t = buffer[start++];\n    if (t < 128) chunk[i++] = t;else if (t > 191 && t < 224) chunk[i++] = (t & 31) << 6 | buffer[start++] & 63;else if (t > 239 && t < 365) {\n      t = ((t & 7) << 18 | (buffer[start++] & 63) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63) - 0x10000;\n      chunk[i++] = 0xD800 + (t >> 10);\n      chunk[i++] = 0xDC00 + (t & 1023);\n    } else chunk[i++] = (t & 15) << 12 | (buffer[start++] & 63) << 6 | buffer[start++] & 63;\n    if (i > 8191) {\n      (parts || (parts = [])).push(String.fromCharCode.apply(String, chunk));\n      i = 0;\n    }\n  }\n  if (parts) {\n    if (i) parts.push(String.fromCharCode.apply(String, chunk.slice(0, i)));\n    return parts.join(\"\");\n  }\n  return String.fromCharCode.apply(String, chunk.slice(0, i));\n};\n\n/**\r\n * Writes a string as UTF8 bytes.\r\n * @param {string} string Source string\r\n * @param {Uint8Array} buffer Destination buffer\r\n * @param {number} offset Destination offset\r\n * @returns {number} Bytes written\r\n */\nutf8.write = function utf8_write(string, buffer, offset) {\n  var start = offset,\n    c1,\n    // character 1\n    c2; // character 2\n  for (var i = 0; i < string.length; ++i) {\n    c1 = string.charCodeAt(i);\n    if (c1 < 128) {\n      buffer[offset++] = c1;\n    } else if (c1 < 2048) {\n      buffer[offset++] = c1 >> 6 | 192;\n      buffer[offset++] = c1 & 63 | 128;\n    } else if ((c1 & 0xFC00) === 0xD800 && ((c2 = string.charCodeAt(i + 1)) & 0xFC00) === 0xDC00) {\n      c1 = 0x10000 + ((c1 & 0x03FF) << 10) + (c2 & 0x03FF);\n      ++i;\n      buffer[offset++] = c1 >> 18 | 240;\n      buffer[offset++] = c1 >> 12 & 63 | 128;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    } else {\n      buffer[offset++] = c1 >> 12 | 224;\n      buffer[offset++] = c1 >> 6 & 63 | 128;\n      buffer[offset++] = c1 & 63 | 128;\n    }\n  }\n  return offset - start;\n};//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@protobufjs/utf8/index.js\n");

/***/ })

};
;